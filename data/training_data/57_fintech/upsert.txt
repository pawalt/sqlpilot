<t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>UPSERT INTO fintech_transactions (transaction_id, amount, transaction_date, description) VALUES (1, 100.00, '2022-01-01', 'Payment for groceries')</stat><divider><t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>upsert into fintech_transactions (transaction_id, amount, transaction_date, description) values (1, 100.00, '2022-01-01', 'payment for groceries')</stat><divider><t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>UPSERT INTO fintech_transactions (transaction_id, amount, transaction_date, description) VALUES (2, 50.00, '2022-01-02', 'Purchase of clothes')</stat><divider><t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>upsert into fintech_transactions (transaction_id, amount, transaction_date, description) values (2, 50.00, '2022-01-02', 'purchase of clothes')</stat><divider><t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>UPSERT INTO fintech_transactions (transaction_id, amount, transaction_date, description) VALUES (3, 200.00, '2022-01-03', 'Payment for utilities')</stat><divider><t>CREATE TABLE fintech_transactions (transaction_id INT PRIMARY KEY, amount DECIMAL, transaction_date DATE, description VARCHAR(255))</t><stat>upsert into fintech_transactions (transaction_id, amount, transaction_date, description) values (3, 200.00, '2022-01-03', 'payment for utilities')</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'john_doe', 'john.doe@example.com', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'johndoe'</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john.doe@example.com', 'password123') on conflict (user_id) do update set username = 'johndoe'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'john_doe', 'john.doe@example.com', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'johndoe'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john.doe@example.com', 'password123') on conflict (user_id) do update set username = 'johndoe'</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (2, 'jane_smith', 'jane.smith@example.com', 'password456') ON CONFLICT (user_id) DO UPDATE SET email = 'jane.smith@newemail.com'</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (2, 'jane_smith', 'jane.smith@example.com', 'password456') on conflict (user_id) do update set email = 'jane.smith@newemail.com'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (2, 'jane_smith', 'jane.smith@example.com', 'password456') ON CONFLICT (user_id) DO UPDATE SET email = 'jane.smith@newemail.com'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (2, 'jane_smith', 'jane.smith@example.com', 'password456') on conflict (user_id) do update set email = 'jane.smith@newemail.com'</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (3, 'robert_jackson', 'robert.jackson@example.com', 'password789') ON CONFLICT (user_id) DO UPDATE SET password = 'newpassword'</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (3, 'robert_jackson', 'robert.jackson@example.com', 'password789') on conflict (user_id) do update set password = 'newpassword'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (3, 'robert_jackson', 'robert.jackson@example.com', 'password789') ON CONFLICT (user_id) DO UPDATE SET password = 'newpassword'</stat><divider><t>CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    amount DECIMAL(10, 2) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>upsert into users (user_id, username, email, password) values (3, 'robert_jackson', 'robert.jackson@example.com', 'password789') on conflict (user_id) do update set password = 'newpassword'</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john_doe@example.com', 'abc123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into users (user_id, username, email, password_hash) values (1, 'john_doe', 'john_doe@example.com', 'abc123') on conflict (user_id) do update set username = excluded.username, email = excluded.email, password_hash = excluded.password_hash</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'savings', 1000.00) ON CONFLICT (account_id) DO UPDATE SET user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on conflict (account_id) do update set user_id = excluded.user_id, account_type = excluded.account_type, balance = excluded.balance</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>INSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') ON CONFLICT (transaction_id) DO UPDATE SET account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE transactions ( transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10,2), transaction_type VARCHAR(20), transaction_date TIMESTAMP, FOREIGN KEY (account_id) REFERENCES accounts(account_id) )

CREATE TABLE accounts ( account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(50), balance DECIMAL(10,2), FOREIGN KEY (user_id) REFERENCES users(user_id) )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password_hash VARCHAR(100) )</t><stat>insert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-01 10:00:00') on conflict (transaction_id) do update set account_id = excluded.account_id, amount = excluded.amount, transaction_type = excluded.transaction_type, transaction_date = excluded.transaction_date</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO users (user_id, username, email, password) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'pass123') ON DUPLICATE KEY UPDATE username = 'JohnDoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into users (user_id, username, email, password) values (1, 'johndoe', 'johndoe@example.com', 'pass123') on duplicate key update username = 'johndoe', email = 'johndoe@example.com', password = 'pass123';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.00) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.00;</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.00) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.00;</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>UPSERT INTO transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES (1, 1, 500.00, 'Deposit', '2022-01-15') ON DUPLICATE KEY UPDATE account_id = 1, amount = 500.00, transaction_type = 'Deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE investments (investment_id INT PRIMARY KEY, account_id INT, investment_type VARCHAR(255), amount DECIMAL(10, 2), investment_date DATE)

CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, amount DECIMAL(10, 2), transaction_type VARCHAR(255), transaction_date DATE)

CREATE TABLE accounts (account_id INT PRIMARY KEY, user_id INT, account_type VARCHAR(255), balance DECIMAL(10, 2))

CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))</t><stat>upsert into transactions (transaction_id, account_id, amount, transaction_type, transaction_date) values (1, 1, 500.00, 'deposit', '2022-01-15') on duplicate key update account_id = 1, amount = 500.00, transaction_type = 'deposit', transaction_date = '2022-01-15';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Users (user_id, username, email, password) VALUES (1, 'john_doe', 'john@example.com', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into users (user_id, username, email, password) values (1, 'john_doe', 'john@example.com', 'password123') on duplicate key update username = 'john_doe', email = 'john@example.com', password = 'password123';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Accounts (account_id, user_id, account_type, balance) VALUES (1, 1, 'Savings', 1000.50) ON DUPLICATE KEY UPDATE user_id = 1, account_type = 'Savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into accounts (account_id, user_id, account_type, balance) values (1, 1, 'savings', 1000.50) on duplicate key update user_id = 1, account_type = 'savings', balance = 1000.50;</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>UPSERT INTO Loans (loan_id, user_id, loan_amount, interest_rate, loan_status) VALUES (1, 1, 5000.00, 5.5, 'Approved') ON DUPLICATE KEY UPDATE user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'Approved';</stat><divider><t>CREATE TABLE Loans (
  loan_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  loan_amount DECIMAL(10,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  loan_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Investments (
  investment_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  investment_type VARCHAR(50) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  start_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  account_id INT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_date DATE,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

CREATE TABLE Accounts (
  account_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(100) NOT NULL
);</t><stat>upsert into loans (loan_id, user_id, loan_amount, interest_rate, loan_status) values (1, 1, 5000.00, 5.5, 'approved') on duplicate key update user_id = 1, loan_amount = 5000.00, interest_rate = 5.5, loan_status = 'approved';</stat>