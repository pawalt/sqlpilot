[
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_timestamp, interaction_type FROM customer_interactions WHERE customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE customer_id > 100;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE interaction_timestamp >= '2021-10-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE interaction_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_timestamp FROM customer_interactions WHERE interaction_details LIKE '%complaint%';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE interaction_type IN ('Call', 'Email');",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(customer_id) AS avg_customer_id FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_id) AS unique_customers FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(customer_id) AS min_customer_id FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(customer_id) AS max_customer_id FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS interaction_count FROM customer_interactions GROUP BY customer_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_timestamp, interaction_type FROM customer_interactions ORDER BY interaction_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions ORDER BY customer_id ASC, interaction_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS interaction_count FROM customer_interactions GROUP BY customer_id ORDER BY interaction_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_timestamp, interaction_type FROM customer_interactions WHERE interaction_type = 'Call' AND interaction_timestamp >= '2021-10-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE customer_id = 789 LIMIT 1;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_timestamp, interaction_type FROM customer_interactions WHERE customer_id = 100 ORDER BY interaction_timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type FROM customer_interactions WHERE interaction_type = 'Email' ORDER BY interaction_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_id) FROM customer_interactions WHERE interaction_type IN ('Call', 'Email');",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) AS interaction_count FROM customer_interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(interaction_timestamp) AS latest_interaction FROM customer_interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(LENGTH(interaction_details)) AS avg_interaction_length FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interactions WHERE interaction_timestamp >= '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, SUBSTRING(interaction_details, 1, 50) AS short_details FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_details FROM customer_interactions WHERE LENGTH(interaction_details) > 100;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_type, AVG(LENGTH(interaction_details)) AS avg_detail_length FROM customer_interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp FROM customer_interactions WHERE interaction_details LIKE '%complaint%';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp FROM customer_interactions WHERE interaction_details LIKE '%resolution%' ORDER BY interaction_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp FROM customer_interactions WHERE interaction_type = 'Visit' AND interaction_timestamp > '2022-06-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp FROM customer_interactions WHERE interaction_timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-12-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp FROM customer_interactions WHERE DATE(interaction_timestamp) = '2022-09-15';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp, interaction_details FROM customer_interactions WHERE interaction_type IN ('Call', 'Email') AND LENGTH(interaction_details) < 200;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp, interaction_details FROM customer_interactions WHERE customer_id IN (SELECT customer_id FROM customer_interactions GROUP BY customer_id HAVING COUNT(*) > 2);",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_timestamp, interaction_details FROM customer_interactions WHERE interaction_type = 'Complaint' AND interaction_timestamp >= '2022-07-01 00:00:00' AND interaction_timestamp < '2022-08-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, CONCAT(interaction_type, ' at ', interaction_timestamp) AS interaction_info FROM customer_interactions;",
  "### TABLEDATA\n\nCREATE TABLE customer_interactions (\n    customer_id INT PRIMARY KEY,\n    interaction_timestamp TIMESTAMP,\n    interaction_type VARCHAR,\n    interaction_details TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(DISTINCT customer_id) AS unique_customers FROM customer_interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM interactions WHERE interaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, recommended_product_id FROM recommendations WHERE recommendation_score > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT count(*) FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT count(*) FROM recommendations WHERE recommendation_score > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT avg(recommendation_score) FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT distinct customer_id FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_description FROM interactions WHERE interaction_type = 'Meeting';",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interactions.customer_id, recommendations.recommended_product_id FROM interactions JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interactions.customer_id, recommendations.recommended_product_id FROM interactions INNER JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(recommendation_score) FROM recommendations GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) FROM interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, recommendation_date, recommendation_score FROM recommendations ORDER BY recommendation_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, recommendation_score FROM recommendations LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(recommendation_score) AS avg_score, customer_id FROM recommendations GROUP BY customer_id HAVING avg_score > 0.6;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_recommendations FROM recommendations GROUP BY customer_id HAVING total_recommendations > 2;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_interactions FROM interactions GROUP BY customer_id HAVING total_interactions < 5;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions WHERE customer_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_date FROM interactions WHERE interaction_type = 'Meeting' AND interaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, interaction_description FROM interactions ORDER BY interaction_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, COUNT(interaction_id) AS total_interactions FROM interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, COUNT(interaction_id) AS total_interactions FROM interactions WHERE interaction_date >= '2022-01-01' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(recommendation_score) AS avg_score FROM recommendations GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, recommended_product_id, recommendation_date FROM recommendations WHERE recommendation_score > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, recommended_product_id, recommendation_date FROM recommendations WHERE recommendation_score BETWEEN 0.5 AND 0.7;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interactions.customer_id, interactions.interaction_type, recommendations.recommendation_date FROM interactions INNER JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT interaction_type) AS unique_interaction_types FROM interactions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, recommendation_score FROM interactions LEFT JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, recommendation_score FROM interactions RIGHT JOIN recommendations ON interactions.customer_id = recommendations.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions UNION SELECT customer_id, recommendation_date, 'Recommendation' AS interaction_type FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions UNION ALL SELECT customer_id, recommendation_date, 'Recommendation' AS interaction_type FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM (SELECT * FROM interactions UNION SELECT * FROM recommendations) AS merged_data ORDER BY interaction_date DESC LIMIT 20;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM (SELECT * FROM interactions UNION ALL SELECT * FROM recommendations) AS merged_data ORDER BY interaction_date DESC LIMIT 20;",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions WHERE customer_id IN (SELECT customer_id FROM recommendations WHERE recommendation_score > 0.9);",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions WHERE customer_id NOT IN (SELECT customer_id FROM recommendations WHERE recommendation_score > 0.9);",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions WHERE EXISTS (SELECT * FROM recommendations WHERE interactions.customer_id = recommendations.customer_id);",
  "### TABLEDATA\n\nCREATE TABLE interactions (\n  customer_id UUID PRIMARY KEY,\n  interaction_id SERIAL,\n  interaction_date DATE,\n  interaction_type VARCHAR(50),\n  interaction_description TEXT\n);\n\n\nCREATE TABLE recommendations (\n  recommendation_id SERIAL PRIMARY KEY,\n  customer_id UUID,\n  recommended_product_id UUID,\n  recommendation_date DATE,\n  recommendation_score FLOAT\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, interaction_type FROM interactions WHERE NOT EXISTS (SELECT * FROM recommendations WHERE interactions.customer_id = recommendations.customer_id);",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT interaction_id, customer_id, interaction_date FROM customer_interaction;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date FROM customer_interaction WHERE interaction_type = 'purchase';",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_profile;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customer_profile;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM recommendation;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT recommendation_id, customer_id, product_id, recommendation_score FROM recommendation;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, recommendation_score FROM recommendation WHERE recommendation_score > 0.75;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_profile JOIN recommendation ON customer_profile.customer_id = recommendation.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, recommendation_score FROM customer_interaction JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, recommendation_date, first_name, last_name FROM recommendation JOIN customer_profile ON recommendation.customer_id = customer_profile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, product_id, first_name, last_name FROM customer_interaction JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, email FROM customer_interaction JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id WHERE interaction_type = 'email';",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, phone_number FROM customer_interaction JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id WHERE interaction_type = 'call';",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_type, recommendation_score, email FROM customer_interaction JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT interaction_id, first_name, last_name, recommendation_score FROM customer_interaction JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date, recommendation_date, email FROM customer_interaction JOIN recommendation ON customer_interaction.customer_id = recommendation.customer_id JOIN customer_profile ON customer_interaction.customer_id = customer_profile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction WHERE interaction_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction WHERE customer_id = '12345678-1234-5678-1234-567812345678'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_date, interaction_type FROM customer_interaction WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_profile WHERE email LIKE '%@example.com'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customer_profile WHERE phone_number = '123-456-7890'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT recommendation_id, product_id, recommendation_score FROM recommendation WHERE customer_id = '87654321-4321-8765-4321-876543218765'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_interaction WHERE interaction_type = 'meeting' AND interaction_details LIKE '%discussion%'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_profile WHERE first_name = 'John' AND last_name = 'Doe'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_interaction WHERE customer_id = '99999999-9999-9999-9999-999999999999'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date FROM customer_interaction WHERE interaction_type IN ('call', 'email')",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM recommendation WHERE recommendation_date < '2021-01-01' ORDER BY recommendation_score DESC",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customer_profile WHERE customer_id IN (SELECT customer_id FROM recommendation WHERE recommendation_score > 0.8)",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(interaction_id) AS interactions_count FROM customer_interaction GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT interaction_type FROM customer_interaction",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_profile ORDER BY last_name, first_name",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(recommendation_score) AS highest_score FROM recommendation WHERE customer_id = '55555555-5555-5555-5555-555555555555'",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(recommendation_score) AS avg_score FROM recommendation GROUP BY customer_id HAVING AVG(recommendation_score) > 0.5",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(DISTINCT product_id) AS unique_products_count FROM recommendation GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(recommendation_score) AS total_score FROM recommendation GROUP BY customer_id ORDER BY total_score DESC",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(interaction_date) AS first_interaction_date FROM customer_interaction GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customer_interaction (\n  interaction_id UUID PRIMARY KEY,\n  customer_id UUID,\n  interaction_date TIMESTAMP,\n  interaction_type VARCHAR,\n  interaction_details TEXT\n);\n\nCREATE TABLE customer_profile (\n  customer_id UUID PRIMARY KEY,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE recommendation (\n  recommendation_id UUID PRIMARY KEY,\n  customer_id UUID,\n  product_id INT,\n  recommendation_score FLOAT,\n  recommendation_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(interaction_date) AS last_interaction_date FROM customer_interaction GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, interaction_date FROM CustomerInteractions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT interaction_description FROM CustomerInteractions WHERE interaction_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Recommendations;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, recommendation_date, recommendation_text FROM Recommendations WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT recommendation_text FROM Recommendations WHERE recommendation_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM PurchaseHistory;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, purchase_date, purchase_amount FROM PurchaseHistory WHERE purchase_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_purchases FROM PurchaseHistory GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerProfile;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email_address, join_date FROM CustomerProfile WHERE join_date < '2022-09-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM CustomerProfile WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions JOIN CustomerProfile ON CustomerInteractions.customer_id = CustomerProfile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT Recommendations.customer_id, Recommendations.recommendation_text, CustomerProfile.customer_name FROM Recommendations JOIN CustomerProfile ON Recommendations.customer_id = CustomerProfile.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT CustomerInteractions.customer_id, CustomerInteractions.interaction_date, PurchaseHistory.purchase_amount FROM CustomerInteractions JOIN PurchaseHistory ON CustomerInteractions.customer_id = PurchaseHistory.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT CustomerProfile.customer_name, COUNT(PurchaseHistory.purchase_id) AS total_purchases FROM CustomerProfile LEFT JOIN PurchaseHistory ON CustomerProfile.customer_id = PurchaseHistory.customer_id GROUP BY CustomerProfile.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(purchase_amount) AS total_spend FROM PurchaseHistory GROUP BY customer_id HAVING total_spend > 5000;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(purchase_amount) AS avg_purchase_amount FROM PurchaseHistory GROUP BY customer_id HAVING avg_purchase_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM CustomerProfile;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(join_date) AS earliest_join_date FROM CustomerProfile GROUP BY customer_id ORDER BY earliest_join_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerInteractions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM CustomerInteractions WHERE interaction_type = 'Email';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT interaction_description FROM CustomerInteractions WHERE interaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM Recommendations WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT recommendation_text FROM Recommendations WHERE recommendation_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM PurchaseHistory WHERE purchase_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT purchase_date, purchase_amount FROM PurchaseHistory WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM CustomerProfile WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, email_address FROM CustomerProfile WHERE join_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, phone_number FROM CustomerProfile WHERE customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.interaction_date, r.recommendation_text FROM CustomerInteractions c LEFT JOIN Recommendations r ON c.customer_id = r.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, p.purchase_amount FROM CustomerProfile c INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.interaction_description, r.recommendation_text, p.purchase_amount FROM CustomerInteractions c LEFT JOIN Recommendations r ON c.customer_id = r.customer_id INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.join_date, r.recommendation_date, p.purchase_date FROM CustomerProfile c INNER JOIN Recommendations r ON c.customer_id = r.customer_id INNER JOIN PurchaseHistory p ON p.customer_id = c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, r.recommendation_text, p.purchase_date FROM CustomerProfile c LEFT JOIN Recommendations r ON c.customer_id = r.customer_id LEFT JOIN PurchaseHistory p ON c.customer_id = p.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.customer_name, c.email_address, p.purchase_amount FROM CustomerProfile c INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id WHERE p.purchase_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, r.recommendation_text, p.purchase_amount FROM CustomerProfile c LEFT JOIN Recommendations r ON c.customer_id = r.customer_id INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id WHERE p.purchase_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.join_date, COUNT(r.recommendation_id) AS recommendation_count FROM CustomerProfile c INNER JOIN Recommendations r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.join_date;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(p.purchase_amount) AS total_purchase_amount FROM CustomerProfile c INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE CustomerInteractions (\n    customer_id INT PRIMARY KEY,\n    interaction_date DATE,\n    interaction_type VARCHAR(50),\n    interaction_description TEXT\n);\n\n\nCREATE TABLE Recommendations (\n    recommendation_id INT PRIMARY KEY,\n    customer_id INT,\n    recommendation_text TEXT,\n    recommendation_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE PurchaseHistory (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_date DATE,\n    purchase_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES CustomerInteractions(customer_id)\n);\n\n\nCREATE TABLE CustomerProfile (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(100),\n    email_address VARCHAR(100),\n    phone_number VARCHAR(20),\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.customer_name, MAX(p.purchase_amount) AS largest_purchase_amount FROM CustomerProfile c INNER JOIN PurchaseHistory p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT product_name, category, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT recommendation_date, status FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type FROM interactions WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT product_name, category, price FROM products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT recommendation_date, status FROM recommendations WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, address FROM customers WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT interaction_date, interaction_type, notes FROM interactions WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT product_name, category, price, description FROM products WHERE product_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT order_date, total_amount, status FROM orders WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT recommendation_date, status FROM recommendations WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customers.customer_name, interactions.interaction_date FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id WHERE interactions.interaction_type = 'call';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, notes FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, product_name, category, price FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id WHERE recommendations.status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS avg_order_amount FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, address FROM customers WHERE LENGTH(address) > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT DISTINCT category FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, interaction_date, interaction_type, notes FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id ORDER BY interaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, product_name, recommendation_date FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE recommendation_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, interaction_type, COUNT(interaction_id) AS num_interactions FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id GROUP BY customer_name, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, SUM(price) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.customer_id = products.product_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount, status FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date >= '2022-04-01' AND order_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, interaction_date, interaction_type, notes FROM customers JOIN interactions ON customers.customer_id = interactions.customer_id WHERE interaction_type = 'meeting' AND interaction_date >= '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, product_name, description FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id JOIN products ON recommendations.product_id = products.product_id WHERE products.category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, status FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE status = 'pending' OR status = 'processing';",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, recommendation_date, status FROM customers JOIN recommendations ON customers.customer_id = recommendations.customer_id WHERE DATE(recommendation_date) = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE MONTH(order_date) = 7;",
  "### TABLEDATA\n\nCREATE TABLE customers(customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))\n\nCREATE TABLE interactions(interaction_id INT PRIMARY KEY, customer_id INT, interaction_date DATE, interaction_type VARCHAR(20), notes TEXT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE products(product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50), price FLOAT, description TEXT)\n\nCREATE TABLE orders(order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount FLOAT, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id))\n\nCREATE TABLE recommendations(recommendation_id INT PRIMARY KEY, customer_id INT, product_id INT, recommendation_date DATE, status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (product_id) REFERENCES products(product_id))\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_id) AS num_customers, COUNT(DISTINCT product_id) AS num_products FROM recommendations;"
]