[
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT username, loan_amount FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE interest_rate < 3.5;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, loan_duration FROM peer_to_peer_lending_platform WHERE status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM peer_to_peer_lending_platform WHERE status = 'rejected';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform ORDER BY loan_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_duration >= 12;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT username, interest_rate FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM peer_to_peer_lending_platform WHERE loan_amount < 10000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, loan_amount, status FROM peer_to_peer_lending_platform WHERE interest_rate <= 4.5;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_duration < 6;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, loan_amount FROM peer_to_peer_lending_platform WHERE status = 'approved' AND loan_duration >= 6;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT username, interest_rate FROM peer_to_peer_lending_platform WHERE loan_amount > 8000 AND status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_amount BETWEEN 5000 AND 10000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM peer_to_peer_lending_platform WHERE interest_rate < 3.0;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE status = 'pending' OR status = 'rejected';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_duration > 6 AND interest_rate < 4.0;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM peer_to_peer_lending_platform WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, loan_amount, interest_rate FROM peer_to_peer_lending_platform WHERE interest_rate BETWEEN 3.0 AND 5.0;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE loan_duration > 12 AND status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(interest_rate) AS avg_interest_rate FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(loan_amount) AS total_loans FROM peer_to_peer_lending_platform WHERE status = 'approved' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE status IN ('approved', 'rejected');",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM peer_to_peer_lending_platform WHERE username LIKE '%john%';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT username, loan_amount, loan_duration FROM peer_to_peer_lending_platform WHERE loan_amount > 5000 AND status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS avg_loan_amount FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, loan_duration FROM peer_to_peer_lending_platform WHERE interest_rate < 4.0 AND status != 'rejected';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT username) AS unique_usernames FROM peer_to_peer_lending_platform;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email, status FROM peer_to_peer_lending_platform WHERE loan_duration > 6 AND status != 'pending';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_platform WHERE status = 'pending' ORDER BY loan_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, loan_amount, interest_rate FROM peer_to_peer_lending_platform WHERE loan_amount > 10000 ORDER BY interest_rate ASC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id) AS total_users, MIN(loan_duration) AS min_loan_duration FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, email, loan_duration FROM peer_to_peer_lending_platform WHERE status = 'rejected' ORDER BY loan_duration DESC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_platform (\n    user_id INT,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    loan_amount DECIMAL(10,2),\n    interest_rate DECIMAL(5,2),\n    loan_duration INT,\n    status ENUM('pending', 'approved', 'rejected'),\n    PRIMARY KEY (user_id)\n);\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount, MIN(interest_rate) AS min_interest_rate FROM peer_to_peer_lending_platform WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_id, borrower_name FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrowed_amount FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_id, lender_name FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrowed_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders WHERE available_funds >= 5000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrower_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders WHERE lender_name LIKE '%o';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers ORDER BY borrowed_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders ORDER BY available_funds ASC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, SUM(borrowed_amount) AS total_borrowed_amount FROM borrowers GROUP BY borrower_name;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, AVG(available_funds) AS average_funds FROM lenders GROUP BY lender_name;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers UNION SELECT lender_name, available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers INTERSECT SELECT lender_name, available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers EXCEPT SELECT lender_name, available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM borrowers WHERE borrowed_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrowed_amount BETWEEN 500 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders WHERE available_funds >= 5000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount, lender_name, available_funds FROM borrowers JOIN lenders ON borrowed_amount < available_funds;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_borrowers FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(borrowed_amount) AS avg_borrowed_amount FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT DISTINCT borrower_name FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, SUM(borrowed_amount) AS total_borrowed_amount FROM borrowers GROUP BY borrower_name;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(borrowed_amount) AS max_borrowed_amount FROM borrowers;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, MIN(available_funds) AS min_available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, lender_name, borrowed_amount, available_funds FROM borrowers CROSS JOIN lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers ORDER BY borrowed_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers OFFSET 5 LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, available_funds FROM lenders WHERE lender_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers UNION SELECT lender_name, available_funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrower_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT lender_name, COALESCE(available_funds, 0) AS funds FROM lenders;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrowed_amount < (SELECT AVG(borrowed_amount) FROM borrowers);",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, borrowed_amount FROM borrowers WHERE borrowed_amount = (SELECT MAX(borrowed_amount) FROM borrowers);",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n  borrower_id UUID PRIMARY KEY,\n  borrower_name TEXT,\n  borrowed_amount DECIMAL\n);\n\nCREATE TABLE lenders (\n  lender_id UUID PRIMARY KEY,\n  lender_name TEXT,\n  available_funds DECIMAL\n);\n\n### STATEMENT\n\nSELECT borrower_name, SUM(borrowed_amount) AS total_borrowed_amount FROM borrowers HAVING total_borrowed_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, registration_date FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT loan_id, user_id FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT loan_amount, loan_date FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_transactions;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, loan_id, borrower_id, lender_id FROM peer_to_peer_lending_transactions;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT transaction_amount, transaction_date FROM peer_to_peer_lending_transactions;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, l.loan_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_transactions t ON u.user_id = t.borrower_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, l.loan_amount FROM peer_to_peer_lending_transactions t JOIN peer_to_peer_lending_loans l ON t.loan_id = l.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, l.loan_amount, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS lender, l.loan_amount, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id AND u.user_id = t.lender_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS borrower, l.loan_amount, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id AND u.user_id = t.borrower_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS borrower, l.loan_amount, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id AND u.user_id = t.borrower_id ORDER BY l.loan_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS lender, l.loan_amount, t.transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id AND u.user_id = t.lender_id ORDER BY l.loan_amount ASC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id) FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT SUM(transaction_amount) FROM peer_to_peer_lending_transactions;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM peer_to_peer_lending_users WHERE registration_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, l.loan_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.transaction_amount, u.username AS borrower, u2.username AS lender FROM peer_to_peer_lending_transactions t JOIN peer_to_peer_lending_users u ON t.borrower_id = u.user_id JOIN peer_to_peer_lending_users u2 ON t.lender_id = u2.user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM peer_to_peer_lending_users;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT MAX(loan_amount) AS max_loan_amount FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT MIN(transaction_amount) AS min_transaction_amount FROM peer_to_peer_lending_transactions;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS avg_loan_amount FROM peer_to_peer_lending_loans;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.user_id, COUNT(l.loan_id) AS total_loans FROM peer_to_peer_lending_users u LEFT JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id GROUP BY u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT t.transaction_date, SUM(t.transaction_amount) AS total_transactions FROM peer_to_peer_lending_transactions t GROUP BY t.transaction_date;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM peer_to_peer_lending_users u LEFT JOIN peer_to_peer_lending_transactions t ON u.user_id = t.borrower_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, SUM(l.loan_amount) AS total_loan_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT l.loan_id, u.username AS borrower, u2.username AS lender, t.transaction_amount FROM peer_to_peer_lending_loans l JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id JOIN peer_to_peer_lending_users u ON l.user_id = u.user_id JOIN peer_to_peer_lending_users u2 ON t.lender_id = u2.user_id;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(transaction_amount) AS avg_transaction_amount FROM peer_to_peer_lending_transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS total_transactions FROM peer_to_peer_lending_users u LEFT JOIN peer_to_peer_lending_transactions t ON u.user_id = t.lender_id GROUP BY u.username HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(l.loan_amount) AS avg_loan_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id GROUP BY u.username HAVING COUNT(l.loan_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS lender, SUM(t.transaction_amount) AS total_transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_transactions t ON u.user_id = t.lender_id GROUP BY u.username ORDER BY total_transaction_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT l.loan_id, u.username AS borrower, u2.username AS lender, t.transaction_amount FROM peer_to_peer_lending_loans l JOIN peer_to_peer_lending_transactions t ON l.loan_id = t.loan_id JOIN peer_to_peer_lending_users u ON l.user_id = u.user_id JOIN peer_to_peer_lending_users u2 ON t.lender_id = u2.user_id WHERE t.transaction_date > '2021-06-01';",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MAX(l.loan_amount) AS max_loan_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_loans l ON u.user_id = l.user_id GROUP BY u.username HAVING max_loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE peer_to_peer_lending_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    registration_date DATE\n);\n\n\nCREATE TABLE peer_to_peer_lending_loans (\n    loan_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_date DATE,\n    FOREIGN KEY (user_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n\nCREATE TABLE peer_to_peer_lending_transactions (\n    transaction_id INT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    borrower_id INT NOT NULL,\n    lender_id INT NOT NULL,\n    transaction_amount DECIMAL(10, 2) NOT NULL,\n    transaction_date DATE,\n    FOREIGN KEY (loan_id) REFERENCES peer_to_peer_lending_loans(loan_id),\n    FOREIGN KEY (borrower_id) REFERENCES peer_to_peer_lending_users(user_id),\n    FOREIGN KEY (lender_id) REFERENCES peer_to_peer_lending_users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS lender, AVG(t.transaction_amount) AS avg_transaction_amount FROM peer_to_peer_lending_users u JOIN peer_to_peer_lending_transactions t ON u.user_id = t.lender_id GROUP BY u.username ORDER BY avg_transaction_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT loan_id, borrower_id, amount FROM loans WHERE status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT loan_id, borrower_id, amount FROM loans WHERE borrower_id = 8;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT transaction_id, loan_id, sender_id, receiver_id FROM transactions WHERE transaction_date >= NOW() - INTERVAL 1 DAY;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM wallets;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT wallet_id, user_id, balance FROM wallets WHERE user_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(balance) AS total_balance FROM wallets GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT borrower_id, COUNT(*) AS total_loans FROM loans GROUP BY borrower_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(balance) AS max_balance FROM wallets;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT lender_id, AVG(amount) AS avg_loan_amount FROM loans GROUP BY lender_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN wallets ON users.user_id = wallets.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.user_id, w.balance FROM users u JOIN wallets w ON u.user_id = w.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM loans JOIN transactions ON loans.loan_id = transactions.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT sender_id) AS unique_senders FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_transactions FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS loan_count FROM loans GROUP BY borrower_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, l.loan_id, u1.username AS sender, u2.username AS receiver, t.amount FROM transactions t JOIN loans l ON t.loan_id = l.loan_id JOIN users u1 ON t.sender_id = u1.user_id JOIN users u2 ON t.receiver_id = u2.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT w.user_id, w.balance, COUNT(t.transaction_id) AS transaction_count FROM wallets w LEFT JOIN transactions t ON w.user_id = t.sender_id GROUP BY w.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(l.loan_id) AS total_loans, SUM(l.amount) AS total_loan_amount FROM users u LEFT JOIN loans l ON u.user_id = l.borrower_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT l.loan_id, l.amount, t.sender_id, t.receiver_id FROM loans l JOIN transactions t ON l.loan_id = t.loan_id WHERE t.amount > l.amount;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_transactions FROM users u JOIN transactions t ON u.user_id = t.sender_id GROUP BY u.username HAVING total_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT w.user_id, w.balance, COALESCE(SUM(t.amount), 0) AS total_transaction_amount FROM wallets w LEFT JOIN transactions t ON w.user_id = t.sender_id GROUP BY w.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE status = 'pending' AND amount BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, w.balance FROM users u INNER JOIN wallets w ON u.user_id = w.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, l.amount AS loan_amount, t.amount AS transaction_amount FROM users u JOIN loans l ON u.user_id = l.borrower_id JOIN transactions t ON l.loan_id = t.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, w.balance FROM users u JOIN wallets w ON u.user_id = w.user_id WHERE w.balance < 0;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.transaction_id) AS transaction_count FROM users u JOIN transactions t ON u.user_id = t.sender_id GROUP BY u.username HAVING transaction_count >= 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(w.balance) AS avg_balance FROM users u JOIN wallets w ON u.user_id = w.user_id GROUP BY u.username HAVING avg_balance > 500;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT l.loan_id, u.username AS borrower, w.balance AS borrower_balance, t.amount AS transaction_amount FROM loans l JOIN users u ON l.borrower_id = u.user_id LEFT JOIN wallets w ON u.user_id = w.user_id LEFT JOIN transactions t ON l.loan_id = t.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT username, email, balance FROM users JOIN wallets ON users.user_id = wallets.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  borrower_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending'\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  loan_id INT NOT NULL,\n  sender_id INT NOT NULL,\n  receiver_id INT NOT NULL,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP\n);\n\nCREATE TABLE wallets (\n  wallet_id INT PRIMARY KEY,\n  user_id INT NOT NULL,\n  balance DECIMAL(10,2) DEFAULT 0.00\n);\n\n### STATEMENT\n\nSELECT w.user_id, MAX(w.balance) AS max_balance FROM wallets w GROUP BY w.user_id ORDER BY max_balance DESC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM borrowers;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, email FROM borrowers;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, bank_account FROM lenders;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_id, lender_id, amount FROM transactions WHERE transaction_date = '2022-09-15';\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT loan_id, borrower_id, lender_id, loan_amount FROM loans WHERE loan_status = 'active';\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT payment_amount, payment_date FROM payments WHERE borrower_id = 101;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, lender_name, amount FROM borrowers INNER JOIN transactions ON borrowers.borrower_id = transactions.borrower_id;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM borrowers ORDER BY borrower_name ASC;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, loan_amount FROM borrowers LEFT JOIN loans ON borrowers.borrower_id = loans.borrower_id;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, loan_amount FROM lenders RIGHT JOIN loans ON lenders.lender_id = loans.lender_id;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, lender_name, payment_amount FROM borrowers INNER JOIN payments ON borrowers.borrower_id = payments.borrower_id;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM borrowers;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transactions;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) FROM payments WHERE borrower_id = 102;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT lender_id FROM loans;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT SUM(loan_amount) AS total_loans FROM loans;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_id, COUNT(*) AS loan_count FROM loans GROUP BY borrower_id;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, SUM(payment_amount) AS total_payments FROM borrowers INNER JOIN payments ON borrowers.borrower_id = payments.borrower_id GROUP BY borrower_name;\n",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM borrowers WHERE borrower_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, bank_account FROM lenders WHERE lender_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, address FROM borrowers WHERE borrower_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, contact_number FROM lenders WHERE lender_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, email FROM borrowers WHERE email IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_status = 'approved' AND loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_amount < 1000 AND payment_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, address FROM borrowers WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, bank_account FROM lenders WHERE contact_number = '123-456-7890';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-06-30';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE lender_id = 3 AND loan_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, email FROM borrowers WHERE borrower_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, contact_number FROM lenders WHERE lender_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_amount > 500 AND payment_date > '2021-07-01';",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE borrower_id = 4 AND lender_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, address FROM borrowers ORDER BY borrower_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT lender_name, bank_account FROM lenders ORDER BY bank_account DESC;",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_status IN ('approved', 'disbursed');",
  "### TABLEDATA\n\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY,\n    borrower_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE,\n    address VARCHAR(100)\n);\n\n\nCREATE TABLE lenders (\n    lender_id INT PRIMARY KEY,\n    lender_name VARCHAR(50) NOT NULL,\n    bank_account VARCHAR(20) UNIQUE,\n    contact_number VARCHAR(15)\n);\n\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    amount DECIMAL(10, 2),\n    transaction_date DATE\n);\n\n\nCREATE TABLE loans (\n    loan_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    loan_amount DECIMAL(10, 2),\n    loan_status VARCHAR(20)\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    borrower_id INT,\n    lender_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE\n);\n\n### STATEMENT\n\nSELECT borrower_name, email FROM borrowers WHERE borrower_id < 5;"
]