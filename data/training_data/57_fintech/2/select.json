[
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT payment_date FROM online_payments_processing WHERE payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) AS avg_payment_amount FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) AS max_payment_amount FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MIN(payment_amount) AS min_payment_amount FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_payments FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_payments FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(payment_date) AS last_payment_date FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(payment_amount) AS avg_payment_amount FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_status FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing ORDER BY payment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE payment_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing ORDER BY payment_amount DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_status = 'pending' ORDER BY payment_date;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE customer_id IN (123, 456, 789);",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_date >= '2022-01-01' AND payment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_amount BETWEEN 50 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE payment_status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_date FROM online_payments_processing WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE payment_status = 'success' AND payment_amount <= 500;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(payment_amount) FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT payment_status FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing ORDER BY payment_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE payment_amount BETWEEN 50 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(payment_amount) FROM online_payments_processing GROUP BY customer_id HAVING SUM(payment_amount) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, DATE(payment_date) FROM online_payments_processing;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(payment_amount) AS avg_payment FROM online_payments_processing GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM online_payments_processing WHERE payment_status = 'failure';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount, payment_date FROM online_payments_processing ORDER BY payment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_status IN ('pending', 'processing');",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_status LIKE '%ed';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM online_payments_processing WHERE payment_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE payment_amount > (SELECT AVG(payment_amount) FROM online_payments_processing);",
  "### TABLEDATA\n\nCREATE TABLE online_payments_processing(\n  customer_id INT,\n  payment_amount DECIMAL,\n  payment_date TIMESTAMP,\n  payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, payment_amount FROM online_payments_processing WHERE EXTRACT(MONTH FROM payment_date) = 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_address FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id, payment_amount FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers INNER JOIN Payments ON Customers.customer_id = Payments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers LEFT JOIN Payments ON Customers.customer_id = Payments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_date FROM Customers RIGHT JOIN Payments ON Customers.customer_id = Payments.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers LEFT JOIN Payments ON Customers.customer_id = Payments.customer_id WHERE payment_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id WHERE customer_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id ORDER BY payment_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT AVG(payment_amount) FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT MAX(payment_amount) FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT MIN(payment_amount) FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT SUM(payment_amount) FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(payment_amount) FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_name = 'John'",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM Customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, customer_address FROM Customers WHERE customer_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email, customer_address FROM Customers WHERE customer_name IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, p.payment_amount FROM Customers c JOIN Payments p ON c.customer_id = p.customer_id",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, p.payment_amount FROM Customers c LEFT JOIN Payments p ON c.customer_id = p.customer_id",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_address, payment_amount FROM Customers INNER JOIN Payments ON Customers.customer_id = Payments.customer_id",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_amount FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100),\n    customer_address VARCHAR(255)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    customer_id INT,\n    payment_amount DECIMAL(10, 2),\n    payment_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.customer_email, SUM(p.payment_amount) AS total_payments FROM Customers c JOIN Payments p ON c.customer_id = p.customer_id GROUP BY c.customer_name, c.customer_email HAVING total_payments > 1000",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM Orders WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders INNER JOIN Payments ON Orders.order_id = Payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, payment_status FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount, amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM Orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date, total_amount FROM Orders WHERE total_amount BETWEEN 100 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE customer_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM Customers WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, Orders.order_id, Orders.total_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Customers.customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Payments.amount FROM Customers LEFT JOIN Payments ON Customers.customer_id = Payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM Orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM Orders WHERE total_amount <= 500;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, SUM(Orders.total_amount) AS total_spent FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id HAVING total_spent > 5000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Orders.order_id, Payments.amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id WHERE Payments.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders FROM Orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_name HAVING avg_order_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_order_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, AVG(Payments.amount) AS avg_payment_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id GROUP BY Customers.customer_name HAVING avg_payment_amount < 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_date <= '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_status FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id WHERE payment_status = 'Paid';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    address VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT REFERENCES Customers(customer_id),\n    order_date DATE,\n    total_amount DECIMAL\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT REFERENCES Orders(order_id),\n    payment_date DATE,\n    amount DECIMAL,\n    payment_status VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, address, payment_date FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Payments ON Orders.order_id = Payments.order_id WHERE payment_date >= '2022-04-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount, payment_date FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, status FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, payment_id, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_id, method_name FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_id, card_number FROM payment_methods;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payments WHERE payment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transactions WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT method_id, method_name FROM payment_methods WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE expiration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payments WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions WHERE transaction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE expiration_date < CURRENT_DATE",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, method_name FROM payment_methods WHERE method_name = 'Credit Card'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE customer_id IN (SELECT customer_id FROM payments)",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.description, p.amount FROM transactions t JOIN payments p ON t.payment_id = p.payment_id WHERE p.status = 'Success'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, c.email, SUM(p.amount) AS total_paid FROM customers c JOIN payments p ON c.customer_id = p.customer_id GROUP BY c.customer_name, c.email",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers c LEFT JOIN payments p ON c.customer_id = p.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, t.transaction_date FROM customers c JOIN payments p ON c.customer_id = p.customer_id JOIN transactions t ON p.payment_id = t.payment_id ORDER BY t.transaction_date DESC",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, m.method_name, m.card_number FROM customers c JOIN payment_methods m ON c.customer_id = m.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_payments FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n\nCREATE TABLE payments (\n    payment_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    payment_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE payment_methods (\n    method_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    method_name VARCHAR(50) NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_paid FROM payments",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM orders WHERE order_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM payment_methods WHERE customer_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT method_name, is_default FROM payment_methods WHERE customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT amount_due, due_date FROM invoices;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers ORDER BY customer_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = 3 OR customer_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT method_name, is_default FROM payment_methods WHERE is_default = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount >= 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transactions WHERE amount <= 2000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount, order_date FROM orders WHERE customer_id = 10 AND total_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT invoice_id, amount_due, due_date FROM invoices WHERE due_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) AS num_orders FROM orders GROUP BY customer_id HAVING num_orders > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(o.total_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, p.method_name FROM customers c JOIN payment_methods p ON c.customer_id = p.customer_id WHERE p.is_default = true;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, t.transaction_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, address FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, i.amount_due FROM customers c JOIN invoices i ON c.customer_id = i.customer_id WHERE i.due_date < current_date;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.amount >= 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.total_amount, i.due_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN invoices i ON o.order_id = i.order_id WHERE o.total_amount > i.amount_due;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, p.method_name, t.amount FROM customers c JOIN payment_methods p ON c.customer_id = p.customer_id JOIN transactions t ON p.method_id = t.payment_method_id WHERE t.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.total_amount, t.amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN transactions t ON o.order_id = t.order_id WHERE t.amount > o.total_amount;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT p.method_name, count(t.transaction_id) AS total_transactions FROM payment_methods p JOIN transactions t ON p.method_id = t.payment_method_id GROUP BY p.method_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(t.amount) AS total_spent FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, count(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT c.customer_name, max(t.amount) AS largest_transaction FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    address TEXT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE payment_methods (\n    method_id INT PRIMARY KEY,\n    method_name TEXT,\n    customer_id INT,\n    is_default BOOLEAN\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2)\n);\n\nCREATE TABLE invoices (\n    invoice_id INT PRIMARY KEY,\n    order_id INT,\n    payment_method_id INT,\n    amount_due DECIMAL(10, 2),\n    due_date DATE\n);\n\n### STATEMENT\n\nSELECT customer_id, sum(total_amount) AS total_orders FROM orders GROUP BY customer_id HAVING sum(total_amount) > 1000;"
]