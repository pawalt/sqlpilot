[
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (1, 'Work from Home Policy', 'Allows employees to work from home on select days.', '2023-01-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (2, 'Flexible Hours Policy', 'Employees can set their own work hours within a range.', '2023-02-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (3, 'Remote Work Equipment Policy', 'Providing necessary equipment for remote work.', '2023-03-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (4, 'Communication Guidelines Policy', 'Guidelines for effective communication while working remotely.', '2023-04-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (5, 'Performance Evaluation Policy', 'Process for evaluating remote work performance.', '2023-05-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (6, 'Training and Development Policy', 'Training opportunities for remote employees.', '2023-06-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (7, 'Security Measures Policy', 'Ensuring data security for remote work setups.', '2023-07-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (8, 'Employee Support Policy', 'Support services for remote employees.', '2023-08-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (9, 'Health and Safety Policy', 'Guidelines for maintaining health and safety while working remotely.', '2023-09-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (10, 'Work-Life Balance Policy', 'Promoting work-life balance for remote employees.', '2023-10-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (11, 'Compliance Policy', 'Compliance requirements for remote work operations.', '2023-11-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (12, 'Remote Collaboration Policy', 'Encouraging collaboration among remote teams.', '2023-12-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (13, 'Remote Leadership Development Policy', 'Leadership training for remote managers.', '2024-01-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (14, 'Remote Onboarding Policy', 'Onboarding process for remote new hires.', '2024-02-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (15, 'Remote Work Travel Policy', 'Guidelines for remote work-related travel.', '2024-03-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (16, 'Remote Work Expense Policy', 'Expense reimbursement for remote work.', '2024-04-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (17, 'Remote Work Technology Policy', 'Use of technology tools for remote work.', '2024-05-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (18, 'Remote Work Health Benefits Policy', 'Health benefits for remote employees.', '2024-06-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (19, 'Remote Work Communication Tools Policy', 'Guidelines for communication tools in remote work setups.', '2024-07-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (20, 'Remote Work Time Tracking Policy', 'Tracking work hours and productivity in remote work scenarios.', '2024-08-01', CURRENT_TIMESTAMP);",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (1, 'Work from Home Policy', 'This policy allows employees to work from home when needed.', '2022-01-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Work from Home Policy', policy_description = 'This policy allows employees to work from home when needed.', effective_date = '2022-01-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (2, 'Flexible Work Hours Policy', 'This policy allows employees to adjust their work hours based on personal needs.', '2022-02-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Flexible Work Hours Policy', policy_description = 'This policy allows employees to adjust their work hours based on personal needs.', effective_date = '2022-02-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (3, 'Telecommuting Policy', 'This policy allows employees to work remotely on a regular basis.', '2022-03-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Telecommuting Policy', policy_description = 'This policy allows employees to work remotely on a regular basis.', effective_date = '2022-03-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (4, 'Remote Work Equipment Policy', 'This policy provides guidelines for employees on using company-provided remote work equipment.', '2022-04-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Equipment Policy', policy_description = 'This policy provides guidelines for employees on using company-provided remote work equipment.', effective_date = '2022-04-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (5, 'Work-Life Balance Policy', 'This policy promotes a healthy work-life balance for employees.', '2022-05-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Work-Life Balance Policy', policy_description = 'This policy promotes a healthy work-life balance for employees.', effective_date = '2022-05-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (6, 'Remote Work Communication Policy', 'This policy outlines communication guidelines for remote work situations.', '2022-06-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Communication Policy', policy_description = 'This policy outlines communication guidelines for remote work situations.', effective_date = '2022-06-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (7, 'Remote Work Security Policy', 'This policy ensures data security and privacy in remote work environments.', '2022-07-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Security Policy', policy_description = 'This policy ensures data security and privacy in remote work environments.', effective_date = '2022-07-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (8, 'Remote Work Training Policy', 'This policy provides training resources for remote work practices.', '2022-08-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Training Policy', policy_description = 'This policy provides training resources for remote work practices.', effective_date = '2022-08-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (9, 'Remote Work Attendance Policy', 'This policy covers attendance requirements for remote work arrangements.', '2022-09-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Attendance Policy', policy_description = 'This policy covers attendance requirements for remote work arrangements.', effective_date = '2022-09-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (10, 'Remote Work Performance Policy', 'This policy sets performance expectations for employees working remotely.', '2022-10-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Performance Policy', policy_description = 'This policy sets performance expectations for employees working remotely.', effective_date = '2022-10-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (11, 'Remote Work Equipment Maintenance Policy', 'This policy outlines maintenance requirements for remote work equipment.', '2022-11-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Equipment Maintenance Policy', policy_description = 'This policy outlines maintenance requirements for remote work equipment.', effective_date = '2022-11-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (12, 'Remote Work Expense Policy', 'This policy covers expenses related to remote work arrangements.', '2022-12-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Expense Policy', policy_description = 'This policy covers expenses related to remote work arrangements.', effective_date = '2022-12-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (13, 'Remote Work Health and Safety Policy', 'This policy focuses on health and safety concerns in remote work settings.', '2023-01-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Health and Safety Policy', policy_description = 'This policy focuses on health and safety concerns in remote work settings.', effective_date = '2023-01-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (14, 'Remote Work Emergency Response Policy', 'This policy outlines procedures for emergencies during remote work.', '2023-02-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Emergency Response Policy', policy_description = 'This policy outlines procedures for emergencies during remote work.', effective_date = '2023-02-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (15, 'Remote Work Data Management Policy', 'This policy focuses on data management practices in remote work environments.', '2023-03-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Data Management Policy', policy_description = 'This policy focuses on data management practices in remote work environments.', effective_date = '2023-03-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (16, 'Remote Work Communication Tools Policy', 'This policy covers the use of communication tools in remote work scenarios.', '2023-04-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Communication Tools Policy', policy_description = 'This policy covers the use of communication tools in remote work scenarios.', effective_date = '2023-04-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (17, 'Remote Work Confidentiality Policy', 'This policy addresses confidentiality concerns in remote work environments.', '2023-05-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Confidentiality Policy', policy_description = 'This policy addresses confidentiality concerns in remote work environments.', effective_date = '2023-05-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (18, 'Remote Work Reporting Policy', 'This policy outlines reporting requirements for remote work activities.', '2023-06-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Reporting Policy', policy_description = 'This policy outlines reporting requirements for remote work activities.', effective_date = '2023-06-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (19, 'Remote Work Performance Evaluation Policy', 'This policy sets guidelines for evaluating remote work performance.', '2023-07-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Performance Evaluation Policy', policy_description = 'This policy sets guidelines for evaluating remote work performance.', effective_date = '2023-07-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    effective_date DATE,\n    last_updated TIMESTAMP\n)\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, effective_date, last_updated) VALUES (20, 'Remote Work Eligibility Policy', 'This policy outlines eligibility criteria for remote work arrangements.', '2023-08-01', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_title = 'Remote Work Eligibility Policy', policy_description = 'This policy outlines eligibility criteria for remote work arrangements.', effective_date = '2023-08-01', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (1, 'Policy 1', 'Description for Policy 1', '2023-01-01') ON DUPLICATE KEY UPDATE policy_name='Policy 1 Updated', last_updated_date='2023-02-01';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (2, 'Policy 2', 'Description for Policy 2', '2023-01-02') ON DUPLICATE KEY UPDATE policy_name='Policy 2 Updated', last_updated_date='2023-02-02';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (3, 'Policy 3', 'Description for Policy 3', '2023-01-03') ON DUPLICATE KEY UPDATE policy_name='Policy 3 Updated', last_updated_date='2023-02-03';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (4, 'Policy 4', 'Description for Policy 4', '2023-01-04') ON DUPLICATE KEY UPDATE policy_name='Policy 4 Updated', last_updated_date='2023-02-04';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (5, 'Policy 5', 'Description for Policy 5', '2023-01-05') ON DUPLICATE KEY UPDATE policy_name='Policy 5 Updated', last_updated_date='2023-02-05';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (6, 'Policy 6', 'Description for Policy 6', '2023-01-06') ON DUPLICATE KEY UPDATE policy_name='Policy 6 Updated', last_updated_date='2023-02-06';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (7, 'Policy 7', 'Description for Policy 7', '2023-01-07') ON DUPLICATE KEY UPDATE policy_name='Policy 7 Updated', last_updated_date='2023-02-07';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (8, 'Policy 8', 'Description for Policy 8', '2023-01-08') ON DUPLICATE KEY UPDATE policy_name='Policy 8 Updated', last_updated_date='2023-02-08';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (9, 'Policy 9', 'Description for Policy 9', '2023-01-09') ON DUPLICATE KEY UPDATE policy_name='Policy 9 Updated', last_updated_date='2023-02-09';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (10, 'Policy 10', 'Description for Policy 10', '2023-01-10') ON DUPLICATE KEY UPDATE policy_name='Policy 10 Updated', last_updated_date='2023-02-10';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (11, 'Policy 11', 'Description for Policy 11', '2023-01-11') ON DUPLICATE KEY UPDATE policy_name='Policy 11 Updated', last_updated_date='2023-02-11';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (12, 'Policy 12', 'Description for Policy 12', '2023-01-12') ON DUPLICATE KEY UPDATE policy_name='Policy 12 Updated', last_updated_date='2023-02-12';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (13, 'Policy 13', 'Description for Policy 13', '2023-01-13') ON DUPLICATE KEY UPDATE policy_name='Policy 13 Updated', last_updated_date='2023-02-13';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (14, 'Policy 14', 'Description for Policy 14', '2023-01-14') ON DUPLICATE KEY UPDATE policy_name='Policy 14 Updated', last_updated_date='2023-02-14';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (15, 'Policy 15', 'Description for Policy 15', '2023-01-15') ON DUPLICATE KEY UPDATE policy_name='Policy 15 Updated', last_updated_date='2023-02-15';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (16, 'Policy 16', 'Description for Policy 16', '2023-01-16') ON DUPLICATE KEY UPDATE policy_name='Policy 16 Updated', last_updated_date='2023-02-16';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (17, 'Policy 17', 'Description for Policy 17', '2023-01-17') ON DUPLICATE KEY UPDATE policy_name='Policy 17 Updated', last_updated_date='2023-02-17';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (18, 'Policy 18', 'Description for Policy 18', '2023-01-18') ON DUPLICATE KEY UPDATE policy_name='Policy 18 Updated', last_updated_date='2023-02-18';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (19, 'Policy 19', 'Description for Policy 19', '2023-01-19') ON DUPLICATE KEY UPDATE policy_name='Policy 19 Updated', last_updated_date='2023-02-19';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (20, 'Policy 20', 'Description for Policy 20', '2023-01-20') ON DUPLICATE KEY UPDATE policy_name='Policy 20 Updated', last_updated_date='2023-02-20';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (1, 'Remote Work Policy 1', 'This is the description for Remote Work Policy 1.', '2022-01-01') ON DUPLICATE KEY UPDATE policy_name = 'Remote Work Policy 1 Updated', policy_description = 'Updated description for Remote Work Policy 1', last_updated_date = '2022-01-10';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, last_updated_date) VALUES (2, 'Remote Work Policy 2', '2022-02-01') ON DUPLICATE KEY UPDATE policy_name = 'Remote Work Policy 2 Updated', last_updated_date = '2022-02-10';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, policy_description, last_updated_date) VALUES (3, 'Remote Work Policy 3', 'This is the description for Remote Work Policy 3.', '2022-03-01') ON DUPLICATE KEY UPDATE policy_name = 'Remote Work Policy 3 Updated', policy_description = 'Updated description for Remote Work Policy 3', last_updated_date = '2022-03-10';",
  "### TABLEDATA\n\nCREATE TABLE Remote_Work_Policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated_date DATE\n);\n\nCREATE TABLE Work_Guidelines (\n    guideline_id INT PRIMARY KEY,\n    guideline_name VARCHAR(255) NOT NULL,\n    guideline_content TEXT,\n    created_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO Remote_Work_Policies (policy_id, policy_name, last_updated_date) VALUES (4, 'Remote Work ...",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (1, 'Policy 1', 'Description for Policy 1', CURRENT_TIMESTAMP) ON DUPLICATE KEY UPDATE policy_name='Policy 1 updated', policy_description='Updated description for Policy 1', last_updated=CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (2, 'Policy 2', 'Description for Policy 2', CURRENT_TIMESTAMP) ON DUPLICATE KEY UPDATE policy_name='Policy 2 updated', policy_description='Updated description for Policy 2', last_updated=CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (3, 'Policy 3', 'Description for Policy 3', CURRENT_TIMESTAMP) ON DUPLICATE KEY UPDATE policy_name='Policy 3 updated', policy_description='Updated description for Policy 3', last_updated=CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (1, 101, '2022-01-01', 'Approved') ON DUPLICATE KEY UPDATE employee_id=101, request_date='2022-01-01', request_status='Approved';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (2, 102, '2022-01-02', 'Pending') ON DUPLICATE KEY UPDATE employee_id=102, request_date='2022-01-02', request_status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (3, 103, '2022-01-03', 'Denied') ON DUPLICATE KEY UPDATE employee_id=103, request_date='2022-01-03', request_status='Denied';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, department, hire_date) VALUES (101, 'John Doe', 'IT', '2021-01-01') ON DUPLICATE KEY UPDATE employee_name='John Doe', department='IT', hire_date='2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, department, hire_date) VALUES (102, 'Alice Smith', 'HR', '2021-02-01') ON DUPLICATE KEY UPDATE employee_name='Alice Smith', department='HR', hire_date='2021-02-01';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, department, hire_date) VALUES (103, 'Bob Johnson', 'Finance', '2021-03-01') ON DUPLICATE KEY UPDATE employee_name='Bob Johnson', department='Finance', hire_date='2021-03-01';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (1, 'Work from Anywhere', 'Employees can work from anywhere they choose.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Work from Anywhere', policy_description = 'Employees can work from anywhere they choose.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (2, 'Flexible Hours', 'Employees have flexibility in choosing their work hours.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Flexible Hours', policy_description = 'Employees have flexibility in choosing their work hours.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (3, 'Hybrid Work Model', 'Employees can work both from office and remotely.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Hybrid Work Model', policy_description = 'Employees can work both from office and remotely.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (4, 'Remote Work Guidelines', 'Guidelines for remote work setup and expectations.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Guidelines', policy_description = 'Guidelines for remote work setup and expectations.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (5, 'Virtual Meetings Policy', 'Policy for conducting meetings virtually.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Virtual Meetings Policy', policy_description = 'Policy for conducting meetings virtually.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (6, 'Work-Life Balance Policy', 'Encouraging employees to maintain a healthy work-life balance.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Work-Life Balance Policy', policy_description = 'Encouraging employees to maintain a healthy work-life balance.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (7, 'Equipment Reimbursement', 'Reimbursement policy for equipment used for remote work.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Equipment Reimbursement', policy_description = 'Reimbursement policy for equipment used for remote work.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (8, 'Communication Guidelines', 'Guidelines for effective communication in remote work.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Communication Guidelines', policy_description = 'Guidelines for effective communication in remote work.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (9, 'Security Protocols', 'Protocols to ensure data security in remote work.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Security Protocols', policy_description = 'Protocols to ensure data security in remote work.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (10, 'Training and Development', 'Opportunities for skill development and training.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Training and Development', policy_description = 'Opportunities for skill development and training.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (11, 'Employee Assistance Program', 'Support program for employee well-being.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Employee Assistance Program', policy_description = 'Support program for employee well-being.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (12, 'Remote Work Health Safety', 'Guidelines for health and safety in remote work environments.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Health Safety', policy_description = 'Guidelines for health and safety in remote work environments.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (13, 'Remote Team Collaboration', 'Tools and processes for effective team collaboration in remote settings.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Team Collaboration', policy_description = 'Tools and processes for effective team collaboration in remote settings.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (14, 'Performance Management', 'Processes for managing employee performance in remote work.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Performance Management', policy_description = 'Processes for managing employee performance in remote work.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (15, 'Employee Recognition', 'Programs for recognizing and rewarding employee achievements.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Employee Recognition', policy_description = 'Programs for recognizing and rewarding employee achievements.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (16, 'Remote Work Surveys', 'Surveys to gather feedback and insights on remote work experiences.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Surveys', policy_description = 'Surveys to gather feedback and insights on remote work experiences.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (17, 'Remote Work Technology', 'Guidance on technology tools and platforms for remote work.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Technology', policy_description = 'Guidance on technology tools and platforms for remote work.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (18, 'Data Privacy Policy', 'Policy for ensuring data privacy and confidentiality.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Data Privacy Policy', policy_description = 'Policy for ensuring data privacy and confidentiality.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (19, 'Remote Work Reporting', 'Reporting processes and metrics for remote work performance.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Reporting', policy_description = 'Reporting processes and metrics for remote work performance.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255) NOT NULL,\n    policy_description TEXT,\n    last_updated TIMESTAMP\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT NOT NULL,\n    request_date DATE,\n    request_status VARCHAR(50) DEFAULT 'Pending',\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255) NOT NULL,\n    department VARCHAR(100),\n    hire_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, last_updated) VALUES (20, 'Remote Work Events', 'Interactive events and activities for remote teams.', CURRENT_TIMESTAMP) ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Remote Work Events', policy_description = 'Interactive events and activities for remote teams.', last_updated = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (1, 'Policy 1', 'Description for Policy 1', 'Category 1')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (2, 'Policy 2', 'Description for Policy 2', 'Category 2')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (3, 'Policy 3', 'Description for Policy 3', 'Category 3')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (4, 'Policy 4', 'Description for Policy 4', 'Category 4')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (5, 'Policy 5', 'Description for Policy 5', 'Category 5')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (6, 'Policy 6', 'Description for Policy 6', 'Category 6')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (7, 'Policy 7', 'Description for Policy 7', 'Category 7')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (8, 'Policy 8', 'Description for Policy 8', 'Category 8')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (9, 'Policy 9', 'Description for Policy 9', 'Category 9')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (10, 'Policy 10', 'Description for Policy 10', 'Category 10')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (11, 'Policy 11', 'Description for Policy 11', 'Category 11')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (12, 'Policy 12', 'Description for Policy 12', 'Category 12')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (13, 'Policy 13', 'Description for Policy 13', 'Category 13')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (14, 'Policy 14', 'Description for Policy 14', 'Category 14')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (15, 'Policy 15', 'Description for Policy 15', 'Category 15')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (16, 'Policy 16', 'Description for Policy 16', 'Category 16')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (17, 'Policy 17', 'Description for Policy 17', 'Category 17')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (18, 'Policy 18', 'Description for Policy 18', 'Category 18')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (19, 'Policy 19', 'Description for Policy 19', 'Category 19')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nUPSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (20, 'Policy 20', 'Description for Policy 20', 'Category 20')",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (1, 'Work from Home Policy', 'This policy allows employees to work from home on designated days.', 'Remote Work') ON CONFLICT (policy_id) DO UPDATE SET policy_description = EXCLUDED.policy_description, policy_category = EXCLUDED.policy_category;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_date, update_description) VALUES (1, 1, '2021-10-15', 'Updated work from home policy to include new guidelines.') ON CONFLICT (update_id) DO UPDATE SET update_date = EXCLUDED.update_date, update_description = EXCLUDED.update_description;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_owners (owner_id, owner_name, owner_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON CONFLICT (owner_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_history (history_id, policy_id, event_date, action_performed) VALUES (1, 1, '2021-10-15', 'Policy updated with new guidelines.') ON CONFLICT (history_id) DO UPDATE SET event_date = EXCLUDED.event_date, action_performed = EXCLUDED.action_performed;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (2, 'Flexible Hours Policy', 'This policy allows employees to set flexible work hours based on their needs.', 'Work Schedule') ON CONFLICT (policy_id) DO UPDATE SET policy_description = EXCLUDED.policy_description, policy_category = EXCLUDED.policy_category;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_date, update_description) VALUES (2, 2, '2021-10-20', 'Updated flexible hours policy to allow core working hours.') ON CONFLICT (update_id) DO UPDATE SET update_date = EXCLUDED.update_date, update_description = EXCLUDED.update_description;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_owners (owner_id, owner_name, owner_email) VALUES (2, 'Jane Smith', 'jane.smith@example.com') ON CONFLICT (owner_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_history (history_id, policy_id, event_date, action_performed) VALUES (2, 2, '2021-10-20', 'Policy updated to include core working hours.') ON CONFLICT (history_id) DO UPDATE SET event_date = EXCLUDED.event_date, action_performed = EXCLUDED.action_performed;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (3, 'Remote Communication Policy', 'This policy outlines communication guidelines for remote teams.', 'Communication') ON CONFLICT (policy_id) DO UPDATE SET policy_description = EXCLUDED.policy_description, policy_category = EXCLUDED.policy_category;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_date, update_description) VALUES (3, 3, '2021-10-25', 'Updated communication policy to include video conferencing tools.') ON CONFLICT (update_id) DO UPDATE SET update_date = EXCLUDED.update_date, update_description = EXCLUDED.update_description;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_owners (owner_id, owner_name, owner_email) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com') ON CONFLICT (owner_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_history (history_id, policy_id, event_date, action_performed) VALUES (3, 3, '2021-10-25', 'Policy updated with video conferencing guidelines.') ON CONFLICT (history_id) DO UPDATE SET event_date = EXCLUDED.event_date, action_performed = EXCLUDED.action_performed;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (4, 'Remote Work Security Policy', 'This policy ensures data security for remote work setups.', 'Security') ON CONFLICT (policy_id) DO UPDATE SET policy_description = EXCLUDED.policy_description, policy_category = EXCLUDED.policy_category;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_date, update_description) VALUES (4, 4, '2021-10-30', 'Updated security policy with new encryption protocols.') ON CONFLICT (update_id) DO UPDATE SET update_date = EXCLUDED.update_date, update_description = EXCLUDED.update_description;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_owners (owner_id, owner_name, owner_email) VALUES (4, 'Michael Brown', 'michael.brown@example.com') ON CONFLICT (owner_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_history (history_id, policy_id, event_date, action_performed) VALUES (4, 4, '2021-10-30', 'Policy updated with encryption protocols.') ON CONFLICT (history_id) DO UPDATE SET event_date = EXCLUDED.event_date, action_performed = EXCLUDED.action_performed;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_title, policy_description, policy_category) VALUES (5, 'Remote Work Expense Policy', 'This policy outlines expense reimbursement procedures for remote work expenses.', 'Expense Management') ON CONFLICT (policy_id) DO UPDATE SET policy_description = EXCLUDED.policy_description, policy_category = EXCLUDED.policy_category;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_date, update_description) VALUES (5, 5, '2021-11-05', 'Updated expense policy to include approval process for reimbursements.') ON CONFLICT (update_id) DO UPDATE SET update_date = EXCLUDED.update_date, update_description = EXCLUDED.update_description;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_owners (owner_id, owner_name, owner_email) VALUES (5, 'Sarah Wilson', 'sarah.wilson@example.com') ON CONFLICT (owner_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_title TEXT NOT NULL,\n    policy_description TEXT,\n    policy_category TEXT\n);\n\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    update_date DATE,\n    update_description TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n\nCREATE TABLE policy_owners (\n    owner_id INT PRIMARY KEY,\n    owner_name TEXT NOT NULL,\n    owner_email TEXT UNIQUE\n);\n\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT NOT NULL,\n    event_date DATE,\n    action_performed TEXT,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_history (history_id, policy_id, event_date, action_performed) VALUES (5, 5, '2021-11-05', 'Policy updated with reimbursement approval process.') ON CONFLICT (history_id) DO UPDATE SET event_date = EXCLUDED.event_date, action_performed = EXCLUDED.action_performed;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (1, 'Policy 1', 'Description for Policy 1', 'Category A') ON DUPLICATE KEY UPDATE policy_name = 'Policy 1', policy_description = 'Updated description for Policy 1', policy_category = 'Category A';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (1, 'Role 1', 'Description for Role 1') ON DUPLICATE KEY UPDATE role_name = 'Role 1', role_description = 'Updated description for Role 1';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (1, 1, 'Update Description 1', '2022-01-01') ON DUPLICATE KEY UPDATE policy_id = 1, update_description = 'Updated Update Description 1', update_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (1, 1, '2022-01-01', 'Pending') ON DUPLICATE KEY UPDATE employee_id = 1, request_date = '2022-01-01', request_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (1, 'Employee 1', 'employee1@example.com', 1) ON DUPLICATE KEY UPDATE employee_name = 'Employee 1', employee_email = 'employee1@example.com', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (2, 'Policy 2', 'Description for Policy 2', 'Category B') ON DUPLICATE KEY UPDATE policy_name = 'Policy 2', policy_description = 'Updated description for Policy 2', policy_category = 'Category B';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (2, 'Role 2', 'Description for Role 2') ON DUPLICATE KEY UPDATE role_name = 'Role 2', role_description = 'Updated description for Role 2';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (2, 2, 'Update Description 2', '2022-01-02') ON DUPLICATE KEY UPDATE policy_id = 2, update_description = 'Updated Update Description 2', update_date = '2022-01-02';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (2, 2, '2022-01-02', 'Approved') ON DUPLICATE KEY UPDATE employee_id = 2, request_date = '2022-01-02', request_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (2, 'Employee 2', 'employee2@example.com', 2) ON DUPLICATE KEY UPDATE employee_name = 'Employee 2', employee_email = 'employee2@example.com', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (3, 'Policy 3', 'Description for Policy 3', 'Category C') ON DUPLICATE KEY UPDATE policy_name = 'Policy 3', policy_description = 'Updated description for Policy 3', policy_category = 'Category C';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (3, 'Role 3', 'Description for Role 3') ON DUPLICATE KEY UPDATE role_name = 'Role 3', role_description = 'Updated description for Role 3';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (3, 3, 'Update Description 3', '2022-01-03') ON DUPLICATE KEY UPDATE policy_id = 3, update_description = 'Updated Update Description 3', update_date = '2022-01-03';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (3, 3, '2022-01-03', 'Rejected') ON DUPLICATE KEY UPDATE employee_id = 3, request_date = '2022-01-03', request_status = 'Rejected';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (3, 'Employee 3', 'employee3@example.com', 3) ON DUPLICATE KEY UPDATE employee_name = 'Employee 3', employee_email = 'employee3@example.com', role_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (4, 'Policy 4', 'Description for Policy 4', 'Category D') ON DUPLICATE KEY UPDATE policy_name = 'Policy 4', policy_description = 'Updated description for Policy 4', policy_category = 'Category D';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (4, 'Role 4', 'Description for Role 4') ON DUPLICATE KEY UPDATE role_name = 'Role 4', role_description = 'Updated description for Role 4';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (4, 4, 'Update Description 4', '2022-01-04') ON DUPLICATE KEY UPDATE policy_id = 4, update_description = 'Updated Update Description 4', update_date = '2022-01-04';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (4, 4, '2022-01-04', 'Pending') ON DUPLICATE KEY UPDATE employee_id = 4, request_date = '2022-01-04', request_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (4, 'Employee 4', 'employee4@example.com', 4) ON DUPLICATE KEY UPDATE employee_name = 'Employee 4', employee_email = 'employee4@example.com', role_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (1, 'Policy 1', 'Description of Policy 1', 'Category A') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Updated Policy 1', policy_description = 'Updated Description of Policy 1', policy_category = 'Updated Category A';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (1, 'Role 1', 'Description of Role 1') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Updated Role 1', role_description = 'Updated Description of Role 1';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (1, 1, 'Update description 1', '2022-01-01') ON CONFLICT (update_id) DO UPDATE SET policy_id = 1, update_description = 'Updated update description 1', update_date = '2022-01-02';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (1, 1, '2022-01-01', 'Pending') ON CONFLICT (request_id) DO UPDATE SET employee_id = 1, request_date = '2022-01-02', request_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (1, 'Employee 1', 'employee1@example.com', 1) ON CONFLICT (employee_id) DO UPDATE SET employee_name = 'Updated Employee 1', employee_email = 'updated.employee1@example.com', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (2, 'Policy 2', 'Description of Policy 2', 'Category B') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Updated Policy 2', policy_description = 'Updated Description of Policy 2', policy_category = 'Updated Category B';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (2, 'Role 2', 'Description of Role 2') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Updated Role 2', role_description = 'Updated Description of Role 2';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (2, 2, 'Update description 2', '2022-01-03') ON CONFLICT (update_id) DO UPDATE SET policy_id = 2, update_description = 'Updated update description 2', update_date = '2022-01-04';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (2, 2, '2022-01-03', 'Approved') ON CONFLICT (request_id) DO UPDATE SET employee_id = 2, request_date = '2022-01-04', request_status = 'Rejected';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (2, 'Employee 2', 'employee2@example.com', 2) ON CONFLICT (employee_id) DO UPDATE SET employee_name = 'Updated Employee 2', employee_email = 'updated.employee2@example.com', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (3, 'Policy 3', 'Description of Policy 3', 'Category C') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Updated Policy 3', policy_description = 'Updated Description of Policy 3', policy_category = 'Updated Category C';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (3, 'Role 3', 'Description of Role 3') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Updated Role 3', role_description = 'Updated Description of Role 3';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (3, 3, 'Update description 3', '2022-01-05') ON CONFLICT (update_id) DO UPDATE SET policy_id = 3, update_description = 'Updated update description 3', update_date = '2022-01-06';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (3, 3, '2022-01-05', 'Rejected') ON CONFLICT (request_id) DO UPDATE SET employee_id = 3, request_date = '2022-01-06', request_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (3, 'Employee 3', 'employee3@example.com', 3) ON CONFLICT (employee_id) DO UPDATE SET employee_name = 'Updated Employee 3', employee_email = 'updated.employee3@example.com', role_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO remote_work_policies (policy_id, policy_name, policy_description, policy_category) VALUES (4, 'Policy 4', 'Description of Policy 4', 'Category D') ON CONFLICT (policy_id) DO UPDATE SET policy_name = 'Updated Policy 4', policy_description = 'Updated Description of Policy 4', policy_category = 'Updated Category D';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_roles (role_id, role_name, role_description) VALUES (4, 'Role 4', 'Description of Role 4') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Updated Role 4', role_description = 'Updated Description of Role 4';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO policy_updates (update_id, policy_id, update_description, update_date) VALUES (4, 4, 'Update description 4', '2022-01-07') ON CONFLICT (update_id) DO UPDATE SET policy_id = 4, update_description = 'Updated update description 4', update_date = '2022-01-08';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employee_requests (request_id, employee_id, request_date, request_status) VALUES (4, 4, '2022-01-07', 'Approved') ON CONFLICT (request_id) DO UPDATE SET employee_id = 4, request_date = '2022-01-08', request_status = 'Rejected';",
  "### TABLEDATA\n\nCREATE TABLE remote_work_policies (\n    policy_id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    policy_description TEXT,\n    policy_category VARCHAR(50)\n);\n\nCREATE TABLE employee_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(255),\n    role_description TEXT\n);\n\nCREATE TABLE policy_updates (\n    update_id INT PRIMARY KEY,\n    policy_id INT,\n    update_description TEXT,\n    update_date DATE,\n    FOREIGN KEY (policy_id) REFERENCES remote_work_policies(policy_id)\n);\n\nCREATE TABLE employee_requests (\n    request_id INT PRIMARY KEY,\n    employee_id INT,\n    request_date DATE,\n    request_status VARCHAR(50),\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\n);\n\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    employee_name VARCHAR(255),\n    employee_email VARCHAR(255),\n    role_id INT,\n    FOREIGN KEY (role_id) REFERENCES employee_roles(role_id)\n);\n\n### STATEMENT\n\nINSERT INTO employees (employee_id, employee_name, employee_email, role_id) VALUES (4, 'Employee 4', 'employee4@example.com', 4) ON CONFLICT (employee_id) DO UPDATE SET employee_name = 'Updated Employee 4', employee_email = 'updated.employee4@example.com', role_id = 4;"
]