[
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (1, 'John Doe', 'john@example.com', '123-456-7890', 100, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (2, 'Jane Smith', 'jane@example.com', '987-654-3210', 200, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (3, 'Alice Johnson', 'alice@example.com', '555-123-4567', 150, 'Bronze')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (4, 'Bob Brown', 'bob@example.com', '777-888-9999', 300, 'Platinum')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (5, 'Sarah Wilson', 'sarah@example.com', '111-222-3333', 250, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (6, 'Mike Davis', 'mike@example.com', '444-555-6666', 180, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (7, 'Emily White', 'emily@example.com', '666-777-8888', 220, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (8, 'Ryan Brown', 'ryan@example.com', '888-999-0000', 270, 'Platinum')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (9, 'Linda Wilson', 'linda@example.com', '222-333-4444', 190, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (10, 'Mark Johnson', 'mark@example.com', '333-444-5555', 310, 'Platinum')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (11, 'Anna Brown', 'anna@example.com', '999-000-1111', 280, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (12, 'Tom Smith', 'tom@example.com', '456-789-1234', 240, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (13, 'Grace Wilson', 'grace@example.com', '789-123-4567', 200, 'Bronze')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (14, 'Chris Johnson', 'chris@example.com', '135-246-3579', 340, 'Platinum')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (15, 'Sophia Brown', 'sophia@example.com', '246-357-4680', 290, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (16, 'Paul Wilson', 'paul@example.com', '357-468-5790', 210, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (17, 'Emma Davis', 'emma@example.com', '468-579-6801', 320, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (18, 'Andrew White', 'andrew@example.com', '579-680-7912', 260, 'Silver')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (19, 'Olivia Johnson', 'olivia@example.com', '680-791-9023', 350, 'Platinum')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (20, 'Michael Brown', 'michael@example.com', '791-902-0134', 300, 'Gold')",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890', 100, 'Silver') ON DUPLICATE KEY UPDATE member_points = 100, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '987-654-3210', 200, 'Gold') ON DUPLICATE KEY UPDATE member_points = 200, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com', '555-123-4567', 150, 'Silver') ON DUPLICATE KEY UPDATE member_points = 150, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (4, 'Bob Brown', 'bob.brown@example.com', '111-222-3333', 300, 'Gold') ON DUPLICATE KEY UPDATE member_points = 300, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (5, 'Emily Davis', 'emily.davis@example.com', '999-888-7777', 250, 'Silver') ON DUPLICATE KEY UPDATE member_points = 250, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (6, 'David Wilson', 'david.wilson@example.com', '444-555-6666', 350, 'Gold') ON DUPLICATE KEY UPDATE member_points = 350, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (7, 'Sarah Thompson', 'sarah.thompson@example.com', '222-333-4444', 400, 'Platinum') ON DUPLICATE KEY UPDATE member_points = 400, member_tier = 'Platinum';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (8, 'Michael Rodriguez', 'michael.rodriguez@example.com', '777-666-5555', 450, 'Silver') ON DUPLICATE KEY UPDATE member_points = 450, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (9, 'Jessica Martinez', 'jessica.martinez@example.com', '333-444-5555', 500, 'Gold') ON DUPLICATE KEY UPDATE member_points = 500, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (10, 'William Young', 'william.young@example.com', '888-999-0000', 550, 'Platinum') ON DUPLICATE KEY UPDATE member_points = 550, member_tier = 'Platinum';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (11, 'Amanda Lee', 'amanda.lee@example.com', '555-666-7777', 600, 'Silver') ON DUPLICATE KEY UPDATE member_points = 600, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (12, 'James Garcia', 'james.garcia@example.com', '111-999-8888', 650, 'Gold') ON DUPLICATE KEY UPDATE member_points = 650, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (13, 'Linda Perez', 'linda.perez@example.com', '777-333-2222', 700, 'Platinum') ON DUPLICATE KEY UPDATE member_points = 700, member_tier = 'Platinum';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (14, 'Mark Scott', 'mark.scott@example.com', '222-666-9999', 750, 'Silver') ON DUPLICATE KEY UPDATE member_points = 750, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (15, 'Karen King', 'karen.king@example.com', '888-333-5555', 800, 'Gold') ON DUPLICATE KEY UPDATE member_points = 800, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (16, 'Peter Hill', 'peter.hill@example.com', '333-999-2222', 850, 'Platinum') ON DUPLICATE KEY UPDATE member_points = 850, member_tier = 'Platinum';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (17, 'Susan Turner', 'susan.turner@example.com', '111-555-7777', 900, 'Silver') ON DUPLICATE KEY UPDATE member_points = 900, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (18, 'Henry Baker', 'henry.baker@example.com', '666-333-1111', 950, 'Gold') ON DUPLICATE KEY UPDATE member_points = 950, member_tier = 'Gold';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (19, 'Anna White', 'anna.white@example.com', '999-444-8888', 1000, 'Platinum') ON DUPLICATE KEY UPDATE member_points = 1000, member_tier = 'Platinum';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    member_id INT PRIMARY KEY,\n    member_name VARCHAR(255),\n    member_email VARCHAR(255),\n    member_phone VARCHAR(20),\n    member_points INT,\n    member_tier VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (member_id, member_name, member_email, member_phone, member_points, member_tier) VALUES (20, 'George Thomas', 'george.thomas@example.com', '444-666-2222', 1050, 'Silver') ON DUPLICATE KEY UPDATE member_points = 1050, member_tier = 'Silver';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (1, 1001, 'John Doe', 500) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (2, 1002, 'Jane Smith', 700) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (3, 1003, 'Alice Johnson', 300) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (4, 1004, 'Bob Brown', 900) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (5, 1005, 'Eva Davis', 600) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (6, 1006, 'Alex Wilson', 400) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (7, 1007, 'Sarah Lee', 800) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (8, 1008, 'Kevin Moore', 200) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (9, 1009, 'Linda Green', 1000) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (10, 1010, 'Tom Johnson', 750) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (11, 1011, 'Amy Adams', 850) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (12, 1012, 'Mark Taylor', 950) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (13, 1013, 'Olivia Clark', 1200) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (14, 1014, 'Chris White', 300) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (15, 1015, 'Megan Phillips', 600) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (16, 1016, 'Sam Johnson', 850) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (17, 1017, 'Emily Wilson', 500) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (18, 1018, 'Jason Brown', 400) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (19, 1019, 'Nicole Lee', 700) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (20, 1020, 'Harry Moore', 950) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (1, 1001, 'John Doe', 500) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (2, 1002, 'Jane Smith', 700) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (3, 1003, 'Alice Johnson', 1000) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (4, 1004, 'Bob Brown', 800) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (5, 1005, 'Emily Wilson', 1200) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (6, 1006, 'David Lee', 900) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (7, 1007, 'Sarah Miller', 600) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (8, 1008, 'Michael Davis', 950) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (9, 1009, 'Laura Garcia', 850) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (10, 1010, 'Kevin Rodriguez', 1100) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (11, 1011, 'Hannah Martinez', 750) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (12, 1012, 'Ryan Thompson', 1350) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (13, 1013, 'Olivia Perez', 950) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (14, 1014, 'Ethan Hernandez', 800) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (15, 1015, 'Ava Kang', 1200) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (16, 1016, 'Isaac Kim', 950) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (17, 1017, 'Lily Chen', 800) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (18, 1018, 'Jackson Brown', 1050) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (19, 1019, 'Sophia Clark', 900) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    loyalty_id INT PRIMARY KEY,\n    member_id INT,\n    member_name VARCHAR(50),\n    points_balance INT\n);\n\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    loyalty_id INT,\n    reward_name VARCHAR(50),\n    reward_description TEXT,\n    expiration_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (loyalty_id, member_id, member_name, points_balance) VALUES (20, 1020, 'Nathan White', 1300) ON CONFLICT (loyalty_id) DO UPDATE SET member_id = EXCLUDED.member_id, member_name = EXCLUDED.member_name, points_balance = EXCLUDED.points_balance;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (1, 'Program A', '2022-01-01', '2022-12-31') ON DUPLICATE KEY UPDATE program_name='Program A Updated', start_date='2022-01-01', end_date='2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (2, 'Program B', '2022-02-01', '2022-11-30') ON DUPLICATE KEY UPDATE program_name='Program B Updated', start_date='2022-02-01', end_date='2022-11-30';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (3, 'Program C', '2022-03-01', '2022-10-31') ON DUPLICATE KEY UPDATE program_name='Program C Updated', start_date='2022-03-01', end_date='2022-10-31';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (4, 'Program D', '2022-04-01', '2022-09-30') ON DUPLICATE KEY UPDATE program_name='Program D Updated', start_date='2022-04-01', end_date='2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (5, 'Program E', '2022-05-01', '2022-08-31') ON DUPLICATE KEY UPDATE program_name='Program E Updated', start_date='2022-05-01', end_date='2022-08-31';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (1, 'Alice', 'Smith', 'alice@example.com', 1) ON DUPLICATE KEY UPDATE first_name='Alice', last_name='Smith', email='alice@example.com', loyalty_program_id=1;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (2, 'Bob', 'Johnson', 'bob@example.com', 2) ON DUPLICATE KEY UPDATE first_name='Bob', last_name='Johnson', email='bob@example.com', loyalty_program_id=2;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (3, 'Charlie', 'Brown', 'charlie@example.com', 3) ON DUPLICATE KEY UPDATE first_name='Charlie', last_name='Brown', email='charlie@example.com', loyalty_program_id=3;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (4, 'David', 'Davis', 'david@example.com', 4) ON DUPLICATE KEY UPDATE first_name='David', last_name='Davis', email='david@example.com', loyalty_program_id=4;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (5, 'Eve', 'Parker', 'eve@example.com', 5) ON DUPLICATE KEY UPDATE first_name='Eve', last_name='Parker', email='eve@example.com', loyalty_program_id=5;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (1, 'Reward 1', 50.00, '2022-12-31', 1) ON DUPLICATE KEY UPDATE reward_name='Reward 1', value=50.00, expiry_date='2022-12-31', member_id=1;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (2, 'Reward 2', 100.00, '2022-11-30', 2) ON DUPLICATE KEY UPDATE reward_name='Reward 2', value=100.00, expiry_date='2022-11-30', member_id=2;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (3, 'Reward 3', 75.00, '2022-10-31', 3) ON DUPLICATE KEY UPDATE reward_name='Reward 3', value=75.00, expiry_date='2022-10-31', member_id=3;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (4, 'Reward 4', 200.00, '2022-09-30', 4) ON DUPLICATE KEY UPDATE reward_name='Reward 4', value=200.00, expiry_date='2022-09-30', member_id=4;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (5, 'Reward 5', 150.00, '2022-08-31', 5) ON DUPLICATE KEY UPDATE reward_name='Reward 5', value=150.00, expiry_date='2022-08-31', member_id=5;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (1, 'Gold Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (1, 'John', 'Doe', 'john.doe@example.com', 1) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (1, 'Gift Card', 50.00, '2022-12-31', 1) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (2, 'Silver Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (2, 'Alice', 'Smith', 'alice.smith@example.com', 2) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (2, 'Coupon', 20.00, '2022-12-31', 2) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (3, 'Bronze Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (3, 'Bob', 'Johnson', 'bob.johnson@example.com', 3) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (3, 'T-shirt', 15.00, '2022-12-31', 3) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (4, 'Platinum Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (4, 'Emily', 'Williams', 'emily.williams@example.com', 4) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (4, 'Watch', 100.00, '2022-12-31', 4) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (5, 'Elite Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (5, 'Mark', 'Brown', 'mark.brown@example.com', 5) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (5, 'Sunglasses', 75.00, '2022-12-31', 5) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (6, 'Basic Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (6, 'Jessica', 'Lee', 'jessica.lee@example.com', 6) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (6, 'Coffee Coupon', 5.00, '2022-12-31', 6) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (7, 'Premium Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (7, 'Michael', 'Miller', 'michael.miller@example.com', 7) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (7, 'Smartphone', 500.00, '2022-12-31', 7) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_programs (loyalty_program_id, program_name, start_date, end_date) VALUES (8, 'Exclusive Program', '2022-01-01', '2023-01-01') ON CONFLICT (loyalty_program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO members (member_id, first_name, last_name, email, loyalty_program_id) VALUES (8, 'Sarah', 'Moore', 'sarah.moore@example.com', 8) ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, loyalty_program_id = excluded.loyalty_program_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_programs (\n    loyalty_program_id INT PRIMARY KEY,\n    program_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE members (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    loyalty_program_id INT,\n    FOREIGN KEY (loyalty_program_id) REFERENCES loyalty_programs(loyalty_program_id)\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    value DECIMAL(10,2) NOT NULL,\n    expiry_date DATE,\n    member_id INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, value, expiry_date, member_id) VALUES (8, 'Vacation Package', 1000.00, '2022-12-31', 8) ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, value = excluded.value, expiry_date = excluded.expiry_date, member_id = excluded.member_id;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program1', '2022-01-01', NULL, 'Description1') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program2', '2022-02-01', NULL, 'Description2') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'John', 'Doe', 'john.doe@example.com', '2022-03-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'Jane', 'Smith', 'jane.smith@example.com', '2022-04-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES (uuid_generate_v4(), 'Reward1', 100, 'Description1', '2022-05-01') ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, points_required = excluded.points_required, description = excluded.description, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES (uuid_generate_v4(), 'Reward2', 200, 'Description2', '2022-06-01') ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, points_required = excluded.points_required, description = excluded.description, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES (uuid_generate_v4(), uuid_generate_v4(), '2022-07-01', 50, 0) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, points_earned = excluded.points_earned, points_redeemed = excluded.points_redeemed;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES (uuid_generate_v4(), uuid_generate_v4(), '2022-08-01', 100, 0) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, points_earned = excluded.points_earned, points_redeemed = excluded.points_redeemed;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program3', '2022-09-01', NULL, 'Description3') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program4', '2022-10-01', NULL, 'Description4') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'Alice', 'Brown', 'alice.brown@example.com', '2022-11-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'Bob', 'Johnson', 'bob.johnson@example.com', '2022-12-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES (uuid_generate_v4(), 'Reward3', 150, 'Description3', '2023-01-01') ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, points_required = excluded.points_required, description = excluded.description, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES (uuid_generate_v4(), 'Reward4', 250, 'Description4', '2023-02-01') ON CONFLICT (reward_id) DO UPDATE SET reward_name = excluded.reward_name, points_required = excluded.points_required, description = excluded.description, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES (uuid_generate_v4(), uuid_generate_v4(), '2023-03-01', 75, 0) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, points_earned = excluded.points_earned, points_redeemed = excluded.points_redeemed;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES (uuid_generate_v4(), uuid_generate_v4(), '2023-04-01', 150, 0) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, points_earned = excluded.points_earned, points_redeemed = excluded.points_redeemed;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program5', '2023-05-01', NULL, 'Description5') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES (uuid_generate_v4(), 'Program6', '2023-06-01', NULL, 'Description6') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'Eve', 'White', 'eve.white@example.com', '2023-07-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES (uuid_generate_v4(), 'Charlie', 'Green', 'charlie.green@example.com', '2023-08-01') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, join_date = excluded.join_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES ('111', 'Loyalty Program 1', '2022-01-01', '2023-01-01', 'Description 1') ON CONFLICT (program_id) DO UPDATE SET program_name = 'Updated Program 1', start_date = '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES ('222', 'John', 'Doe', 'john.doe@example.com', '2022-03-01') ON CONFLICT (member_id) DO UPDATE SET first_name = 'Jane', last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES ('333', 'Reward 1', 100, 'Reward Description 1', '2022-12-31') ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Updated Reward 1', points_required = 200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES ('444', '222', '2022-04-15', 50, 0) ON CONFLICT (transaction_id) DO UPDATE SET points_earned = 100, points_redeemed = 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES ('555', 'Loyalty Program 2', '2022-05-01', '2023-05-01', 'Description 2') ON CONFLICT (program_id) DO UPDATE SET program_name = 'Updated Program 2', start_date = '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES ('666', 'Alice', 'Johnson', 'alice.johnson@example.com', '2022-07-01') ON CONFLICT (member_id) DO UPDATE SET first_name = 'Bob', last_name = 'Anderson';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES ('777', 'Reward 2', 150, 'Reward Description 2', '2022-12-31') ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Updated Reward 2', points_required = 250;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES ('888', '666', '2022-08-15', 75, 10) ON CONFLICT (transaction_id) DO UPDATE SET points_earned = 150, points_redeemed = 30;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES ('999', 'Loyalty Program 3', '2022-09-01', '2023-09-01', 'Description 3') ON CONFLICT (program_id) DO UPDATE SET program_name = 'Updated Program 3', start_date = '2022-10-01';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES ('101010', 'Michael', 'Brown', 'michael.brown@example.com', '2022-11-01') ON CONFLICT (member_id) DO UPDATE SET first_name = 'Sarah', last_name = 'Miller';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES ('111111', 'Reward 3', 200, 'Reward Description 3', '2022-12-31') ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Updated Reward 3', points_required = 300;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES ('121212', '101010', '2022-12-15', 100, 50) ON CONFLICT (transaction_id) DO UPDATE SET points_earned = 200, points_redeemed = 40;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES ('131313', 'Loyalty Program 4', '2023-01-01', '2024-01-01', 'Description 4') ON CONFLICT (program_id) DO UPDATE SET program_name = 'Updated Program 4', start_date = '2023-02-01';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES ('141414', 'Emily', 'Taylor', 'emily.taylor@example.com', '2023-03-01') ON CONFLICT (member_id) DO UPDATE SET first_name = 'David', last_name = 'Wilson';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES ('151515', 'Reward 4', 250, 'Reward Description 4', '2023-12-31') ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Updated Reward 4', points_required = 350;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES ('161616', '141414', '2023-04-15', 125, 20) ON CONFLICT (transaction_id) DO UPDATE SET points_earned = 250, points_redeemed = 30;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (program_id, program_name, start_date, end_date, description) VALUES ('171717', 'Loyalty Program 5', '2023-05-01', '2024-05-01', 'Description 5') ON CONFLICT (program_id) DO UPDATE SET program_name = 'Updated Program 5', start_date = '2023-06-01';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO members (member_id, first_name, last_name, email, join_date) VALUES ('181818', 'Sophia', 'Clark', 'sophia.clark@example.com', '2023-07-01') ON CONFLICT (member_id) DO UPDATE SET first_name = 'Oliver', last_name = 'Roberts';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, reward_name, points_required, description, expiration_date) VALUES ('191919', 'Reward 5', 300, 'Reward Description 5', '2023-12-31') ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Updated Reward 5', points_required = 400;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id UUID PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE,\n    description TEXT\n);\n\nCREATE TABLE members (\n    member_id UUID PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    join_date DATE NOT NULL\n);\n\nCREATE TABLE rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT NOT NULL,\n    description TEXT,\n    expiration_date DATE\n);\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    member_id UUID NOT NULL,\n    transaction_date DATE NOT NULL,\n    points_earned INT NOT NULL,\n    points_redeemed INT,\n    FOREIGN KEY (member_id) REFERENCES members(member_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, member_id, transaction_date, points_earned, points_redeemed) VALUES ('202020', '181818', '2023-08-15', 150, 30) ON CONFLICT (transaction_id) DO UPDATE SET points_earned = 300, points_redeemed = 40;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (program_id, program_name, start_date, end_date) VALUES (1, 'Silver Program', '2022-01-01', '2022-12-31') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member (member_id, first_name, last_name, email, phone_number) VALUES (1, 'John', 'Doe', 'john.doe@example.com', '1234567890') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, phone_number = excluded.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member_rewards (reward_id, member_id, reward_name, points_required, expiration_date) VALUES (1, 1, 'Free Coffee', 100, '2023-01-01') ON CONFLICT (reward_id) DO UPDATE SET member_id = excluded.member_id, reward_name = excluded.reward_name, points_required = excluded.points_required, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction (transaction_id, member_id, transaction_date, amount) VALUES (1, 1, '2022-02-15 10:30:00', 15.75) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, amount = excluded.amount;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (history_id, transaction_id, transaction_date, description) VALUES (1, 1, '2022-02-15 10:30:00', 'Purchase of coffee') ON CONFLICT (history_id) DO UPDATE SET transaction_id = excluded.transaction_id, transaction_date = excluded.transaction_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (program_id, program_name, start_date, end_date) VALUES (2, 'Gold Program', '2022-01-01', '2022-12-31') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member (member_id, first_name, last_name, email, phone_number) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', '9876543210') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, phone_number = excluded.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member_rewards (reward_id, member_id, reward_name, points_required, expiration_date) VALUES (2, 2, 'Discount Voucher', 200, '2023-01-01') ON CONFLICT (reward_id) DO UPDATE SET member_id = excluded.member_id, reward_name = excluded.reward_name, points_required = excluded.points_required, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction (transaction_id, member_id, transaction_date, amount) VALUES (2, 2, '2022-03-20 14:45:00', 25.50) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, amount = excluded.amount;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (history_id, transaction_id, transaction_date, description) VALUES (2, 2, '2022-03-20 14:45:00', 'Purchase of shoes') ON CONFLICT (history_id) DO UPDATE SET transaction_id = excluded.transaction_id, transaction_date = excluded.transaction_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (program_id, program_name, start_date, end_date) VALUES (3, 'Bronze Program', '2022-01-01', '2022-12-31') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member (member_id, first_name, last_name, email, phone_number) VALUES (3, 'Michael', 'Johnson', 'michael.johnson@example.com', '5555555555') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, phone_number = excluded.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member_rewards (reward_id, member_id, reward_name, points_required, expiration_date) VALUES (3, 3, 'Gift Card', 150, '2023-01-01') ON CONFLICT (reward_id) DO UPDATE SET member_id = excluded.member_id, reward_name = excluded.reward_name, points_required = excluded.points_required, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction (transaction_id, member_id, transaction_date, amount) VALUES (3, 3, '2022-04-10 09:00:00', 50.00) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, amount = excluded.amount;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (history_id, transaction_id, transaction_date, description) VALUES (3, 3, '2022-04-10 09:00:00', 'Purchase of gift card') ON CONFLICT (history_id) DO UPDATE SET transaction_id = excluded.transaction_id, transaction_date = excluded.transaction_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (program_id, program_name, start_date, end_date) VALUES (4, 'Platinum Program', '2022-01-01', '2022-12-31') ON CONFLICT (program_id) DO UPDATE SET program_name = excluded.program_name, start_date = excluded.start_date, end_date = excluded.end_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member (member_id, first_name, last_name, email, phone_number) VALUES (4, 'Sarah', 'Williams', 'sarah.williams@example.com', '7777777777') ON CONFLICT (member_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, email = excluded.email, phone_number = excluded.phone_number;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO member_rewards (reward_id, member_id, reward_name, points_required, expiration_date) VALUES (4, 4, 'Special Event Ticket', 300, '2023-01-01') ON CONFLICT (reward_id) DO UPDATE SET member_id = excluded.member_id, reward_name = excluded.reward_name, points_required = excluded.points_required, expiration_date = excluded.expiration_date;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction (transaction_id, member_id, transaction_date, amount) VALUES (4, 4, '2022-05-25 17:30:00', 100.00) ON CONFLICT (transaction_id) DO UPDATE SET member_id = excluded.member_id, transaction_date = excluded.transaction_date, amount = excluded.amount;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nINSERT INTO transaction_history (history_id, transaction_id, transaction_date, description) VALUES (4, 4, '2022-05-25 17:30:00', 'Purchase of event ticket') ON CONFLICT (history_id) DO UPDATE SET transaction_id = excluded.transaction_id, transaction_date = excluded.transaction_date, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program(program_id, program_name, start_date, end_date) VALUES (1, 'Loyalty Program 1', '2022-01-01', '2022-12-31') ON DUPLICATE KEY UPDATE program_name='Updated Loyalty Program 1';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member(member_id, first_name, last_name, email, phone_number) VALUES (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE first_name='Jane', last_name='Doe';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member_rewards(reward_id, member_id, reward_name, points_required, expiration_date) VALUES (1, 1, 'Reward 1', 100, '2022-12-31') ON DUPLICATE KEY UPDATE points_required=150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction(transaction_id, member_id, transaction_date, amount) VALUES (1, 1, '2022-07-15 12:00:00', 50.00) ON DUPLICATE KEY UPDATE amount=75.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction_history(history_id, transaction_id, transaction_date, description) VALUES (1, 1, '2022-07-15 12:00:00', 'Transaction 1') ON DUPLICATE KEY UPDATE description='Updated Transaction 1';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program(program_id, program_name, start_date, end_date) VALUES (2, 'Loyalty Program 2', '2022-01-01', '2022-12-31') ON DUPLICATE KEY UPDATE program_name='Updated Loyalty Program 2';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member(member_id, first_name, last_name, email, phone_number) VALUES (2, 'Alice', 'Smith', 'alice.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE first_name='Bob', last_name='Smith';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member_rewards(reward_id, member_id, reward_name, points_required, expiration_date) VALUES (2, 2, 'Reward 2', 200, '2022-12-31') ON DUPLICATE KEY UPDATE points_required=250;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction(transaction_id, member_id, transaction_date, amount) VALUES (2, 2, '2022-07-20 09:00:00', 100.00) ON DUPLICATE KEY UPDATE amount=125.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction_history(history_id, transaction_id, transaction_date, description) VALUES (2, 2, '2022-07-20 09:00:00', 'Transaction 2') ON DUPLICATE KEY UPDATE description='Updated Transaction 2';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program(program_id, program_name, start_date, end_date) VALUES (3, 'Loyalty Program 3', '2022-01-01', '2022-12-31') ON DUPLICATE KEY UPDATE program_name='Updated Loyalty Program 3';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member(member_id, first_name, last_name, email, phone_number) VALUES (3, 'Emily', 'Johnson', 'emily.johnson@example.com', '555-123-4567') ON DUPLICATE KEY UPDATE first_name='David', last_name='Johnson';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member_rewards(reward_id, member_id, reward_name, points_required, expiration_date) VALUES (3, 3, 'Reward 3', 300, '2022-12-31') ON DUPLICATE KEY UPDATE points_required=350;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction(transaction_id, member_id, transaction_date, amount) VALUES (3, 3, '2022-07-25 15:30:00', 150.00) ON DUPLICATE KEY UPDATE amount=175.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction_history(history_id, transaction_id, transaction_date, description) VALUES (3, 3, '2022-07-25 15:30:00', 'Transaction 3') ON DUPLICATE KEY UPDATE description='Updated Transaction 3';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program(program_id, program_name, start_date, end_date) VALUES (4, 'Loyalty Program 4', '2022-01-01', '2022-12-31') ON DUPLICATE KEY UPDATE program_name='Updated Loyalty Program 4';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member(member_id, first_name, last_name, email, phone_number) VALUES (4, 'Michael', 'Brown', 'michael.brown@example.com', '222-333-4444') ON DUPLICATE KEY UPDATE first_name='Sarah', last_name='Brown';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO member_rewards(reward_id, member_id, reward_name, points_required, expiration_date) VALUES (4, 4, 'Reward 4', 400, '2022-12-31') ON DUPLICATE KEY UPDATE points_required=450;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction(transaction_id, member_id, transaction_date, amount) VALUES (4, 4, '2022-07-30 18:45:00', 200.00) ON DUPLICATE KEY UPDATE amount=225.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    program_id INT PRIMARY KEY,\n    program_name VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE member (\n    member_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE member_rewards (\n    reward_id INT PRIMARY KEY,\n    member_id INT,\n    reward_name VARCHAR(50) NOT NULL,\n    points_required INT,\n    expiration_date DATE,\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction (\n    transaction_id INT PRIMARY KEY,\n    member_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10,2),\n    FOREIGN KEY (member_id) REFERENCES member(member_id)\n);\n\nCREATE TABLE transaction_history (\n    history_id INT PRIMARY KEY,\n    transaction_id INT,\n    transaction_date TIMESTAMP,\n    description TEXT,\n    FOREIGN KEY (transaction_id) REFERENCES transaction(transaction_id)\n);\n\n### STATEMENT\n\nUPSERT INTO transaction_history(history_id, transaction_id, transaction_date, description) VALUES (4, 4, '2022-07-30 18:45:00', 'Transaction 4') ON DUPLICATE KEY UPDATE description='Updated Transaction 4'"
]