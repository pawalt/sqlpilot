[
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name = 'Policy1';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE changed_by = 'Admin1';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes ORDER BY change_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(id) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT policy_name) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_description LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM policy_changes GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id), MAX(id), MIN(id) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_description, COUNT(*) FROM policy_changes GROUP BY policy_description HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name IN ('Policy1', 'Policy2');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name = 'Policy1' AND changed_by = 'Admin1';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, MAX(change_date) FROM policy_changes GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name = 'example_policy';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, policy_description FROM policy_changes WHERE change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, change_date FROM policy_changes WHERE changed_by = 'admin' AND policy_description LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(change_date) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(id) FROM policy_changes WHERE policy_name = 'example_policy';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM policy_changes GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT changed_by FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes ORDER BY change_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, AVG(id) AS avg_id FROM policy_changes GROUP BY policy_name HAVING AVG(id) > 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*), AVG(id) FROM policy_changes GROUP BY policy_name HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS change_count FROM policy_changes GROUP BY policy_name ORDER BY change_count DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name IN ('policy1', 'policy2', 'policy3');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, AVG(id) AS avg_id FROM policy_changes WHERE changed_by = 'user1' GROUP BY policy_name HAVING AVG(id) < 50;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes WHERE change_date >= '2022-01-01' AND change_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS change_count FROM policy_changes GROUP BY policy_name HAVING change_count <= 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS change_count FROM policy_changes GROUP BY policy_name HAVING AVG(id) > 20;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name LIKE 'policy%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n  id SERIAL PRIMARY KEY,\n  policy_name VARCHAR(50) NOT NULL,\n  policy_description TEXT,\n  change_date TIMESTAMP NOT NULL,\n  changed_by VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, DATE_PART('year', change_date) AS change_year FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT id, policy_name FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, modified_by FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_id, regulation_name FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_name, description FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT id, modified_by FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT id, modified_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_id, regulation_name, description FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, modified_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT id, policy_name, modified_by FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_id, regulation_name, description FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, modified_by, modified_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT id, policy_name, modified_by, modified_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_id, regulation_name FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT regulation_id, regulation_name, description FROM compliance_regulations;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE modified_by = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE modified_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name FROM policy_changes WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM compliance_regulations WHERE regulation_name = 'GDPR';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, modified_by FROM policy_changes WHERE modified_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name LIKE '%security%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, cr.regulation_name FROM policy_changes pc JOIN compliance_regulations cr ON pc.id = cr.regulation_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, cr.description FROM policy_changes pc JOIN compliance_regulations cr ON pc.id = cr.regulation_id WHERE cr.regulation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, COUNT(cr.regulation_id) AS regulation_count FROM policy_changes pc JOIN compliance_regulations cr ON pc.id = cr.regulation_id GROUP BY pc.policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT modified_by, modified_date, COUNT(*) AS change_count FROM policy_changes GROUP BY modified_by, modified_date HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes pc WHERE EXISTS (SELECT 1 FROM compliance_regulations cr WHERE pc.id = cr.regulation_id);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT modified_by FROM policy_changes WHERE modified_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(id), MAX(id), MIN(id) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes ORDER BY modified_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT modified_by, COUNT(*) AS change_count FROM policy_changes GROUP BY modified_by ORDER BY change_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name = 'Security Policy' ORDER BY modified_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT modified_date FROM policy_changes WHERE modified_by = 'Admin' UNION SELECT modified_date FROM policy_changes WHERE modified_by = 'Operator';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, modified_date FROM policy_changes WHERE policy_name IN ('Policy 1', 'Policy 2', 'Policy 3');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE modified_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_changes FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, cr.description FROM policy_changes pc LEFT JOIN compliance_regulations cr ON pc.id = cr.regulation_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT modified_date, MONTH(modified_date), COUNT(*) AS change_count FROM policy_changes GROUP BY MONTH(modified_date);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n   id INT PRIMARY KEY,\n   policy_name VARCHAR(255),\n   modified_by VARCHAR(255),\n   modified_date TIMESTAMP\n);\n\n\nCREATE TABLE compliance_regulations (\n   regulation_id INT PRIMARY KEY,\n   regulation_name VARCHAR(255),\n   description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, YEAR(modified_date), COUNT(*) AS change_count FROM policy_changes GROUP BY policy_name, YEAR(modified_date);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, change_type FROM policy_changes WHERE change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes WHERE change_type = 'update';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, action, timestamp FROM policy_audit_log WHERE policy_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, action, timestamp FROM policy_audit_log WHERE user_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, user_role FROM policy_users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, user_id FROM policy_users WHERE user_role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes pc JOIN policy_audit_log pal ON pc.id = pal.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, pal.action, pal.timestamp FROM policy_changes pc JOIN policy_audit_log pal ON pc.id = pal.policy_id WHERE pc.change_type = 'update';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, pu.user_name, pu.user_role FROM policy_changes pc JOIN policy_audit_log pal ON pc.id = pal.policy_id JOIN policy_users pu ON pal.user_id = pu.user_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, pu.user_name, pal.action FROM policy_changes pc JOIN policy_audit_log pal ON pc.id = pal.policy_id JOIN policy_users pu ON pal.user_id = pu.user_id WHERE pc.change_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, pu.user_name, pal.timestamp FROM policy_changes pc JOIN policy_audit_log pal ON pc.id = pal.policy_id JOIN policy_users pu ON pal.user_id = pu.user_id WHERE pu.user_role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(change_date) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MIN(timestamp) FROM policy_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM policy_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_role FROM policy_users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(DISTINCT user_id) FROM policy_audit_log;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT SUM(user_id) FROM policy_users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) FROM policy_changes GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_type = 'modification';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes WHERE policy_name LIKE '%security%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT log_id, action, timestamp FROM policy_audit_log WHERE action = 'delete' ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_id, user_id, action FROM policy_audit_log WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_users WHERE user_role = 'admin' AND user_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, user_role FROM policy_users WHERE user_role IN ('editor', 'manager');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date, user_id FROM policy_changes JOIN policy_audit_log ON policy_changes.id = policy_audit_log.policy_id WHERE policy_audit_log.user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, user_name, action FROM policy_users CROSS JOIN policy_audit_log WHERE policy_users.user_id = policy_audit_log.user_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, COUNT(log_id) AS num_actions FROM policy_users LEFT JOIN policy_audit_log ON policy_users.user_id = policy_audit_log.user_id GROUP BY user_name HAVING num_actions > 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, MAX(change_date) AS last_change FROM policy_changes GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, user_role, COUNT(*) AS num_policies FROM policy_users JOIN policy_audit_log ON policy_users.user_id = policy_audit_log.user_id GROUP BY user_name, user_role;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, COUNT(*) AS num_changes FROM policy_changes WHERE change_type = 'modification' GROUP BY policy_name HAVING num_changes > 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_id, user_id, user_role FROM policy_audit_log JOIN policy_users ON policy_audit_log.user_id = policy_users.user_id ORDER BY user_role, user_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_role FROM policy_users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_id, COUNT(log_id) AS num_actions FROM policy_audit_log GROUP BY policy_id ORDER BY num_actions DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT policy_name, AVG(TIMESTAMPDIFF(SECOND, change_date, timestamp)) AS avg_change_duration FROM policy_changes JOIN policy_audit_log ON policy_changes.id = policy_audit_log.policy_id GROUP BY policy_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name IN (SELECT DISTINCT policy_name FROM policy_audit_log);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, policy_name, MAX(change_date) AS last_change FROM policy_users JOIN policy_audit_log ON policy_users.user_id = policy_audit_log.user_id JOIN policy_changes ON policy_audit_log.policy_id = policy_changes.id GROUP BY user_name;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type VARCHAR(50),\n    change_date TIMESTAMP\n);\n\nCREATE TABLE policy_audit_log (\n    log_id SERIAL PRIMARY KEY,\n    policy_id INT,\n    user_id INT,\n    action VARCHAR(50),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_role VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_name, COUNT(*) AS num_policies FROM policy_users JOIN policy_audit_log ON policy_users.user_id = policy_audit_log.user_id GROUP BY user_name HAVING num_policies > 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, change_type FROM policy_changes WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE timestamp > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name FROM policy_changes WHERE change_type = 'ADD'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, policy_name, timestamp FROM policy_changes ORDER BY timestamp DESC",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_history",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_id, change_description FROM policy_history WHERE history_id = 2",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_history WHERE change_timestamp BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_history WHERE old_value IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_id, action FROM policy_audit WHERE user_id = 100",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit WHERE audit_timestamp < '2022-06-01'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT requirement_name, description FROM regulatory_requirements WHERE requirement_id = 1",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements WHERE description LIKE '%security%'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements ORDER BY requirement_name ASC",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements WHERE description IS NULL",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements WHERE requirement_name = 'Data Protection Act'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT requirement_name, description FROM regulatory_requirements WHERE requirement_name LIKE '%GDPR%'",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements WHERE requirement_id > 5",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE policy_name LIKE '%health%' ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT policy_name, change_type, timestamp FROM policy_changes WHERE change_type = 'UPDATE' ORDER BY timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, ph.old_value, ph.new_value FROM policy_changes pc JOIN policy_history ph ON pc.id = ph.policy_id WHERE pc.change_type = 'DELETE' ORDER BY ph.change_timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pa.user_id, pa.action, pa.audit_timestamp, pc.policy_name FROM policy_audit pa JOIN policy_changes pc ON pa.policy_id = pc.id WHERE pa.action LIKE '%approval%' ORDER BY pa.audit_timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM regulatory_requirements WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT rr.requirement_name, COUNT(pc.id) AS policy_changes_count FROM regulatory_requirements rr LEFT JOIN policy_changes pc ON rr.requirement_id = pc.id GROUP BY rr.requirement_name ORDER BY policy_changes_count DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT(pc.policy_name) FROM policy_changes pc JOIN policy_history ph ON pc.id = ph.policy_id WHERE ph.change_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pa.audit_id, pa.audit_timestamp, rr.requirement_name FROM policy_audit pa JOIN regulatory_requirements rr ON pa.policy_id = rr.requirement_id ORDER BY pa.audit_timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pa.user_id, COUNT(pa.audit_id) AS audit_count FROM policy_audit pa GROUP BY pa.user_id HAVING audit_count > 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.timestamp AS change_timestamp, pa.audit_timestamp AS audit_timestamp FROM policy_changes pc JOIN policy_audit pa ON pc.id = pa.policy_id WHERE pa.user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT CONCAT(pc.policy_name, ' - ', ph.change_description) AS change_info FROM policy_changes pc JOIN policy_history ph ON pc.id = ph.policy_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pa.user_id, COUNT(pc.id) AS total_changes FROM policy_changes pc JOIN policy_audit pa ON pc.id = pa.policy_id GROUP BY pa.user_id ORDER BY total_changes DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT rr.requirement_name, SUM(pc.id) AS total_policy_ids FROM regulatory_requirements rr JOIN policy_changes pc ON rr.requirement_id = pc.id GROUP BY rr.requirement_name ORDER BY total_policy_ids DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit WHERE policy_id IN (SELECT id FROM policy_changes WHERE policy_name = 'Security Policy') ORDER BY audit_timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.id, pc.policy_name, ph.change_timestamp FROM policy_changes pc JOIN policy_history ph ON pc.id = ph.policy_id WHERE ph.change_timestamp > '2022-01-01' ORDER BY ph.change_timestamp LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT(pa.user_id) FROM policy_audit pa JOIN policy_changes pc ON pa.policy_id = pc.id WHERE pc.policy_name LIKE '%access%' AND pa.action = 'UPDATE';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT rr.requirement_name, pc.policy_name, ph.old_value, ph.new_value, ph.change_description FROM regulatory_requirements rr JOIN policy_changes pc ON rr.requirement_id = pc.id JOIN policy_history ph ON pc.id = ph.policy_id WHERE ph.new_value IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, pa.action, AVG(DATEDIFF(pa.audit_timestamp, pc.timestamp)) AS avg_audit_time FROM policy_changes pc JOIN policy_audit pa ON pc.id = pa.policy_id GROUP BY pc.policy_name, pa.action;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pa.user_id, COUNT(pc.id) AS total_policies_changed FROM policy_changes pc JOIN policy_audit pa ON pc.id = pa.policy_id GROUP BY pa.user_id ORDER BY total_policies_changed DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id INT PRIMARY KEY,\n    policy_name VARCHAR(255),\n    change_type ENUM('ADD','UPDATE','DELETE'),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_history (\n    history_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    old_value TEXT,\n    new_value TEXT,\n    change_description VARCHAR(500),\n    change_timestamp TIMESTAMP\n);\n\nCREATE TABLE policy_audit (\n    audit_id INT PRIMARY KEY,\n    policy_id INT REFERENCES policy_changes(id),\n    user_id INT,\n    action VARCHAR(100),\n    audit_timestamp TIMESTAMP\n);\n\nCREATE TABLE regulatory_requirements (\n    requirement_id INT PRIMARY KEY,\n    requirement_name VARCHAR(255),\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT pc.policy_name, ph.change_description, COUNT(ph.history_id) AS change_count FROM policy_changes pc JOIN policy_history ph ON pc.id = ph.policy_id GROUP BY pc.policy_name, ph.change_description HAVING change_count > 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT change_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_date, change_description FROM policy_changes WHERE change_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_name, email FROM users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit_logs;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, policy_id, action FROM policy_audit_logs WHERE action = 'DELETE';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policies;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_id, policy_name FROM policies WHERE description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_versions;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT version_id, policy_id, previous_version, new_version, change_date FROM policy_versions WHERE change_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name FROM policies UNION SELECT policy_name FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_name, email, role FROM users ORDER BY user_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, description FROM policies ORDER BY policy_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(log_id) AS total_logs FROM policy_audit_logs GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(new_version) AS avg_version FROM policy_versions;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_description FROM policy_changes WHERE change_description LIKE '%update%';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(change_date) AS last_change_date FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_policies FROM policies;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE change_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, change_description FROM policy_changes WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit_logs WHERE action = 'update' ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT policy_name, description FROM policies WHERE policy_name LIKE 'Insurance%' ORDER BY policy_id DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN policy_audit_logs ON users.user_id = policy_audit_logs.user_id WHERE users.role = 'manager' AND policy_audit_logs.action = 'create';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_name, email FROM users WHERE email LIKE '%@company.com';",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.policy_name, v.previous_version, v.new_version FROM policies p JOIN policy_versions v ON p.policy_id = v.policy_id WHERE v.new_version > v.previous_version;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_audit_logs WHERE user_id IN (SELECT user_id FROM users WHERE role = 'admin');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE id IN (SELECT id FROM policy_changes WHERE change_description LIKE 'Approved%');",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policies WHERE policy_id NOT IN (SELECT policy_id FROM policy_versions);",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) FROM policy_audit_logs;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(new_version - previous_version) AS avg_version_change FROM policy_versions;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(change_date) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(change_date) FROM policy_changes;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(*) AS total_changes FROM users u JOIN policy_audit_logs pal ON u.user_id = pal.user_id GROUP BY u.user_name ORDER BY total_changes DESC;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM policy_changes WHERE EXTRACT(MONTH FROM change_date) = 3;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.policy_name, COUNT(pv.version_id) AS total_versions FROM policies p LEFT JOIN policy_versions pv ON p.policy_id = pv.policy_id GROUP BY p.policy_name HAVING COUNT(pv.version_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE policy_changes (\n    id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) NOT NULL,\n    change_date DATE NOT NULL,\n    change_description TEXT\n);\n\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    user_name VARCHAR(200) UNIQUE NOT NULL,\n    email VARCHAR(200) UNIQUE NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE policy_audit_logs (\n    log_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    policy_id INT NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMP\n);\n\n\nCREATE TABLE policies (\n    policy_id SERIAL PRIMARY KEY,\n    policy_name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE policy_versions (\n    version_id SERIAL PRIMARY KEY,\n    policy_id INT NOT NULL,\n    previous_version INT,\n    new_version INT NOT NULL,\n    change_date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT p.policy_name FROM policies p JOIN policy_versions pv ON p.policy_id = pv.policy_id WHERE pv.previous_version IS NULL;"
]