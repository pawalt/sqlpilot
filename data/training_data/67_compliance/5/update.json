[
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET username='john_doe' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET email='john_doe@example.com' WHERE username='john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET role='admin' WHERE user_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET password = 'newpass123' WHERE user_id = 101",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET email = 'newemail@example.com', role = 'admin' WHERE user_id = 102",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50),\n    email VARCHAR(100),\n    role ENUM('admin', 'user'),\n    last_login TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET username = 'newusername', last_login = CURRENT_TIMESTAMP WHERE user_id = 103",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'john_doe' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword123' WHERE username = 'alice_smith';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_description = 'Updated description' WHERE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'johndoe', password = 'newpassword' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE users SET user_role = 'admin' WHERE username = 'janedoe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(50) NOT NULL,\n  user_role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE user_roles (\n  role_id INT PRIMARY KEY,\n  role_name VARCHAR(20) NOT NULL,\n  role_description TEXT\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_name = 'manager', role_description = 'Manages the team' WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE users SET username = 'Alice', password = 'newpassword' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY,\n username VARCHAR(50),\n password VARCHAR(50),\n role VARCHAR(20));\n\nCREATE TABLE roles (role_id INT PRIMARY KEY,\n role_name VARCHAR(50));\n\nCREATE TABLE user_roles (user_id INT,\n role_id INT,\n FOREIGN KEY (user_id) REFERENCES users(user_id),\n FOREIGN KEY (role_id) REFERENCES roles(role_id));\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'new_username' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'new_role_name' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword' WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    id INT,\n    role_id INT,\n    PRIMARY KEY (id, role_id),\n    FOREIGN KEY (id) REFERENCES users(id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'new_username' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'new_role_name' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE permissions SET permission_name = 'new_permission_name' WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    user_id INT,\n    role_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (role_id) REFERENCES roles(role_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT,\n    permission_id INT,\n    FOREIGN KEY (role_id) REFERENCES roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 3;"
]