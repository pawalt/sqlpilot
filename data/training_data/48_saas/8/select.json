[
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_name, start_date FROM projects WHERE status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT * FROM projects WHERE project_manager = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE end_date > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT DISTINCT project_manager FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_name, start_date, end_date FROM projects WHERE end_date IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects WHERE start_date BETWEEN '2023-01-01' AND '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_projects FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_name, status FROM projects ORDER BY start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(end_date, start_date)) AS avg_project_duration FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT * FROM projects WHERE project_name LIKE '%management%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, start_date FROM projects WHERE project_manager LIKE 'M%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE status <> 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects WHERE start_date < '2023-01-01' AND status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_manager, COUNT(*) AS projects_count FROM projects GROUP BY project_manager;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT MIN(start_date) AS earliest_start_date, MAX(end_date) AS latest_end_date FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_manager FROM projects WHERE status IN ('Active', 'Pending');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, end_date FROM projects WHERE status NOT IN ('Completed', 'Archived');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_name, status FROM projects WHERE project_id = '12345678-1234-1234-1234-123456789012';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date FROM projects WHERE status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT * FROM projects WHERE project_manager = 'John Doe' AND start_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, end_date FROM projects WHERE status = 'Inactive';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE start_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE end_date > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT * FROM projects WHERE status = 'Active' ORDER BY start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE status = 'Active' AND project_manager IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE status = 'Active' AND project_manager IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date, end_date FROM projects WHERE status = 'Active' AND start_date < '2022-12-31' AND end_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE status = 'Active' AND project_manager LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date FROM projects WHERE status = 'Active' AND project_manager LIKE '%Doe%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE start_date > '2022-01-01' AND end_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE status = 'Active' ORDER BY project_manager ASC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE start_date BETWEEN '2022-01-01' AND '2022-12-31' AND end_date BETWEEN '2023-01-01' AND '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE start_date > '2022-06-01' AND project_manager = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE status IN ('Active', 'Inactive');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date, end_date FROM projects WHERE status = 'Active' AND project_manager LIKE '%John%' OR project_manager LIKE '%Doe%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, status FROM projects WHERE start_date > '2022-01-01' AND end_date < '2023-01-01' AND project_manager IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, project_manager FROM projects WHERE status = 'Active' AND (start_date < '2022-06-01' OR end_date > '2023-01-01');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE,\n    project_manager VARCHAR(255),\n    status VARCHAR(50) DEFAULT 'Active'\n)\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date, end_date FROM projects WHERE status = 'Active' AND (start_date < '2022-06-01' OR end_date > '2023-01-01') ORDER BY project_manager DESC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, start_date, end_date FROM projects",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects WHERE start_date BETWEEN '2022-01-01' AND '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT task_name, deadline FROM tasks WHERE status = 'To Do'",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, project_id FROM tasks WHERE deadline < '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) AS task_count FROM projects LEFT JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_id",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM projects INNER JOIN tasks ON projects.project_id = tasks.project_id WHERE status = 'In Progress'",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, deadline FROM projects LEFT JOIN tasks ON projects.project_id = tasks.project_id WHERE status = 'Done' AND deadline > '2023-01-01'",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_id, project_name, start_date, end_date FROM projects",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, project_id, task_description, deadline, status FROM tasks",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_id, p.project_name, t.task_name, t.task_description, t.deadline FROM projects p INNER JOIN tasks t ON p.project_id = t.project_id",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, COUNT(t.task_id) AS total_tasks FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, AVG(DATEDIFF(t.deadline, CURDATE())) AS avg_days_to_deadline FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, MAX(DATEDIFF(t.deadline, CURDATE())) AS max_days_to_deadline FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, MIN(DATEDIFF(t.deadline, CURDATE())) AS min_days_to_deadline FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, SUM(CASE WHEN t.status = 'In Progress' THEN 1 ELSE 0 END) AS in_progress_tasks FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, AVG(DATEDIFF(t.deadline, t.start_date)) AS avg_days_to_complete_task FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, AVG(DATEDIFF(end_date, start_date)) AS avg_project_duration FROM projects GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, MAX(DATEDIFF(end_date, start_date)) AS max_project_duration FROM projects GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, MIN(DATEDIFF(end_date, start_date)) AS min_project_duration FROM projects GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) AS total_tasks FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, SUM(CASE WHEN status = 'To Do' THEN 1 ELSE 0 END) AS total_todo_tasks FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, SUM(CASE WHEN status = 'In Progress' THEN 1 ELSE 0 END) AS total_in_progress_tasks FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, SUM(CASE WHEN status = 'Done' THEN 1 ELSE 0 END) AS total_done_tasks FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, AVG(DATEDIFF(deadline, CURDATE())) AS avg_days_to_task_deadline FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, MAX(DATEDIFF(deadline, CURDATE())) AS max_days_to_task_deadline FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE tasks (\n    task_id INT PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    project_id INT,\n    task_description TEXT,\n    deadline DATE,\n    status VARCHAR(50) DEFAULT 'To Do',\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\n### STATEMENT\n\nSELECT project_name, MIN(DATEDIFF(deadline, CURDATE())) AS min_days_to_task_deadline FROM tasks GROUP BY project_name",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, start_date FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, project_description FROM projects WHERE start_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT task_name, task_due_date FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT task_name, task_description FROM tasks WHERE task_due_date > '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT timeline_date, timeline_description FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT timeline_date, project_id FROM timelines WHERE task_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, t.task_name FROM projects p INNER JOIN tasks t ON p.project_id = t.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, t.task_name, tl.timeline_date FROM projects p INNER JOIN tasks t ON p.project_id = t.project_id INNER JOIN timelines tl ON t.task_id = tl.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, COUNT(t.task_name) AS task_count FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT project_id FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(task_name) AS task_count FROM tasks GROUP BY project_id HAVING COUNT(task_name) >= 3;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, AVG(DATE_PART('day', task_due_date - task_added_date)) AS avg_completion_time FROM tasks GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, COUNT(timeline_id) AS timeline_count FROM timelines GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, MAX(timeline_date) AS latest_timeline_date FROM timelines GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, MIN(timeline_date) AS earliest_timeline_date FROM timelines GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, SUM(CASE WHEN task_due_date < CURRENT_DATE THEN 1 ELSE 0 END) AS overdue_tasks_count FROM tasks GROUP BY project_id HAVING overdue_tasks_count > 0;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, AVG(EXTRACT(EPOCH FROM (end_date - start_date)) / 86400) AS avg_project_duration_days FROM projects GROUP BY project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, project_name FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_id, project_name, project_description FROM projects WHERE project_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks WHERE task_due_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) AS tasks_count FROM projects JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, MAX(task_due_date) AS latest_due_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, timeline_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id JOIN timelines ON tasks.task_id = timelines.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects WHERE start_date < '2022-06-01' AND end_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, AVG(TIMESTAMPDIFF(DAY, start_date, end_date)) AS avg_project_duration_in_days FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(timeline_id) AS timeline_count FROM projects JOIN timelines ON projects.project_id = timelines.project_id GROUP BY project_name HAVING timeline_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, MAX(TIMESTAMPDIFF(DAY, task_due_date, timeline_date)) AS max_delay_days FROM projects JOIN tasks ON projects.project_id = tasks.project_id JOIN timelines ON tasks.task_id = timelines.task_id GROUP BY project_name, task_name ORDER BY max_delay_days DESC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, timeline_date, ROW_NUMBER() OVER(PARTITION BY project_name ORDER BY timeline_date) AS timeline_sequence FROM projects JOIN timelines ON projects.project_id = timelines.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, timeline_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id JOIN timelines ON tasks.task_id = timelines.task_id WHERE project_name LIKE 'Pro%' AND task_name LIKE 'Task%' AND timeline_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, timeline_id, LAG(timeline_date) OVER(ORDER BY timeline_date) AS prev_timeline_date FROM projects JOIN timelines ON projects.project_id = timelines.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, task_due_date, LAG(task_due_date) OVER(PARTITION BY project_name ORDER BY task_due_date) AS prev_task_due_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, task_due_date, ROW_NUMBER() OVER(PARTITION BY project_name ORDER BY task_due_date) AS task_sequence FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, timeline_date, DATEDIFF(timeline_date, task_due_date) AS timeline_task_delay_days FROM projects JOIN tasks ON projects.project_id = tasks.project_id JOIN timelines ON tasks.task_id = timelines.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, AVG(DATEDIFF(end_date, start_date)) AS avg_project_duration_days FROM projects WHERE project_name = 'Example Project';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, task_due_date, task_due_date - LAG(task_due_date) OVER(ORDER BY task_due_date) AS task_interval_days FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    project_name VARCHAR(255) NOT NULL,\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(255) NOT NULL,\n    task_description TEXT,\n    task_due_date DATE,\n    project_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n    timeline_id SERIAL PRIMARY KEY,\n    timeline_date DATE,\n    timeline_description TEXT,\n    project_id INT,\n    task_id INT,\n    FOREIGN KEY (project_id) REFERENCES projects(project_id),\n    FOREIGN KEY (task_id) REFERENCES tasks(task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(DISTINCT task_id) AS unique_tasks_count FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, start_date FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT task_name, status FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT start_date, end_date FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, end_date FROM projects WHERE start_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM projects INNER JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, username FROM projects LEFT JOIN users ON projects.project_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM tasks WHERE status = 'in progress';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM tasks WHERE assigned_to = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name FROM tasks WHERE deadline < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE status = 'in progress';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) FROM projects LEFT JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id UNION SELECT project_name, task_name, start_date FROM timelines JOIN tasks ON timelines.task_id = tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id INTERSECT SELECT project_name, task_name, start_date FROM timelines JOIN tasks ON timelines.task_id = tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date FROM projects JOIN tasks ON projects.project_id = tasks.project_id EXCEPT SELECT project_name, task_name, start_date FROM timelines JOIN tasks ON timelines.task_id = tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, start_date, end_date FROM projects WHERE start_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT task_name, status, assigned_to, deadline FROM tasks WHERE status = 'In Progress';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date, end_date FROM projects JOIN timelines ON projects.project_id = timelines.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE projects.project_name = 'Project A';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date, end_date FROM projects JOIN timelines ON projects.project_id = timelines.project_id WHERE project_name = 'Project B';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE assigned_to = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE deadline <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE assigned_to = 'Jane Smith';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) AS total_tasks FROM projects JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT task_name, deadline FROM tasks WHERE deadline > '2022-06-30' ORDER BY deadline ASC;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(user_id) AS total_users FROM projects JOIN tasks ON projects.project_id = tasks.project_id JOIN users ON tasks.assigned_to = users.username GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT task_name, status, assigned_to, deadline FROM tasks WHERE assigned_to = 'James Brown' OR assigned_to = 'Mary White';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, start_date, end_date FROM projects JOIN timelines ON projects.project_id = timelines.project_id WHERE timeline_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE project_name LIKE 'Project%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, status, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE project_name = 'Project C' OR project_name = 'Project D';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n    project_id UUID PRIMARY KEY,\n    project_name VARCHAR(255),\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE tasks (\n    task_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_name VARCHAR(255),\n    status VARCHAR(50),\n    assigned_to VARCHAR(100),\n    deadline DATE\n);\n\nCREATE TABLE timelines (\n    timeline_id UUID PRIMARY KEY,\n    project_id UUID,\n    task_id UUID,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT project_name, task_name, assigned_to, deadline FROM projects JOIN tasks ON projects.project_id = tasks.project_id WHERE deadline BETWEEN '2022-07-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, project_description FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT task_name, task_description FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT timeline_name, timeline_date FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_name, user_email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_id, task_id FROM user_tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, t.task_name, u.user_name FROM projects p, tasks t, users u WHERE p.project_id = t.project_id AND u.user_id IN (SELECT user_id FROM user_tasks WHERE task_id = t.task_id);",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, t.task_name, u.user_name FROM projects p, tasks t, users u, user_tasks ut WHERE p.project_id = t.project_id AND t.task_id = ut.task_id AND u.user_id = ut.user_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.user_name, COUNT(ut.task_id) AS total_tasks FROM users u LEFT JOIN user_tasks ut ON u.user_id = ut.user_id GROUP BY u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_id, p.project_name, COUNT(t.task_id) AS total_tasks FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id GROUP BY p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT t.task_id, t.task_name, COUNT(ut.user_id) AS total_users FROM tasks t LEFT JOIN user_tasks ut ON t.task_id = ut.task_id GROUP BY t.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, t.task_name, tl.timeline_name FROM projects p LEFT JOIN tasks t ON p.project_id = t.project_id LEFT JOIN timelines tl ON p.project_id = tl.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.user_id, u.user_name FROM users u, user_tasks ut WHERE u.user_id = ut.user_id AND ut.task_id IN (SELECT task_id FROM tasks WHERE task_description LIKE '%urgent%');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, COUNT(DISTINCT u.user_id) AS total_users FROM projects p, tasks t, user_tasks ut WHERE p.project_id = t.project_id AND t.task_id = ut.task_id GROUP BY p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT p.project_name, MAX(tl.timeline_date) AS latest_timeline_date FROM projects p, timelines tl WHERE p.project_id = tl.project_id GROUP BY p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT u.user_id) AS total_users FROM users u, user_tasks ut WHERE u.user_id = ut.user_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT * FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, project_description FROM projects WHERE project_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT task_name FROM tasks WHERE task_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, timeline_name FROM projects INNER JOIN timelines ON projects.project_id = timelines.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_name FROM users WHERE user_email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT project_id FROM tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name FROM projects WHERE project_id IN (SELECT project_id FROM timelines WHERE timeline_date > '2022-01-01');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_projects FROM projects;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_name, task_name FROM user_tasks INNER JOIN users ON user_tasks.user_id = users.user_id INNER JOIN tasks ON user_tasks.task_id = tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(task_id) AS total_tasks FROM projects LEFT JOIN tasks ON projects.project_id = tasks.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_name, task_name FROM user_tasks INNER JOIN users ON user_tasks.user_id = users.user_id INNER JOIN tasks ON user_tasks.task_id = tasks.task_id WHERE task_id IN (SELECT task_id FROM tasks WHERE task_description LIKE '%urgent%');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, COUNT(timeline_id) AS total_timelines FROM projects LEFT JOIN timelines ON projects.project_id = timelines.project_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT user_name, project_name, timeline_date FROM users INNER JOIN user_tasks ON users.user_id = user_tasks.user_id INNER JOIN tasks ON user_tasks.task_id = tasks.task_id INNER JOIN timelines ON tasks.project_id = timelines.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name AS project, task_name AS task, timeline_name AS timeline FROM projects p, tasks t, timelines tl WHERE p.project_id = tl.project_id AND t.project_id = p.project_id;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT AVG(timeline_date) AS avg_date FROM timelines;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name, user_name FROM projects CROSS JOIN users;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT task_name FROM tasks WHERE project_id NOT IN (SELECT project_id FROM projects WHERE project_name LIKE 'Project%');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) AS total_users FROM user_tasks;",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT task_id FROM user_tasks WHERE user_id = (SELECT user_id FROM users WHERE user_email = 'example@email.com');",
  "### TABLEDATA\n\nCREATE TABLE projects (\n project_id INT PRIMARY KEY,\n project_name TEXT NOT NULL,\n project_description TEXT\n);\n\nCREATE TABLE tasks (\n task_id INT PRIMARY KEY,\n task_name TEXT NOT NULL,\n task_description TEXT,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE timelines (\n timeline_id INT PRIMARY KEY,\n timeline_name TEXT NOT NULL,\n timeline_date DATE,\n project_id INT REFERENCES projects(project_id)\n);\n\nCREATE TABLE users (\n user_id INT PRIMARY KEY,\n user_name TEXT NOT NULL,\n user_email TEXT UNIQUE\n);\n\nCREATE TABLE user_tasks (\n user_id INT REFERENCES users(user_id),\n task_id INT REFERENCES tasks(task_id),\n PRIMARY KEY (user_id, task_id)\n);\n\n### STATEMENT\n\nSELECT project_name FROM projects WHERE project_id = (SELECT project_id FROM timelines ORDER BY timeline_date DESC LIMIT 1);"
]