[
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id, plan_id FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE plan_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE start_date >= '2022-01-01' AND end_date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, start_date, end_date FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT MAX(end_date) FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM subscriptions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status = 'inactive';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE plan_id IN ('123e4567-e89b-12d3-a456-426614174002','123e4567-e89b-12d3-a456-426614174003');",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, status FROM subscriptions WHERE status = 'pending' OR status = 'cancelled';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions ORDER BY start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(end_date, start_date)) AS avg_duration FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT start_date, COUNT(*) FROM subscriptions GROUP BY start_date ORDER BY start_date;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(start_date) AS earliest_subscription FROM subscriptions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_subscriptions, plan_id FROM subscriptions GROUP BY plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status LIKE 'pend%';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id, plan_id, start_date, end_date FROM subscriptions WHERE status = 'active' LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id, start_date FROM subscriptions WHERE end_date > '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE plan_id = '123e4567-e89b-12d3-a456-426614174000' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id FROM subscriptions WHERE start_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM subscriptions WHERE status = 'cancelled';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, start_date, end_date FROM subscriptions WHERE status IN ('active', 'pending');",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE start_date < '2022-06-01' AND status NOT IN ('expired', 'cancelled');",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id, status FROM subscriptions WHERE end_date > '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT plan_id, start_date, end_date FROM subscriptions WHERE status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, start_date, status FROM subscriptions WHERE end_date < '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id, status FROM subscriptions WHERE plan_id = '123e4567-e89b-12d3-a456-426614174000' AND end_date > '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id FROM subscriptions WHERE end_date < '2022-08-31' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE user_id = '123e4567-e89b-12d3-a456-426614174001' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, plan_id, end_date FROM subscriptions WHERE start_date >= '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id, end_date FROM subscriptions WHERE start_date < '2023-01-01' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT DISTINCT plan_id FROM subscriptions WHERE start_date > '2022-01-01' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id, start_date FROM subscriptions WHERE plan_id = '123e4567-e89b-12d3-a456-426614174002' AND status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status LIKE 'pend%';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  user_id UUID,\n  plan_id UUID,\n  start_date DATE,\n  end_date DATE,\n  status VARCHAR(10)\n);\n\n### STATEMENT\n\nSELECT subscription_id, user_id, end_date FROM subscriptions WHERE start_date < '2022-10-01' AND status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE subscription_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id FROM subscriptions WHERE subscription_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT start_date, end_date FROM subscriptions WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT subscription_id, payment_date FROM payments WHERE payment_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT amount, payment_method FROM payments WHERE subscription_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT subscription_id, payment_date FROM payments WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id FROM subscriptions ORDER BY user_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT payment_method FROM payments WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT subscription_id, plan_id FROM subscriptions WHERE plan_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_method LIKE '%credit%';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS highest_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_subscriptions FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_payment FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(subscription_id) AS total_subscriptions FROM subscriptions GROUP BY user_id HAVING COUNT(subscription_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, s.start_date, s.end_date, p.payment_date, p.amount FROM subscriptions s LEFT JOIN payments p ON s.subscription_id = p.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_subscriptions FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_payment_amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, COUNT(p.payment_id) AS total_payments FROM subscriptions s LEFT JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, MAX(p.amount) AS max_payment FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, MIN(p.amount) AS min_payment FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, SUM(p.amount) AS total_payments_amount FROM subscriptions s LEFT JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id WHERE s.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id WHERE p.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id WHERE s.start_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id ORDER BY s.user_id ASC, p.payment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id WHERE s.start_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, COUNT(p.payment_id) AS total_payments FROM subscriptions s LEFT JOIN payments p ON s.subscription_id = p.subscription_id HAVING COUNT(p.payment_id) > 5 GROUP BY s.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.subscription_id HAVING MAX(p.amount) > 200;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.user_id, AVG(p.amount) AS avg_payment_amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id GROUP BY s.user_id HAVING AVG(p.amount) > 150;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    subscription_id INT,\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_method VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.user_id, p.payment_date, p.amount FROM subscriptions s JOIN payments p ON s.subscription_id = p.subscription_id WHERE s.start_date >= '2022-01-01' AND p.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, customer_id, start_date, end_date FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, start_date, status FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE start_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, billing_address FROM billing_information;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, customer_id, payment_date, amount FROM payment_records;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM billing_information WHERE customer_id = '1234';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE end_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_records WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, customer_id, status FROM subscriptions WHERE status = 'cancelled';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, billing_address, payment_method FROM billing_information WHERE payment_method = 'credit card';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payment_records WHERE customer_id = '5678';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE start_date > '2022-06-01' AND end_date < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, customer_id, start_date, status FROM subscriptions ORDER BY start_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM payment_records WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, billing_address, payment_method FROM billing_information WHERE billing_address LIKE '%Avenue%';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE customer_id = '9999';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM billing_information WHERE billing_address = '123 Main Street';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date, amount FROM payment_records ORDER BY payment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE customer_id = '1111';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, customer_id, start_date FROM subscriptions WHERE start_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, b.billing_address FROM subscriptions s JOIN billing_information b ON s.customer_id = b.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, p.payment_date FROM subscriptions s JOIN payment_records p ON s.customer_id = p.customer_id WHERE p.amount >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, b.billing_address, p.amount FROM subscriptions s JOIN billing_information b ON s.customer_id = b.customer_id JOIN payment_records p ON s.customer_id = p.customer_id WHERE p.amount >= 100 AND b.payment_method = 'credit card';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_subscriptions FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS subscription_count FROM subscriptions GROUP BY customer_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(amount) AS max_payment FROM payment_records GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(amount) AS avg_payment FROM payment_records GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(start_date) AS first_subscription FROM subscriptions GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(payment_date) AS first_payment FROM payment_records GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(payment_date) AS last_payment FROM payment_records GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, customer_id, billing_address, payment_method FROM billing_information ORDER BY customer_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, customer_id, billing_address, payment_method FROM billing_information ORDER BY billing_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.customer_id, COUNT(p.payment_id) AS total_payments FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, s.start_date, SUM(p.amount) AS total_payments FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, s.start_date, MAX(p.amount) AS max_payment FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, s.start_date, AVG(p.amount) AS avg_payment FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, s.start_date, MIN(p.amount) AS min_payment FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n  subscription_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  start_date DATE NOT NULL,\n  end_date DATE NOT NULL,\n  status VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE billing_information (\n  billing_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  billing_address TEXT NOT NULL,\n  payment_method VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE payment_records (\n  payment_id UUID PRIMARY KEY,\n  customer_id UUID NOT NULL,\n  payment_date DATE NOT NULL,\n  amount DECIMAL(10, 2) NOT NULL\n);\n\n### STATEMENT\n\nSELECT s.subscription_id, s.customer_id, s.start_date, COUNT(p.payment_id) AS total_payments FROM subscriptions s LEFT JOIN payment_records p ON s.customer_id = p.customer_id GROUP BY s.subscription_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscription_id, start_date, end_date FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, plan_id FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email, name FROM users;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM billing_information;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, user_id, card_number FROM billing_information;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payment_records;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_date FROM payment_records;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT billing_id, amount, payment_date FROM payment_records WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscriptions.subscription_id, users.name, users.email, billing_information.card_number FROM subscriptions JOIN users ON subscriptions.user_id = users.user_id JOIN billing_information ON users.user_id = billing_information.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscriptions.subscription_id, users.name, subscriptions.start_date, billing_information.card_number, payment_records.amount FROM subscriptions JOIN users ON subscriptions.user_id = users.user_id JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, COUNT(subscriptions.subscription_id) AS subscription_count FROM users LEFT JOIN subscriptions ON users.user_id = subscriptions.user_id GROUP BY users.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, MAX(payment_records.amount) AS max_payment FROM users LEFT JOIN billing_information ON users.user_id = billing_information.user_id LEFT JOIN payment_records ON billing_information.billing_id = payment_records.billing_id GROUP BY users.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscriptions.subscription_id, users.name, payment_records.amount, payment_records.payment_date FROM subscriptions JOIN users ON subscriptions.user_id = users.user_id JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id WHERE payment_records.amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT plan_id) AS unique_plans FROM subscriptions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, billing_information.card_number, payment_records.amount FROM users JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id WHERE payment_records.amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscriptions.subscription_id, users.name, billing_information.card_number, payment_records.amount FROM subscriptions JOIN users ON subscriptions.user_id = users.user_id JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id WHERE subscriptions.start_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(payment_records.amount) AS total_payments FROM billing_information JOIN payment_records ON billing_information.billing_id = payment_records.billing_id GROUP BY user_id HAVING total_payments > 500;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, AVG(payment_records.amount) AS avg_payment FROM users JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id GROUP BY users.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, subscriptions.start_date FROM users JOIN subscriptions ON users.user_id = subscriptions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, billing_information.card_number FROM users JOIN billing_information ON users.user_id = billing_information.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.name, payment_records.amount FROM users JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT subscriptions.start_date, billing_information.card_number FROM users JOIN billing_information ON users.user_id = billing_information.user_id JOIN subscriptions ON users.user_id = subscriptions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.email, payment_records.payment_date FROM users JOIN billing_information ON users.user_id = billing_information.user_id JOIN payment_records ON billing_information.billing_id = payment_records.billing_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    subscription_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    plan_id UUID NOT NULL,\n    start_date TIMESTAMP NOT NULL,\n    end_date TIMESTAMP NOT NULL,\n    status VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    address VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE billing_information (\n    billing_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    expiration_date DATE NOT NULL,\n    cvv VARCHAR(4) NOT NULL\n);\n\nCREATE TABLE payment_records (\n    payment_id UUID PRIMARY KEY,\n    billing_id UUID NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    payment_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.email, subscriptions.status FROM users JOIN subscriptions...",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM plans;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM billing_info;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT id, user_id, start_date, end_date FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT user_id, name, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT plan_id, plan_name, price FROM plans;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT billing_id, user_id, card_number FROM billing_info;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, billing_id, amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT id, start_date FROM subscriptions;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT plan_id, price FROM plans;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT billing_id, card_number FROM billing_info;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM payments;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM plans WHERE plan_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM billing_info WHERE billing_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM payments WHERE payment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT name, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions INNER JOIN users ON subscriptions.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM subscriptions INNER JOIN plans ON subscriptions.plan_id = plans.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.plan_name FROM users u INNER JOIN plans p ON u.subscription_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT s.id, u.name, p.plan_name FROM subscriptions s INNER JOIN users u ON s.user_id = u.user_id INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, b.card_number FROM users u INNER JOIN billing_info b ON u.user_id = b.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT p.payment_id, b.billing_address FROM payments p INNER JOIN billing_info b ON p.billing_id = b.billing_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.name, b.card_number FROM users u INNER JOIN billing_info b ON u.user_id = b.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, b.card_number FROM users u LEFT JOIN billing_info b ON u.user_id = b.user_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT s.start_date, p.price FROM subscriptions s INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, s.start_date, p.price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, s.start_date, p.plan_name, p.price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.plan_name, p.price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id WHERE p.price > 50;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.plan_name, p.price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id ORDER BY p.price DESC;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, SUM(p.price) AS total_price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, COUNT(s.id) AS subscription_count FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, MAX(s.start_date) AS latest_subscription_date FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, AVG(p.price) AS average_plan_price FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.plan_name, p.features FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id;",
  "### TABLEDATA\n\nCREATE TABLE subscriptions (\n    id INT PRIMARY KEY,\n    user_id INT,\n    plan_id INT,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR,\n    phone_number VARCHAR,\n    subscription_id INT\n);\n\n\nCREATE TABLE plans (\n    plan_id INT PRIMARY KEY,\n    plan_name VARCHAR,\n    price DECIMAL,\n    features TEXT\n);\n\n\nCREATE TABLE billing_info (\n    billing_id INT PRIMARY KEY,\n    user_id INT,\n    card_number VARCHAR,\n    expiration_date DATE,\n    billing_address VARCHAR\n);\n\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    billing_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status VARCHAR\n);\n\n### STATEMENT\n\nSELECT u.name, p.plan_name, p.features FROM users u INNER JOIN subscriptions s ON u.subscription_id = s.id INNER JOIN plans p ON s.plan_id = p.plan_id WHERE p.features LIKE '%cloud%';"
]