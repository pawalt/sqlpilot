[
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_priority = 'Urgent';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assigned_support_agent, created_at FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, request_status FROM helpdesk_support WHERE request_status = 'In Progress';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE assigned_support_agent LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(request_id) AS total_requests FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assigned_support_agent, COUNT(request_id) AS total_requests FROM helpdesk_support GROUP BY assigned_support_agent;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(created_at) AS earliest_request FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(created_at) AS latest_request FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('day', AGE(NOW(), created_at))) AS average_age_of_requests FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support ORDER BY created_at ASC;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support ORDER BY request_priority DESC, created_at ASC;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_requests FROM helpdesk_support WHERE request_status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('hour', AGE(NOW(), created_at))) AS average_response_time FROM helpdesk_support WHERE request_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, request_priority FROM helpdesk_support WHERE request_priority = 'High';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assigned_support_agent, COUNT(request_id) AS total_requests FROM helpdesk_support WHERE request_status = 'Open' GROUP BY assigned_support_agent;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_status='Open' AND request_priority='High';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, assigned_support_agent FROM helpdesk_support WHERE request_priority='Medium';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT request_status FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description FROM helpdesk_support WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(request_id) as total_requests FROM helpdesk_support WHERE request_status='Open';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(request_id) as avg_request_id FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE assigned_support_agent LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_status='Closed' ORDER BY created_at DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assigned_support_agent, COUNT(*) as total_requests_assigned FROM helpdesk_support GROUP BY assigned_support_agent;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_priority, COUNT(*) as priority_count FROM helpdesk_support GROUP BY request_priority HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(created_at) as latest_request_date FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(created_at) as oldest_request_date FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_status, COUNT(*) as status_count FROM helpdesk_support GROUP BY request_status ORDER BY status_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT assigned_support_agent) as total_agents FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, created_at FROM helpdesk_support WHERE DATE(created_at) = '2022-08-15';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_status IN ('Open', 'Pending') AND request_priority='High';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE request_status='Open' UNION SELECT * FROM helpdesk_support WHERE request_status='Pending';",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM helpdesk_support WHERE assigned_support_agent IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(DAY FROM AGE(created_at))) as avg_request_age_in_days FROM helpdesk_support;",
  "### TABLEDATA\n\nCREATE TABLE helpdesk_support (\n    request_id SERIAL PRIMARY KEY,\n    request_description TEXT,\n    request_status VARCHAR(50),\n    request_priority VARCHAR(50),\n    assigned_support_agent VARCHAR(100),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_priority, EXTRACT(MONTH FROM created_at) as request_month FROM helpdesk_support ORDER BY request_month;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, request_date FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, request_id FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, assignee_id, ticket_date FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, request_description, request_date FROM service_requests WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, request_description, request_date FROM service_requests WHERE request_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, request_id, ticket_status, assignee_id, ticket_date FROM tickets WHERE assignee_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, request_id, ticket_status, assignee_id, ticket_date FROM tickets WHERE request_id = 15;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE request_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_date < '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, request_description, request_date FROM service_requests ORDER BY request_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, request_description, request_date FROM service_requests ORDER BY customer_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(request_id) FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(request_id) FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, COUNT(ticket_id) as num_tickets FROM service_requests LEFT JOIN tickets ON service_requests.request_id = tickets.request_id GROUP BY request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT assignee_id FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, COUNT(ticket_id) as num_tickets FROM service_requests LEFT JOIN tickets ON service_requests.request_id = tickets.request_id GROUP BY request_id HAVING num_tickets >= 3;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE request_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id, request_description FROM service_requests WHERE customer_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_status, assignee_id FROM tickets WHERE ticket_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, sr.request_description, t.ticket_date FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.customer_id, t.assignee_id, t.ticket_status FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id WHERE sr.customer_id = t.assignee_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_date, t.ticket_date FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id WHERE sr.request_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.customer_id, COUNT(t.ticket_id) AS total_tickets FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id GROUP BY sr.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, sr.request_description, t.ticket_status, t.assignee_id FROM service_requests sr LEFT JOIN tickets t ON sr.request_id = t.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests sr INNER JOIN tickets t ON sr.request_id = t.request_id WHERE sr.customer_id = 100 AND t.assignee_id = 50;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(t.ticket_date) AS last_ticket_date FROM tickets t;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('day', NOW()::timestamp - sr.request_date)) AS average_request_completion_time FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id WHERE t.ticket_status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT sr.customer_id FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id WHERE t.ticket_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, EXTRACT(MONTH FROM sr.request_date) AS request_month, COUNT(t.ticket_id) AS total_tickets FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id GROUP BY sr.request_id, request_month;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, sr.request_description, t.ticket_status, t.assignee_id FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id ORDER BY sr.request_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.customer_id, AVG(DATE_PART('day', t.ticket_date - sr.request_date)) AS avg_completion_time FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id GROUP BY sr.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, sr.request_description, COUNT(t.ticket_id) AS total_tickets FROM service_requests sr LEFT JOIN tickets t ON sr.request_id = t.request_id GROUP BY sr.request_id, sr.request_description HAVING COUNT(t.ticket_id) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.customer_id, CASE WHEN COUNT(t.ticket_id) > 0 THEN 'Active' ELSE 'Inactive' END AS customer_status FROM service_requests sr LEFT JOIN tickets t ON sr.request_id = t.request_id GROUP BY sr.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT sr.customer_id, t.assignee_id FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id WHERE sr.customer_id <> t.assignee_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id SERIAL PRIMARY KEY,\n  customer_id INT,\n  request_description TEXT,\n  request_date TIMESTAMP\n);\n\n\nCREATE TABLE tickets (\n  ticket_id SERIAL PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  assignee_id INT,\n  ticket_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.request_id, sr.request_description, t.ticket_status, t.assignee_id FROM service_requests sr JOIN tickets t ON sr.request_id = t.request_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, customer_id FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, issue_description FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT ticket_id, assigned_to_user_id FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT resolution_id, ticket_id FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT resolution_id, resolution_timestamp FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_id, resolution_id FROM service_requests JOIN tickets ON service_requests.request_id = tickets.request_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_id, resolution_id, resolution_notes FROM service_requests JOIN tickets ON service_requests.request_id = tickets.request_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_status = 'open';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions WHERE resolution_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, issue_description FROM service_requests WHERE request_timestamp >= '2022-01-01' AND request_timestamp <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status FROM tickets WHERE assigned_to_user_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status FROM tickets WHERE request_id IN (SELECT request_id FROM service_requests WHERE customer_id = 789);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, issue_description FROM service_requests WHERE EXTRACT(YEAR FROM request_timestamp) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT service_requests.request_id, service_requests.issue_description, tickets.ticket_status FROM service_requests INNER JOIN tickets ON service_requests.request_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT s.request_id, s.issue_description, t.ticket_status, r.resolution_notes FROM service_requests s LEFT JOIN tickets t ON s.request_id = t.request_id LEFT JOIN resolutions r ON t.ticket_id = r.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE request_timestamp >= '2022-01-01' AND request_timestamp <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT s.customer_id, COUNT(*) AS total_requests FROM service_requests s JOIN tickets t ON s.request_id = t.request_id GROUP BY s.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(request_timestamp) AS latest_request_time FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT r.ticket_id, r.resolution_timestamp, r.resolution_notes FROM resolutions r WHERE r.resolution_timestamp >= '2022-01-01' AND r.resolution_timestamp <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT s.request_id, s.issue_description, t.ticket_status, r.resolution_notes FROM service_requests s JOIN tickets t ON s.request_id = t.request_id LEFT JOIN resolutions r ON t.ticket_id = r.ticket_id WHERE t.assigned_to_user_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(CAST(EXTRACT(EPOCH FROM request_timestamp) AS INT)) AS avg_request_time FROM service_requests GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT request_id, issue_description FROM service_requests WHERE issue_description LIKE '%Critical%' AND customer_id IN (SELECT customer_id FROM service_requests WHERE EXTRACT(YEAR FROM request_timestamp) = 2022);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT r.ticket_id, r.resolution_timestamp, r.resolution_notes FROM resolutions r WHERE r.resolution_notes ILIKE '%resolved%' ORDER BY r.resolution_timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT s.customer_id, COUNT(DISTINCT s.request_id) AS total_requests, COUNT(DISTINCT t.ticket_id) AS total_tickets FROM service_requests s LEFT JOIN tickets t ON s.request_id = t.request_id GROUP BY s.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT t.ticket_status, COUNT(*) AS total_tickets FROM tickets t GROUP BY t.ticket_status HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(EPOCH FROM (SELECT MAX(request_timestamp) FROM service_requests))) AS avg_request_time;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT r.ticket_id, r.resolution_timestamp, r.resolution_notes FROM resolutions r WHERE r.resolution_timestamp >= (SELECT MIN(request_timestamp) FROM service_requests);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(CAST(EXTRACT(EPOCH FROM request_timestamp) AS INT)) AS avg_request_time FROM service_requests WHERE customer_id IN (SELECT DISTINCT customer_id FROM tickets);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_requests FROM service_requests WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM tickets);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_requests FROM service_requests GROUP BY customer_id HAVING COUNT(*) >= 3;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n  request_id INT PRIMARY KEY,\n  customer_id INT,\n  request_timestamp TIMESTAMP,\n  issue_description TEXT\n);\n\n\nCREATE TABLE tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(50),\n  assigned_to_user_id INT\n);\n\n\nCREATE TABLE resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_timestamp TIMESTAMP,\n  resolution_notes TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests WHERE customer_id = ANY (SELECT customer_id FROM tickets WHERE ticket_status = 'Resolved');",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, creation_date FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status, ticket_description FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT resolution_id, resolution_description, resolution_date FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests JOIN tickets ON service_requests.request_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests LEFT JOIN tickets ON service_requests.request_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests RIGHT JOIN tickets ON service_requests.request_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests INNER JOIN tickets ON service_requests.request_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets LEFT JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets RIGHT JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets INNER JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN tickets ON users.user_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users LEFT JOIN tickets ON users.user_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users RIGHT JOIN tickets ON users.user_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM users INNER JOIN tickets ON users.user_id = tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE ticket_status = 'OPEN';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, request_description FROM service_requests WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM tickets WHERE ticket_status = 'IN PROGRESS';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_description FROM tickets JOIN service_requests ON tickets.request_id = service_requests.request_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, resolution_description FROM resolutions JOIN tickets ON resolutions.ticket_id = tickets.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT users.username, tickets.ticket_status FROM tickets JOIN service_requests ON tickets.request_id = service_requests.request_id JOIN users ON service_requests.customer_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_id FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_description FROM tickets WHERE ticket_description LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id IN (SELECT DISTINCT customer_id FROM service_requests);",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_description FROM tickets WHERE ticket_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, resolution_description FROM resolutions WHERE resolution_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'joh%';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_status, creation_date FROM tickets JOIN service_requests ON tickets.request_id = service_requests.request_id WHERE creation_date BETWEEN '2022-01-01' AND '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT request_id, ticket_status, creation_date FROM tickets WHERE creation_date <= NOW() - INTERVAL '1 month';",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(request_id) AS total_requests FROM service_requests GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT AVG(request_id) AS avg_request_id FROM service_requests;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT ticket_status, COUNT(*) AS total_tickets FROM tickets GROUP BY ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, COUNT(request_id) AS total_requests FROM service_requests JOIN users ON service_requests.customer_id = users.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users ORDER BY username ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE service_requests (\n    request_id SERIAL PRIMARY KEY,\n    customer_id INT,\n    request_description TEXT,\n    creation_date TIMESTAMP\n);\n\nCREATE TABLE tickets (\n    ticket_id SERIAL PRIMARY KEY,\n    request_id INT,\n    ticket_status VARCHAR(50),\n    ticket_description TEXT\n);\n\nCREATE TABLE resolutions (\n    resolution_id SERIAL PRIMARY KEY,\n    ticket_id INT,\n    resolution_description TEXT,\n    resolution_date TIMESTAMP\n);\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nSELECT ticket_status, AVG(LENGTH(ticket_description)) AS avg_description_length FROM tickets GROUP BY ticket_status;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Requests;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_description, requester_name FROM Requests;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT requester_name FROM Requests;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_description FROM Requests WHERE request_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, requester_name FROM Requests ORDER BY requester_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Tickets WHERE ticket_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status FROM Tickets WHERE ticket_priority > 3;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT resolution_text FROM Resolutions WHERE resolution_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username FROM Users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name FROM Departments WHERE department_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name FROM Departments WHERE department_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id FROM Users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_text FROM Tickets JOIN Resolutions ON Tickets.ticket_id = Resolutions.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT requester_name, ticket_status FROM Requests JOIN Tickets ON Requests.request_id = Tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT r.request_id, t.ticket_id, re.resolution_id FROM Requests r JOIN Tickets t ON r.request_id = t.request_id JOIN Resolutions re ON t.ticket_id = re.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, d.department_name FROM Users u JOIN Departments d ON u.user_id = d.department_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, r.resolution_text, d.department_name FROM Tickets t JOIN Resolutions r ON t.ticket_id = r.ticket_id JOIN Departments d ON t.ticket_id = d.department_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, t.ticket_status, r.resolution_text FROM Users u JOIN Tickets t ON u.user_id = t.request_id JOIN Resolutions r ON t.ticket_id = r.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, t.ticket_status, r.resolution_text FROM Users u, Tickets t, Resolutions r WHERE u.user_id = t.request_id AND t.ticket_id = r.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, requester_name, request_date FROM Requests;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Tickets WHERE ticket_status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT resolution_text, resolution_date FROM Resolutions WHERE resolution_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username, email FROM Users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, requester_name, request_date FROM Requests WHERE request_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, request_description, requester_name, request_date FROM Requests ORDER BY request_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT ticket_id, ticket_status, ticket_priority FROM Tickets WHERE ticket_status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT resolution_text, resolution_date FROM Resolutions WHERE resolution_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username, email FROM Users WHERE username LIKE 'admin%';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT resolution_id, resolution_text, resolution_date FROM Resolutions WHERE resolution_text LIKE '%resolved%';",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM Users JOIN Departments ON user_id = department_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Requests JOIN Tickets ON Requests.request_id = Tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Users LEFT JOIN Tickets ON Users.user_id = Tickets.request_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, d.department_name FROM Users u JOIN Departments d ON u.user_id = d.department_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT t.ticket_id, r.resolution_text FROM Tickets t JOIN Resolutions r ON t.ticket_id = r.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM Requests CROSS JOIN Tickets;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, COUNT(ticket_id) AS num_tickets FROM Requests LEFT JOIN Tickets ON Requests.request_id = Tickets.request_id GROUP BY request_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(t.ticket_id) AS num_tickets FROM Users u LEFT JOIN Tickets t ON u.user_id = t.request_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT request_id, AVG(ticket_priority) AS avg_priority FROM Tickets GROUP BY request_id;",
  "### TABLEDATA\n\nCREATE TABLE Requests (\n  request_id INT PRIMARY KEY,\n  request_description TEXT,\n  requester_name VARCHAR(50),\n  request_date DATE\n);\n\nCREATE TABLE Tickets (\n  ticket_id INT PRIMARY KEY,\n  request_id INT,\n  ticket_status VARCHAR(20),\n  ticket_priority INT,\n  FOREIGN KEY (request_id) REFERENCES Requests(request_id)\n);\n\nCREATE TABLE Resolutions (\n  resolution_id INT PRIMARY KEY,\n  ticket_id INT,\n  resolution_text TEXT,\n  resolution_date DATE,\n  FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)\n);\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Departments (\n  department_id INT PRIMARY KEY,\n  department_name VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT department_name, COUNT(u.user_id) AS num_users FROM Departments JOIN Users u ON Departments.department_id = u.user_id GROUP BY department_name;"
]