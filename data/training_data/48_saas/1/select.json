[
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers WHERE email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, email FROM customers WHERE last_name = 'Smith';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY last_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers ORDER BY customer_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name LIKE 'A%' AND last_name LIKE '%son';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, phone_number FROM customers WHERE email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT DISTINCT last_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT AVG(customer_id) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT MIN(customer_id) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT MAX(customer_id) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT SUM(customer_id) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, CONCAT(first_name, ' ', last_name) AS full_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = 'John' AND last_name = 'Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers WHERE last_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers WHERE phone_number LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT DISTINCT first_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers WHERE customer_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY first_name ASC, last_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE LENGTH(first_name) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT AVG(customer_id) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name LIKE 'A%' OR last_name LIKE 'B%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT MAX(customer_id) FROM customers WHERE email IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = last_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE phone_number IN ('1234567890', '9876543210');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, LENGTH(email) FROM customers WHERE LENGTH(email) > 10;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, CONCAT(first_name, ' ', last_name) AS full_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = 'Alice' AND last_name = 'Smith' AND email = 'alice@example.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name = 'Bob' AND (last_name = 'Smith' OR last_name = 'Johnson');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(email) AS email_count FROM customers GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE first_name <> 'John' AND last_name <> 'Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, address FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, total_amount FROM orders WHERE payment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, address, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.payment_status = 'Paid';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.order_date, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY o.order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.payment_status IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.customer_name LIKE '%Smith%' ORDER BY orders.order_date DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.payment_status = 'Pending'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number, address, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(orders.order_id) AS num_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id HAVING num_orders > 3",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY max_amount DESC",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY avg_amount DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY min_amount ASC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY total_spent DESC",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_date) AS last_order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY last_order_date DESC",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20),\n    address TEXT\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10,2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(order_date) AS first_order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY first_order_date ASC",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, amount FROM transactions WHERE payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount BETWEEN 500 and 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions WHERE amount < 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone FROM customers WHERE phone LIKE '%123456%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone FROM customers WHERE customer_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE payment_method = 'PayPal' AND amount >= 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_id NOT IN (2, 4);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders LIMIT 5 OFFSET 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, phone FROM customers WHERE customer_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, order_date FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM orders JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, payment_method, amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN transactions ON orders.order_id = transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN transactions ON orders.order_id = transactions.order_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(total_amount) AS min_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN transactions ON orders.order_id = transactions.order_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS total_transactions FROM customers JOIN orders ON customers.customer_id = orders.customer_id LEFT JOIN transactions ON orders.order_id = transactions.order_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(order_date) AS first_order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(order_date) AS latest_order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > (SELECT AVG(total_amount) FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone VARCHAR(20)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date TIMESTAMP,\n  payment_method VARCHAR(50),\n  amount DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount = (SELECT MAX(total_amount) FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date, amount_paid FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN transactions ON orders.order_id = transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date, payment_method, amount_paid FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN transactions ON orders.order_id = transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, order_date FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, amount_paid FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN transactions ON orders.order_id = transactions.order_id INNER JOIN products ON orders.order_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, amount_paid FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN transactions ON orders.order_id = transactions.order_id INNER JOIN products ON orders.order_id = products.product_id WHERE amount_paid > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date, payment_method, amount_paid FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN transactions ON orders.order_id = transactions.order_id WHERE amount_paid < 200;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id WHERE total_amount < 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, price, order_date FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN products ON orders.order_id = products.product_id WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT c.customer_name, o.total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.price FROM products p WHERE p.price > 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM orders JOIN products ON orders.total_amount > products.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products GROUP BY product_name HAVING AVG(price) > 50;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount_paid FROM transactions WHERE payment_method = 'Credit Card';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.total_amount > products.price;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(total_amount) AS max_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'Alice');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date = (SELECT MAX(transaction_date) FROM transactions);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, COUNT(order_id) AS total_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name, customer_email;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  customer_email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL\n);\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  transaction_date DATE,\n  payment_method VARCHAR(255),\n  amount_paid DECIMAL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_amount) AS total_spent, AVG(total_amount) AS avg_order_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderDetails;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, order_id, transaction_date, amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name, email, phone_number FROM Customers WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, description FROM Products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderDetails WHERE order_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, order_id, transaction_date, amount FROM Transactions WHERE transaction_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE first_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderDetails WHERE quantity >= 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT transaction_id, order_id, transaction_date, amount FROM Transactions WHERE amount <= 200;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date, total_amount FROM Orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM Customers WHERE last_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.order_date, Customers.first_name, Customers.last_name FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Orders.total_amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE price BETWEEN 10 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM OrderDetails WHERE quantity >= 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.total_amount, Products.product_name, OrderDetails.quantity FROM Orders JOIN OrderDetails ON Orders.order_id = OrderDetails.order_id JOIN Products ON OrderDetails.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Customers.first_name, Customers.last_name, Orders.order_date, Transactions.amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Transactions ON Orders.order_id = Transactions.order_id WHERE Customers.customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.order_date, Products.product_name, OrderDetails.quantity FROM Orders JOIN OrderDetails ON Orders.order_id = OrderDetails.order_id JOIN Products ON OrderDetails.product_id = Products.product_id WHERE Orders.total_amount > 50;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Transactions.transaction_date, Orders.total_amount, Products.product_name, Customers.first_name FROM Transactions JOIN Orders ON Transactions.order_id = Orders.order_id JOIN OrderDetails ON Orders.order_id = OrderDetails.order_id JOIN Products ON OrderDetails.product_id = Products.product_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Transactions.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_id, Customers.first_name, Orders.order_date, OrderDetails.quantity, Products.product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN OrderDetails ON Orders.order_id = OrderDetails.order_id JOIN Products ON OrderDetails.product_id = Products.product_id WHERE Products.price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT MAX(Orders.total_amount) AS max_total_amount, MIN(Orders.total_amount) AS min_total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT AVG(Orders.total_amount) AS avg_total_amount, SUM(Orders.total_amount) AS total_amount_sum FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Orders.order_date, COUNT(*) AS order_count FROM Orders GROUP BY Orders.order_date;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Customers.first_name, COUNT(*) AS order_count FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.first_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, AVG(price) AS avg_price FROM Products GROUP BY product_id, product_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.total_amount, Products.product_name, SUM(OrderDetails.quantity) AS total_quantity FROM Orders JOIN OrderDetails ON Orders.order_id = OrderDetails.order_id JOIN Products ON OrderDetails.product_id = Products.product_id GROUP BY Orders.order_id, Orders.total_amount, Products.product_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    price DECIMAL(8, 2),\n    description TEXT\n);\n\nCREATE TABLE OrderDetails (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY,\n    order_id INT,\n    transaction_date TIMESTAMP,\n    amount DECIMAL(10, 2),\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT Customers.first_name, MIN(Orders.total_amount) AS min_order_amount, MAX(Orders.total_amount) AS max_order_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.first_name;"
]