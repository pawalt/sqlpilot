[
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (1, 'data1', 'method1', 'cleaned1') ON DUPLICATE KEY UPDATE data_entry = 'data1', cleaning_method = 'method1', cleaned_data = 'cleaned1';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (2, 'data2', 'method2', 'cleaned2') ON DUPLICATE KEY UPDATE data_entry = 'data2', cleaning_method = 'method2', cleaned_data = 'cleaned2';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (3, 'data3', 'method3', 'cleaned3') ON DUPLICATE KEY UPDATE data_entry = 'data3', cleaning_method = 'method3', cleaned_data = 'cleaned3';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (4, 'data4', 'method4', 'cleaned4') ON DUPLICATE KEY UPDATE data_entry = 'data4', cleaning_method = 'method4', cleaned_data = 'cleaned4';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (5, 'data5', 'method5', 'cleaned5') ON DUPLICATE KEY UPDATE data_entry = 'data5', cleaning_method = 'method5', cleaned_data = 'cleaned5';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (6, 'data6', 'method6', 'cleaned6') ON DUPLICATE KEY UPDATE data_entry = 'data6', cleaning_method = 'method6', cleaned_data = 'cleaned6';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (7, 'data7', 'method7', 'cleaned7') ON DUPLICATE KEY UPDATE data_entry = 'data7', cleaning_method = 'method7', cleaned_data = 'cleaned7';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (8, 'data8', 'method8', 'cleaned8') ON DUPLICATE KEY UPDATE data_entry = 'data8', cleaning_method = 'method8', cleaned_data = 'cleaned8';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (9, 'data9', 'method9', 'cleaned9') ON DUPLICATE KEY UPDATE data_entry = 'data9', cleaning_method = 'method9', cleaned_data = 'cleaned9';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (10, 'data10', 'method10', 'cleaned10') ON DUPLICATE KEY UPDATE data_entry = 'data10', cleaning_method = 'method10', cleaned_data = 'cleaned10';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (11, 'data11', 'method11', 'cleaned11') ON DUPLICATE KEY UPDATE data_entry = 'data11', cleaning_method = 'method11', cleaned_data = 'cleaned11';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (12, 'data12', 'method12', 'cleaned12') ON DUPLICATE KEY UPDATE data_entry = 'data12', cleaning_method = 'method12', cleaned_data = 'cleaned12';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (13, 'data13', 'method13', 'cleaned13') ON DUPLICATE KEY UPDATE data_entry = 'data13', cleaning_method = 'method13', cleaned_data = 'cleaned13';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (14, 'data14', 'method14', 'cleaned14') ON DUPLICATE KEY UPDATE data_entry = 'data14', cleaning_method = 'method14', cleaned_data = 'cleaned14';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (15, 'data15', 'method15', 'cleaned15') ON DUPLICATE KEY UPDATE data_entry = 'data15', cleaning_method = 'method15', cleaned_data = 'cleaned15';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (16, 'data16', 'method16', 'cleaned16') ON DUPLICATE KEY UPDATE data_entry = 'data16', cleaning_method = 'method16', cleaned_data = 'cleaned16';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (17, 'data17', 'method17', 'cleaned17') ON DUPLICATE KEY UPDATE data_entry = 'data17', cleaning_method = 'method17', cleaned_data = 'cleaned17';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (18, 'data18', 'method18', 'cleaned18') ON DUPLICATE KEY UPDATE data_entry = 'data18', cleaning_method = 'method18', cleaned_data = 'cleaned18';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (19, 'data19', 'method19', 'cleaned19') ON DUPLICATE KEY UPDATE data_entry = 'data19', cleaning_method = 'method19', cleaned_data = 'cleaned19';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nINSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (20, 'data20', 'method20', 'cleaned20') ON DUPLICATE KEY UPDATE data_entry = 'data20', cleaning_method = 'method20', cleaned_data = 'cleaned20';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (1, 'example data 1', 'method 1', 'cleaned data 1') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 1', cleaning_method = 'updated method 1', cleaned_data = 'updated cleaned data 1';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (2, 'example data 2', 'method 2', 'cleaned data 2') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 2', cleaning_method = 'updated method 2', cleaned_data = 'updated cleaned data 2';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (3, 'example data 3', 'method 3', 'cleaned data 3') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 3', cleaning_method = 'updated method 3', cleaned_data = 'updated cleaned data 3';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (4, 'example data 4', 'method 4', 'cleaned data 4') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 4', cleaning_method = 'updated method 4', cleaned_data = 'updated cleaned data 4';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (5, 'example data 5', 'method 5', 'cleaned data 5') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 5', cleaning_method = 'updated method 5', cleaned_data = 'updated cleaned data 5';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (6, 'example data 6', 'method 6', 'cleaned data 6') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 6', cleaning_method = 'updated method 6', cleaned_data = 'updated cleaned data 6';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (7, 'example data 7', 'method 7', 'cleaned data 7') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 7', cleaning_method = 'updated method 7', cleaned_data = 'updated cleaned data 7';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (8, 'example data 8', 'method 8', 'cleaned data 8') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 8', cleaning_method = 'updated method 8', cleaned_data = 'updated cleaned data 8';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (9, 'example data 9', 'method 9', 'cleaned data 9') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 9', cleaning_method = 'updated method 9', cleaned_data = 'updated cleaned data 9';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (10, 'example data 10', 'method 10', 'cleaned data 10') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 10', cleaning_method = 'updated method 10', cleaned_data = 'updated cleaned data 10';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (11, 'example data 11', 'method 11', 'cleaned data 11') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 11', cleaning_method = 'updated method 11', cleaned_data = 'updated cleaned data 11';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (12, 'example data 12', 'method 12', 'cleaned data 12') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 12', cleaning_method = 'updated method 12', cleaned_data = 'updated cleaned data 12';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (13, 'example data 13', 'method 13', 'cleaned data 13') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 13', cleaning_method = 'updated method 13', cleaned_data = 'updated cleaned data 13';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (14, 'example data 14', 'method 14', 'cleaned data 14') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 14', cleaning_method = 'updated method 14', cleaned_data = 'updated cleaned data 14';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (15, 'example data 15', 'method 15', 'cleaned data 15') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 15', cleaning_method = 'updated method 15', cleaned_data = 'updated cleaned data 15';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (16, 'example data 16', 'method 16', 'cleaned data 16') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 16', cleaning_method = 'updated method 16', cleaned_data = 'updated cleaned data 16';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (17, 'example data 17', 'method 17', 'cleaned data 17') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 17', cleaning_method = 'updated method 17', cleaned_data = 'updated cleaned data 17';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (18, 'example data 18', 'method 18', 'cleaned data 18') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 18', cleaning_method = 'updated method 18', cleaned_data = 'updated cleaned data 18';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (19, 'example data 19', 'method 19', 'cleaned data 19') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 19', cleaning_method = 'updated method 19', cleaned_data = 'updated cleaned data 19';",
  "### TABLEDATA\n\nCREATE TABLE raw_data_cleaning (\n    id INT PRIMARY KEY,\n    data_entry VARCHAR(255),\n    cleaning_method VARCHAR(255),\n    cleaned_data TEXT\n);\n\n### STATEMENT\n\nUPSERT INTO raw_data_cleaning (id, data_entry, cleaning_method, cleaned_data) VALUES (20, 'example data 20', 'method 20', 'cleaned data 20') ON CONFLICT (id) DO UPDATE SET data_entry = 'updated example data 20', cleaning_method = 'updated method 20', cleaned_data = 'updated cleaned data 20';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (1, 'Remove dust', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Remove dust', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (2, 'Mop the floor', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Mop the floor', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (3, 'Empty the trash', FALSE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Empty the trash', completed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (4, 'Clean windows', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Clean windows', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (5, 'Vacuum carpet', FALSE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Vacuum carpet', completed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (6, 'Sweep the porch', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Sweep the porch', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (7, 'Wipe down surfaces', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Wipe down surfaces', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (8, 'Organize clutter', FALSE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Organize clutter', completed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (9, 'Dust furniture', TRUE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Dust furniture', completed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (10, 'Disinfect surfaces', FALSE) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Disinfect surfaces', completed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (1, 'Data Cleaning', '{\"steps\": [\"Remove duplicates\", \"Fill missing values\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Cleaning', parameters = '{\"steps\": [\"Remove duplicates\", \"Fill missing values\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (2, 'Normalization', '{\"steps\": [\"Min-Max scaling\", \"Z-score normalization\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Normalization', parameters = '{\"steps\": [\"Min-Max scaling\", \"Z-score normalization\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (3, 'Feature Engineering', '{\"steps\": [\"One-hot encoding\", \"Feature scaling\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Feature Engineering', parameters = '{\"steps\": [\"One-hot encoding\", \"Feature scaling\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (4, 'Dimensionality Reduction', '{\"steps\": [\"PCA\", \"t-SNE\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Dimensionality Reduction', parameters = '{\"steps\": [\"PCA\", \"t-SNE\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (5, 'Data Augmentation', '{\"steps\": [\"Image rotation\", \"Flipping\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Augmentation', parameters = '{\"steps\": [\"Image rotation\", \"Flipping\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (1, 'Remove dust', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Remove dust', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (2, 'Sweep floor', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Sweep floor', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (3, 'Mop floor', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Mop floor', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (4, 'Clean windows', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Clean windows', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (5, 'Empty trash', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Empty trash', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (6, 'Dust furniture', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Dust furniture', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (7, 'Vacuum carpet', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Vacuum carpet', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (8, 'Wipe surfaces', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Wipe surfaces', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (9, 'Organize items', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Organize items', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Cleaning_Steps (step_id, step_description, completed) VALUES (10, 'Sanitize surfaces', true) ON CONFLICT (step_id) DO UPDATE SET step_description = 'Sanitize surfaces', completed = true;",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (1, 'Data Cleansing', '{\"cleansing_type\": \"Standard\", \"threshold\": 0.5}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Cleansing', parameters = '{\"cleansing_type\": \"Standard\", \"threshold\": 0.5}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (2, 'Data Normalization', '{\"norm_type\": \"Min-Max\", \"exclude_features\": [\"feature1\", \"feature2\"]}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Normalization', parameters = '{\"norm_type\": \"Min-Max\", \"exclude_features\": [\"feature1\", \"feature2\"]}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (3, 'Data Imputation', '{\"impute_method\": \"Mean\", \"missing_values\": \"NULL\"}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Imputation', parameters = '{\"impute_method\": \"Mean\", \"missing_values\": \"NULL\"}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (4, 'Data Encoding', '{\"encode_type\": \"One-Hot\", \"sparse\": true}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Encoding', parameters = '{\"encode_type\": \"One-Hot\", \"sparse\": true}';",
  "### TABLEDATA\n\nCREATE TABLE Cleaning_Steps (\n    step_id INT PRIMARY KEY,\n    step_description VARCHAR(255),\n    completed BOOLEAN\n);\n\n\nCREATE TABLE Preprocessing_Steps (\n    process_id INT PRIMARY KEY,\n    process_name VARCHAR(255),\n    parameters JSONB\n);\n\n### STATEMENT\n\nINSERT INTO Preprocessing_Steps (process_id, process_name, parameters) VALUES (5, 'Data Scaling', '{\"scale_type\": \"Standard\", \"with_mean\": false}') ON CONFLICT (process_id) DO UPDATE SET process_name = 'Data Scaling', parameters = '{\"scale_type\": \"Standard\", \"with_mean\": false}';",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'Raw Data 1', 'Cleaned Data 1', '{\"step1\": \"Remove duplicates\", \"step2\": \"Remove special characters\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174000', 'Remove special characters', '2022-02-13 08:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174002', '123e4567-e89b-12d3-a456-426614174000', 'Random Forest', 0.85, '{\"result1\": \"True\", \"result2\": \"False\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174003', 'Raw Data 2', 'Cleaned Data 2', '{\"step1\": \"Remove stopwords\", \"step2\": \"Lowercase text\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174004', '123e4567-e89b-12d3-a456-426614174003', 'Lowercase text', '2022-02-14 10:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174005', '123e4567-e89b-12d3-a456-426614174003', 'Logistic Regression', 0.78, '{\"result1\": \"True\", \"result2\": \"True\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174006', 'Raw Data 3', 'Cleaned Data 3', '{\"step1\": \"Tokenization\", \"step2\": \"Remove numbers\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174007', '123e4567-e89b-12d3-a456-426614174006', 'Tokenization', '2022-02-15 12:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174008', '123e4567-e89b-12d3-a456-426614174006', 'SVM', 0.92, '{\"result1\": \"False\", \"result2\": \"False\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174009', 'Raw Data 4', 'Cleaned Data 4', '{\"step1\": \"Remove punctuation\", \"step2\": \"Lemmatization\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174010', '123e4567-e89b-12d3-a456-426614174009', 'Lemmatization', '2022-02-16 14:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174011', '123e4567-e89b-12d3-a456-426614174009', 'Naive Bayes', 0.70, '{\"result1\": \"False\", \"result2\": \"True\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174012', 'Raw Data 5', 'Cleaned Data 5', '{\"step1\": \"Normalize text\", \"step2\": \"Remove whitespace\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174013', '123e4567-e89b-12d3-a456-426614174012', 'Normalize text', '2022-02-17 16:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174014', '123e4567-e89b-12d3-a456-426614174012', 'Decision Tree', 0.80, '{\"result1\": \"True\", \"result2\": \"False\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174015', 'Raw Data 6', 'Cleaned Data 6', '{\"step1\": \"Remove HTML tags\", \"step2\": \"Remove URLs\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174016', '123e4567-e89b-12d3-a456-426614174015', 'Remove URLs', '2022-02-18 18:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174017', '123e4567-e89b-12d3-a456-426614174015', 'KNN', 0.88, '{\"result1\": \"True\", \"result2\": \"True\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('123e4567-e89b-12d3-a456-426614174018', 'Raw Data 7', 'Cleaned Data 7', '{\"step1\": \"Remove emojis\", \"step2\": \"Translate text to English\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('223e4567-e89b-12d3-a456-426614174019', '123e4567-e89b-12d3-a456-426614174018', 'Translate text to English', '2022-02-19 20:00:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('323e4567-e89b-12d3-a456-426614174020', '123e4567-e89b-12d3-a456-426614174018', 'Linear Regression', 0.68, '{\"result1\": \"False\", \"result2\": \"False\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('6636cf05-fee9-4592-8f6a-39fc7476adb1', 'Raw data 1', 'Cleaned data 1', '{\"step1\": \"Remove Punctuation\", \"step2\": \"Tokenization\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO data_cleaning (id, raw_data, cleaned_data, preprocessing_steps) VALUES ('2b2046b4-3faf-4f6f-a56b-9c4b512c28ab', 'Raw data 2', 'Cleaned data 2', '{\"step1\": \"Lowercasing\", \"step2\": \"Remove Stopwords\"}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('e0d63b51-28b8-4f43-b7c7-578d1d3e0eb4', '6636cf05-fee9-4592-8f6a-39fc7476adb1', 'Tokenization', '2023-09-01 10:15:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO preprocessing_logs (log_id, cleaned_data_id, preprocessing_step, timestamp) VALUES ('f3e1d584-1b7b-4e4c-8191-63c8737e9bc5', '2b2046b4-3faf-4f6f-a56b-9c4b512c28ab', 'Remove Stopwords', '2023-09-01 11:30:00')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('6391d7be-4f46-40d5-9177-a4b963a7d15a', '6636cf05-fee9-4592-8f6a-39fc7476adb1', 'Linear Regression', 0.85, '{\"class1\": 0.8, \"class2\": 0.9}')",
  "### TABLEDATA\n\nCREATE TABLE data_cleaning (\n    id UUID PRIMARY KEY,\n    raw_data TEXT,\n    cleaned_data TEXT,\n    preprocessing_steps JSON\n);\n\nCREATE TABLE preprocessing_logs (\n    log_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    preprocessing_step VARCHAR,\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE ml_model_results (\n    result_id UUID PRIMARY KEY,\n    cleaned_data_id UUID,\n    model_name VARCHAR,\n    accuracy FLOAT,\n    prediction_results JSON\n);\n\n### STATEMENT\n\nINSERT INTO ml_model_results (result_id, cleaned_data_id, model_name, accuracy, prediction_results) VALUES ('61f21b89-21fb-4305-980f-fd50568b9d0d', '2b2046b4-3faf-4f6f-a56b-9c4b512c28ab', 'Decision Tree', 0.78, '{\"class1\": 0.7, \"class2\": 0.8}')",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (1, 'Broom', 10) ON CONFLICT (id) DO UPDATE SET item_name = 'Broom', quantity = 15",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (2, 'Mop', 12) ON CONFLICT (id) DO UPDATE SET item_name = 'Mop', quantity = 17",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO DataCleansingSteps (step_id, step_description) VALUES (1, 'Remove Null Values') ON CONFLICT (step_id) DO UPDATE SET step_description = 'Remove Null Values'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO DataCleansingSteps (step_id, step_description) VALUES (2, 'Standardize Data') ON CONFLICT (step_id) DO UPDATE SET step_description = 'Standardize Data'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (1, 'Cleaned text data', 0) ON CONFLICT (data_id) DO UPDATE SET cleaned_data = 'Cleaned text data', label = 1",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (2, 'Processed data', 1) ON CONFLICT (data_id) DO UPDATE SET cleaned_data = 'Processed data', label = 1",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (1, 'Feature set 1', 'Label 1') ON CONFLICT (sample_id) DO UPDATE SET features = 'Feature set 1', target_variable = 'Label 1'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nINSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (2, 'Feature set 2', 'Label 2') ON CONFLICT (sample_id) DO UPDATE SET features = 'Feature set 2', target_variable = 'Label 2'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (1, 'Vacuum Cleaner', 10) ON CONFLICT (id) DO UPDATE SET quantity = 10",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (2, 'Broom', 15) ON CONFLICT (id) DO UPDATE SET quantity = 15",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (1, 'Remove Null Values') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (2, 'Normalize Data') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (1, 'Cleaned Text', 1) ON CONFLICT (data_id) DO UPDATE SET label = 1",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (2, 'Processed Data', 0) ON CONFLICT (data_id) DO UPDATE SET label = 0",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (1, 'Feature Set 1', 'Target 1') ON CONFLICT (sample_id) DO UPDATE SET target_variable = 'Target 1'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (2, 'Feature Set 2', 'Target 2') ON CONFLICT (sample_id) DO UPDATE SET target_variable = 'Target 2'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (3, 'Cleaning Solution', 5) ON CONFLICT (id) DO UPDATE SET quantity = 5",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (4, 'Mop', 20) ON CONFLICT (id) DO UPDATE SET quantity = 20",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (3, 'Standardize Data Types') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (4, 'Remove Duplicates') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (3, 'Final Cleaned Data', 1) ON CONFLICT (data_id) DO UPDATE SET label = 1",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO PreprocessedData (data_id, cleaned_data, label) VALUES (4, 'Processed Text', 0) ON CONFLICT (data_id) DO UPDATE SET label = 0",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (3, 'Feature Set 3', 'Target 3') ON CONFLICT (sample_id) DO UPDATE SET target_variable = 'Target 3'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO MLModelTrainingData (sample_id, features, target_variable) VALUES (4, 'Feature Set 4', 'Target 4') ON CONFLICT (sample_id) DO UPDATE SET target_variable = 'Target 4'",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (5, 'Dustpan', 12) ON CONFLICT (id) DO UPDATE SET quantity = 12",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO CleaningSupplies (id, item_name, quantity) VALUES (6, 'Scrub Brush', 18) ON CONFLICT (id) DO UPDATE SET quantity = 18",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (5, 'Correct Misspellings') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE CleaningSupplies (\n  id INT PRIMARY KEY,\n  item_name STRING,\n  quantity INT\n)\n\nCREATE TABLE DataCleansingSteps (\n  step_id INT PRIMARY KEY,\n  step_description STRING\n)\n\nCREATE TABLE PreprocessedData (\n  data_id INT PRIMARY KEY,\n  cleaned_data STRING,\n  label INT\n)\n\nCREATE TABLE MLModelTrainingData (\n  sample_id INT PRIMARY KEY,\n  features STRING,\n  target_variable STRING\n)\n\n### STATEMENT\n\nUPSERT INTO DataCleansingSteps (step_id, step_description) VALUES (6, 'Remove Outliers') ON CONFLICT (step_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_users (user_id, username, email, last_login) VALUES (1, 'john_doe', 'john.doe@example.com', '2022-01-01 10:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', email = 'john.doe@example.com', last_login = '2022-01-01 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_orders (order_id, user_id, order_date, total_amount) VALUES (1, 1, '2022-01-05', 100.50) ON CONFLICT (order_id) DO UPDATE SET user_id = 1, order_date = '2022-01-05', total_amount = 100.50;",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_products (product_id, product_name, price, category) VALUES (1, 'Cleaning Cloth', 5.99, 'Cleaning Supplies') ON CONFLICT (product_id) DO UPDATE SET product_name = 'Cleaning Cloth', price = 5.99, category = 'Cleaning Supplies';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_reviews (review_id, user_id, product_id, rating, review_text) VALUES (1, 1, 1, 5, 'Great product, highly recommended!') ON CONFLICT (review_id) DO UPDATE SET user_id = 1, product_id = 1, rating = 5, review_text = 'Great product, highly recommended!';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_logs (log_id, log_date, log_message, log_type) VALUES (1, '2022-01-10 08:00:00', 'Log message 1', 'INFO') ON CONFLICT (log_id) DO UPDATE SET log_date = '2022-01-10 08:00:00', log_message = 'Log message 1', log_type = 'INFO';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_users (user_id, username, email, last_login) VALUES (2, 'jane_smith', 'jane.smith@example.com', '2022-01-02 09:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', email = 'jane.smith@example.com', last_login = '2022-01-02 09:00:00';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_orders (order_id, user_id, order_date, total_amount) VALUES (2, 2, '2022-01-07', 75.25) ON CONFLICT (order_id) DO UPDATE SET user_id = 2, order_date = '2022-01-07', total_amount = 75.25;",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_products (product_id, product_name, price, category) VALUES (2, 'Duster', 9.99, 'Cleaning Supplies') ON CONFLICT (product_id) DO UPDATE SET product_name = 'Duster', price = 9.99, category = 'Cleaning Supplies';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_reviews (review_id, user_id, product_id, rating, review_text) VALUES (2, 2, 2, 4, 'Good product, could be better.') ON CONFLICT (review_id) DO UPDATE SET user_id = 2, product_id = 2, rating = 4, review_text = 'Good product, could be better.';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_logs (log_id, log_date, log_message, log_type) VALUES (2, '2022-01-12 15:30:00', 'Log message 2', 'ERROR') ON CONFLICT (log_id) DO UPDATE SET log_date = '2022-01-12 15:30:00', log_message = 'Log message 2', log_type = 'ERROR';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_users (user_id, username, email, last_login) VALUES (3, 'adam_smith', 'adam.smith@example.com', '2022-01-03 11:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'adam_smith', email = 'adam.smith@example.com', last_login = '2022-01-03 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_orders (order_id, user_id, order_date, total_amount) VALUES (3, 3, '2022-01-09', 150.75) ON CONFLICT (order_id) DO UPDATE SET user_id = 3, order_date = '2022-01-09', total_amount = 150.75;",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_products (product_id, product_name, price, category) VALUES (3, 'Vacuum Cleaner', 99.99, 'Cleaning Equipment') ON CONFLICT (product_id) DO UPDATE SET product_name = 'Vacuum Cleaner', price = 99.99, category = 'Cleaning Equipment';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_reviews (review_id, user_id, product_id, rating, review_text) VALUES (3, 3, 3, 5, 'Amazing product, worth every penny!') ON CONFLICT (review_id) DO UPDATE SET user_id = 3, product_id = 3, rating = 5, review_text = 'Amazing product, worth every penny!';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_logs (log_id, log_date, log_message, log_type) VALUES (3, '2022-01-15 20:45:00', 'Log message 3', 'DEBUG') ON CONFLICT (log_id) DO UPDATE SET log_date = '2022-01-15 20:45:00', log_message = 'Log message 3', log_type = 'DEBUG';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_users (user_id, username, email, last_login) VALUES (4, 'sara_wilson', 'sara.wilson@example.com', '2022-01-04 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_wilson', email = 'sara.wilson@example.com', last_login = '2022-01-04 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_orders (order_id, user_id, order_date, total_amount) VALUES (4, 4, '2022-01-11', 200.50) ON CONFLICT (order_id) DO UPDATE SET user_id = 4, order_date = '2022-01-11', total_amount = 200.50;",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_products (product_id, product_name, price, category) VALUES (4, 'Mop', 7.99, 'Cleaning Supplies') ON CONFLICT (product_id) DO UPDATE SET product_name = 'Mop', price = 7.99, category = 'Cleaning Supplies';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_reviews (review_id, user_id, product_id, rating, review_text) VALUES (4, 4, 4, 3, 'Average product, needs improvement.') ON CONFLICT (review_id) DO UPDATE SET user_id = 4, product_id = 4, rating = 3, review_text = 'Average product, needs improvement.';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_logs (log_id, log_date, log_message, log_type) VALUES (4, '2022-01-20 14:00:00', 'Log message 4', 'WARNING') ON CONFLICT (log_id) DO UPDATE SET log_date = '2022-01-20 14:00:00', log_message = 'Log message 4', log_type = 'WARNING';",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_users (user_id, username, email, last_login) VALUES (1, 'john_doe', 'john@example.com', '2022-01-01 10:00:00') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, email = excluded.email, last_login = excluded.last_login",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_orders (order_id, user_id, order_date, total_amount) VALUES (1, 1, '2022-01-01', 100.00) ON CONFLICT (order_id) DO UPDATE SET user_id = excluded.user_id, order_date = excluded.order_date, total_amount = excluded.total_amount",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_products (product_id, product_name, price, category) VALUES (1, 'Cleaning Solution', 10.99, 'Cleaning Supplies') ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, category = excluded.category",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_reviews (review_id, user_id, product_id, rating, review_text) VALUES (1, 1, 1, 5, 'Great product, highly recommended!') ON CONFLICT (review_id) DO UPDATE SET user_id = excluded.user_id, product_id = excluded.product_id, rating = excluded.rating, review_text = excluded.review_text",
  "### TABLEDATA\n\nCREATE TABLE cleaning_users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  last_login TIMESTAMP\n)\n\nCREATE TABLE cleaning_orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE cleaning_products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(100),\n  price DECIMAL(10, 2),\n  category VARCHAR(50)\n)\n\nCREATE TABLE cleaning_reviews (\n  review_id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review_text TEXT\n)\n\nCREATE TABLE cleaning_logs (\n  log_id INT PRIMARY KEY,\n  log_date TIMESTAMP,\n  log_message TEXT,\n  log_type VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO cleaning_logs (log_id, log_date, log_message, log_type) VALUES (1, '2022-01-01 12:00:00', 'Log message 1', 'INFO') ON CONFLICT (log_id) DO UPDATE SET log_date = excluded.log_date, log_message = excluded.log_message, log_type = excluded.log_type"
]