[
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, data_value FROM VisualizationData WHERE data_value > 100;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, data_name FROM VisualizationData WHERE visualization_type = 'chart';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE date_inserted > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(data_value) AS average_value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM VisualizationData WHERE visualization_type = 'map';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(data_value) AS max_value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(data_value) AS min_value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT visualization_type FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, data_value FROM VisualizationData WHERE visualization_type IN ('chart', 'graph');",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, data_name, visualization_type FROM VisualizationData WHERE data_value < 50;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_name LIKE '%sales%';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData ORDER BY data_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData ORDER BY date_inserted ASC;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, COUNT(*) AS count FROM VisualizationData GROUP BY data_name;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT visualization_type, AVG(data_value) AS avg_value FROM VisualizationData GROUP BY visualization_type;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT visualization_type, COUNT(*) AS count FROM VisualizationData GROUP BY visualization_type HAVING count > 2;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DAYOFWEEK(date_inserted) AS day_of_week, COUNT(*) AS count FROM VisualizationData GROUP BY day_of_week;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_value > 100 AND visualization_type = 'bar'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, data_value FROM VisualizationData WHERE data_name LIKE 'A%' AND data_value < 50",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(data_value) AS average_value FROM VisualizationData WHERE visualization_type = 'line'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(data_value) AS max_value FROM VisualizationData WHERE visualization_type = 'pie'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(data_value) AS min_value FROM VisualizationData WHERE data_name = 'Chart'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE date_inserted BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT data_name FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, SUM(data_value) AS total_value FROM VisualizationData GROUP BY data_name HAVING total_value > 500",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_value IS NULL",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData ORDER BY data_name ASC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData ORDER BY data_value DESC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData OFFSET 5",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_name IN ('Chart', 'Graph', 'Diagram')",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_name NOT LIKE '%plot%'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_name, COUNT(*) AS name_count FROM VisualizationData GROUP BY data_name ORDER BY name_count DESC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(data_value) AS average_value, visualization_type FROM VisualizationData GROUP BY visualization_type",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(data_value) AS min_value, MAX(data_value) AS max_value FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_name VARCHAR(255),\n  data_value FLOAT,\n  visualization_type VARCHAR(50),\n  date_inserted TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT visualization_type, COUNT(*) AS type_count FROM VisualizationData WHERE data_value > 50 GROUP BY visualization_type HAVING type_count > 2",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT id, name FROM table1 WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 WHERE value > 100;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value FROM table1 WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT MAX(value) FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT MIN(value) FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT AVG(value) FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT SUM(value) FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM table1;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT id, name, value FROM table1 ORDER BY value DESC;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table2;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT id, category FROM table2 WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table2 WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT category, AVG(quantity) FROM table2 GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT category, MAX(quantity) FROM table2 GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT category, COUNT(*) FROM table2 GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT id, category, quantity FROM table2 ORDER BY quantity ASC;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table2 LIMIT 5 OFFSET 2;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table2 WHERE id = (SELECT MAX(id) FROM table2);",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 WHERE value > 100;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value FROM table1 WHERE value BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT id, name FROM table1 WHERE name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 WHERE id IN (SELECT id FROM table2 WHERE quantity > 5);",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, SUM(value) AS total_value FROM table1 GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, AVG(value) AS avg_value FROM table1 WHERE value > 50 GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT t1.id, t1.name, t1.value, t2.category FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT t1.name, t1.value, t2.category, t2.quantity FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id WHERE t1.value >= 50;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 RIGHT JOIN table2 ON table1.id = table2.id;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 FULL JOIN table2 ON table1.id = table2.id;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value, category FROM table1 CROSS JOIN table2;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT t1.name, COUNT(t2.id) AS id_count FROM table1 t1 LEFT JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.name;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT category, SUM(value) AS total_value FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id GROUP BY category;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value FROM table1 UNION SELECT category, quantity FROM table2;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT * FROM table1 WHERE id BETWEEN 1 AND 10 ORDER BY value DESC;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value FROM table1 WHERE name = 'John' UNION SELECT category, quantity FROM table2 WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, value, category FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id WHERE t1.name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, SUM(quantity) AS total_quantity FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id GROUP BY name HAVING total_quantity > 50;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT t1.name, MAX(t2.quantity) AS max_quantity FROM table1 t1 JOIN table2 t2 ON t1.id = t2.id GROUP BY t1.name ORDER BY max_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE table1 (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    value INTEGER\n);\n\n\nCREATE TABLE table2 (\n    id SERIAL PRIMARY KEY,\n    category VARCHAR(100),\n    quantity INTEGER\n);\n\n### STATEMENT\n\nSELECT name, AVG(value) AS avg_value FROM table1 WHERE id IN (SELECT id FROM table2 WHERE category = 'Furniture') GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, date, value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, date FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationConfig;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT config_id, visualization_type, visualization_name FROM VisualizationConfig;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_name FROM VisualizationConfig;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationMetadata;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_id, visualization_id, description FROM VisualizationMetadata;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_id, description FROM VisualizationMetadata;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id FROM VisualizationMetadata;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, date, value, visualization_type, visualization_name, description FROM VisualizationData INNER JOIN VisualizationConfig ON VisualizationData.id = VisualizationConfig.config_id INNER JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, date, value, visualization_type, visualization_name, description FROM VisualizationData JOIN VisualizationConfig ON VisualizationData.id = VisualizationConfig.config_id JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT VisualizationData.id, VisualizationData.date, VisualizationData.value, VisualizationConfig.visualization_type, VisualizationConfig.visualization_name, VisualizationMetadata.description FROM VisualizationData LEFT JOIN VisualizationConfig ON VisualizationData.id = VisualizationConfig.config_id LEFT JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT VisualizationData.id, VisualizationData.date, VisualizationData.value, VisualizationConfig.visualization_type, VisualizationConfig.visualization_name, VisualizationMetadata.description FROM VisualizationData RIGHT JOIN VisualizationConfig ON VisualizationData.id = VisualizationConfig.config_id RIGHT JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT VisualizationData.id, VisualizationData.date, VisualizationData.value, VisualizationConfig.visualization_type, VisualizationConfig.visualization_name, VisualizationMetadata.description FROM VisualizationData FULL OUTER JOIN VisualizationConfig ON VisualizationData.id = VisualizationConfig.config_id FULL OUTER JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(value) AS max_value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, value FROM VisualizationData WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, COUNT(*) AS count FROM VisualizationConfig GROUP BY visualization_type ORDER BY count DESC;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT date, value FROM VisualizationData WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE value > 100;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData ORDER BY date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(value) FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_name FROM VisualizationConfig WHERE visualization_type = 'bar';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, description FROM VisualizationMetadata WHERE visualization_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT id, date, value, description FROM VisualizationData INNER JOIN VisualizationMetadata ON VisualizationData.id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE id IN (SELECT visualization_id FROM VisualizationMetadata WHERE description LIKE '%important%');",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT visualization_type FROM VisualizationConfig;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) as total_records FROM VisualizationData WHERE value < 50;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, COUNT(*) as total_visualizations FROM VisualizationConfig GROUP BY visualization_type;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_name, COUNT(*) as total FROM VisualizationConfig GROUP BY visualization_name HAVING total > 1;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT date, SUM(value) as total_value FROM VisualizationData GROUP BY date;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_name, description FROM VisualizationConfig INNER JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE date > '2022-01-01' AND date < '2022-01-31' AND value BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_name, description FROM VisualizationConfig LEFT JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_name, description FROM VisualizationConfig INNER JOIN VisualizationMetadata ON VisualizationConfig.config_id = VisualizationMetadata.visualization_id WHERE visualization_type = 'pie';",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n    id INT PRIMARY KEY,\n    date DATE,\n    value FLOAT\n);\n\n\nCREATE TABLE VisualizationConfig (\n    config_id INT PRIMARY KEY,\n    visualization_type VARCHAR(50),\n    visualization_name VARCHAR(50)\n);\n\n\nCREATE TABLE VisualizationMetadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(value) as average_value, MAX(value) as max_value, MIN(value) as min_value FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, data_value FROM visualization_data WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_metadata;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value FROM visualization_metadata WHERE visualization_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_metrics;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT metric_name, metric_value FROM visualization_metrics WHERE visualization_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_logs;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT log_timestamp, log_message FROM visualization_logs WHERE visualization_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, data_value, metric_name, metric_value FROM visualization_data JOIN visualization_metrics ON visualization_data.id = visualization_metrics.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, data_value, metadata_key, metadata_value FROM visualization_data JOIN visualization_metadata ON visualization_data.id = visualization_metadata.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_key, metadata_value, metric_name, metric_value FROM visualization_metadata JOIN visualization_metrics ON visualization_metadata.visualization_id = visualization_metrics.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, data_value, metric_name, metric_value, log_timestamp, log_message FROM visualization_data JOIN visualization_metrics ON visualization_data.id = visualization_metrics.visualization_id JOIN visualization_logs ON visualization_data.id = visualization_logs.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT SUM(metric_value) FROM visualization_metrics;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(data_value) FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(metric_value) FROM visualization_metrics;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(data_value) FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM visualization_logs WHERE visualization_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT visualization_id FROM visualization_logs;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data ORDER BY data_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_metadata ORDER BY metadata_value ASC;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, SUM(data_value) FROM visualization_data GROUP BY data_name;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, metadata_key FROM visualization_metadata WHERE metadata_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT visualization_id FROM visualization_metrics WHERE metric_value > 100;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_logs WHERE log_timestamp < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(metric_value) FROM visualization_metrics;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, metadata_key, metric_name, log_message FROM visualization_data JOIN visualization_metadata ON visualization_data.id = visualization_metadata.visualization_id JOIN visualization_metrics ON visualization_metadata.visualization_id = visualization_metrics.visualization_id JOIN visualization_logs ON visualization_metrics.visualization_id = visualization_logs.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, AVG(metric_value) AS avg_metric_value FROM visualization_metrics GROUP BY visualization_id HAVING avg_metric_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, MAX(log_timestamp) AS latest_log_timestamp FROM visualization_logs GROUP BY visualization_id ORDER BY latest_log_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data WHERE id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_key, COUNT(DISTINCT visualization_id) AS unique_visualizations FROM visualization_metadata GROUP BY metadata_key;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, SUM(metric_value) AS total_metric_value FROM visualization_metrics GROUP BY visualization_id HAVING total_metric_value > 500;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, AVG(data_value) AS avg_data_value FROM visualization_data GROUP BY visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT metadata_key, AVG(metric_value) AS avg_metric_value FROM visualization_metadata JOIN visualization_metrics ON visualization_metadata.visualization_id = visualization_metrics.visualization_id GROUP BY metadata_key;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, log_message FROM visualization_logs WHERE log_message LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT visualization_id, metadata_key, metric_name, log_timestamp FROM visualization_metadata JOIN visualization_metrics ON visualization_metadata.visualization_id = visualization_metrics.visualization_id JOIN visualization_logs ON visualization_metrics.visualization_id = visualization_logs.visualization_id;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT data_name, metric_name, log_message FROM visualization_data NATURAL JOIN visualization_metrics NATURAL JOIN visualization_logs;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT metadata_key, metadata_value FROM visualization_metadata;",
  "### TABLEDATA\n\nCREATE TABLE visualization_data (\n    id INT PRIMARY KEY,\n    data_name TEXT,\n    data_value DECIMAL\n);\n\n\nCREATE TABLE visualization_metadata (\n    metadata_id INT PRIMARY KEY,\n    visualization_id INT,\n    metadata_key TEXT,\n    metadata_value TEXT\n);\n\n\nCREATE TABLE visualization_metrics (\n    metric_id INT PRIMARY KEY,\n    visualization_id INT,\n    metric_name TEXT,\n    metric_value DECIMAL\n);\n\n\nCREATE TABLE visualization_logs (\n    log_id INT PRIMARY KEY,\n    visualization_id INT,\n    log_timestamp TIMESTAMP,\n    log_message TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data ORDER BY data_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT data_type FROM VisualizationData WHERE data_value > 100",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, data_value FROM VisualizationData WHERE id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT function_name FROM AggregationFunctions WHERE id = 5",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM DataSources WHERE source_type = 'SQL'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT source_name, source_description FROM DataSources WHERE id < 10",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM SummaryData WHERE summary_value < 50",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT type_description FROM VisualizationTypes WHERE type_name = 'Bar Chart'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT function_name, function_description FROM AggregationFunctions WHERE id BETWEEN 3 AND 7",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, summary_value FROM SummaryData WHERE summary_type = 'Average'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT type_name FROM VisualizationTypes WHERE id > 3",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT source_name, source_type FROM DataSources WHERE source_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_type = 'Chart'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM AggregationFunctions WHERE function_description LIKE '%calculation%'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM DataSources ORDER BY source_name ASC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM SummaryData ORDER BY summary_value DESC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id FROM VisualizationTypes WHERE type_description = '3D visualizations'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(summary_value) FROM SummaryData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, data_type FROM VisualizationData WHERE id = 1",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(data_value) AS avg_value FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM AggregationFunctions WHERE function_name LIKE 'Count%'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT source_name, source_description FROM DataSources WHERE source_type = 'API'",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT summary_type, SUM(summary_value) FROM SummaryData GROUP BY summary_type",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT type_name FROM VisualizationTypes",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData WHERE data_value > 100",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(data_value) AS max_value, MIN(data_value) AS min_value FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, function_name, function_description FROM AggregationFunctions",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT source_name, COUNT(*) AS total_count FROM DataSources GROUP BY source_name",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, summary_type, summary_value FROM SummaryData WHERE summary_value < 50",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationTypes ORDER BY type_name DESC",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(data_value) AS avg_value, COUNT(*) AS total_count FROM VisualizationData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM AggregationFunctions WHERE function_example IS NULL",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT source_type FROM DataSources",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT id, type_name, type_description FROM VisualizationTypes WHERE id > 3",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(summary_value) AS max_summary_value FROM SummaryData",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT source_name, source_description FROM DataSources ORDER BY source_name",
  "### TABLEDATA\n\nCREATE TABLE VisualizationData (\n  id INT PRIMARY KEY,\n  data_type VARCHAR(50),\n  data_value DECIMAL\n)\n\nCREATE TABLE AggregationFunctions (\n  id INT PRIMARY KEY,\n  function_name VARCHAR(50),\n  function_description TEXT,\n  function_example VARCHAR(100)\n)\n\nCREATE TABLE DataSources (\n  id INT PRIMARY KEY,\n  source_name VARCHAR(50),\n  source_description TEXT,\n  source_type VARCHAR(50)\n)\n\nCREATE TABLE SummaryData (\n  id INT PRIMARY KEY,\n  summary_type VARCHAR(50),\n  summary_value DECIMAL\n)\n\nCREATE TABLE VisualizationTypes (\n  id INT PRIMARY KEY,\n  type_name VARCHAR(50),\n  type_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM VisualizationData LIMIT 5"
]