[
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, kpi_value FROM KPIs WHERE department_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, date_updated FROM KPIs WHERE kpi_value > 1000;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE date_updated > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name FROM KPIs WHERE department_id = 4 AND kpi_value < 500;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, department_id FROM KPIs WHERE date_updated <= '2022-02-28';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE kpi_value BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, department_id, kpi_name FROM KPIs WHERE date_updated >= '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE department_id = 3 OR kpi_value = 750;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, kpi_name, kpi_value FROM KPIs WHERE department_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE kpi_name LIKE 'Sales%';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, kpi_value FROM KPIs WHERE kpi_value <> 0;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, date_updated FROM KPIs WHERE date_updated BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE department_id = 5 OR kpi_value > 2000;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, kpi_name FROM KPIs WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE date_updated < '2022-06-30' OR kpi_value > 1500;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, department_id FROM KPIs WHERE kpi_name = 'Profit';",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE department_id = 4 AND kpi_value BETWEEN 1000 AND 2000;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name FROM KPIs WHERE department_id = 3 AND kpi_value > 800;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, date_updated FROM KPIs WHERE department_id = 2 AND kpi_value < 300;",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE department_id = 1 AND kpi_value > 100",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, kpi_value FROM KPIs WHERE date_updated >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, AVG(kpi_value) AS avg_kpi_value FROM KPIs GROUP BY department_id",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE kpi_value BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, COUNT(*) AS total_kpis FROM KPIs GROUP BY department_id HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, SUM(kpi_value) AS total_kpi_value FROM KPIs WHERE department_id = 2 GROUP BY kpi_name",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, MAX(kpi_value) AS max_kpi_value FROM KPIs GROUP BY department_id",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE kpi_name LIKE 'Revenue%'",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(kpi_value) AS avg_kpi_value FROM KPIs",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, MIN(kpi_value) AS min_kpi_value FROM KPIs GROUP BY department_id",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT department_id) AS total_departments FROM KPIs",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs ORDER BY date_updated DESC",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, AVG(kpi_value) AS avg_kpi_value FROM KPIs WHERE date_updated >= '2022-01-01' GROUP BY department_id",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, kpi_value FROM KPIs WHERE date_updated BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE department_id = 1 ORDER BY kpi_value DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT department_id, SUM(kpi_value) AS total_kpi_value FROM KPIs GROUP BY department_id HAVING SUM(kpi_value) > 1000",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, MAX(kpi_value) AS max_kpi_value FROM KPIs GROUP BY kpi_name",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_kpis FROM KPIs",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM KPIs WHERE kpi_value < 50 OR date_updated < '2022-03-01'",
  "### TABLEDATA\n\nCREATE TABLE KPIs (\n    id INT PRIMARY KEY,\n    department_id INT,\n    kpi_name VARCHAR(50),\n    kpi_value DECIMAL(10,2),\n    date_updated TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_name, AVG(kpi_value) AS avg_kpi_value FROM KPIs GROUP BY kpi_name HAVING AVG(kpi_value) > 75",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, date, metric1 FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT config_id, metric_name, weight FROM KPI_Config;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, metric1 FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT config_id, weight FROM KPI_Config WHERE metric_name = 'Sales';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, date, metric1 FROM KPI_Data WHERE metric1 > 100;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE weight >= 0.5;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, metric1 FROM KPI_Data WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE metric_name LIKE '%Conversion%';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, date, metric1 FROM KPI_Data ORDER BY date DESC;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config ORDER BY weight ASC;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT date FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(metric1) AS average_metric1 FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(metric2) AS max_metric2 FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(id) AS total_records FROM KPI_Data;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT id, SUM(metric1) AS total_metric1 FROM KPI_Data GROUP BY id;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT config_id, AVG(weight) AS average_weight FROM KPI_Config;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT metric_name) AS unique_metrics FROM KPI_Config;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE metric1 > 100 AND metric2 < 50;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT metric_name, SUM(metric1), AVG(metric2) FROM KPI_Data JOIN KPI_Config ON KPI_Data.id = KPI_Config.config_id GROUP BY metric_name;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT MAX(metric1), MIN(metric2) FROM KPI_Data WHERE DATE(date) = '2022-02-15';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE weight > 0.5 ORDER BY metric_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(metric1), COUNT(date) FROM KPI_Data WHERE metric1 > metric2;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE id IN (SELECT config_id FROM KPI_Config WHERE weight < 0.3);",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT metric_name FROM KPI_Config;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE DATE_FORMAT(date, '%Y-%m') = '2022-03';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT metric_name, SUM(weight) FROM KPI_Config GROUP BY metric_name HAVING SUM(weight) > 1;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE metric1 = metric2 OR metric1 < metric2;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE metric_name LIKE '%sales%';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE DATE(date) = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE metric1 BETWEEN 50 AND 100 AND metric2 NOT BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE id = (SELECT MAX(id) FROM KPI_Data);",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE weight BETWEEN 0.2 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(metric1), COUNT(*) FROM KPI_Data WHERE date >= '2022-01-01' AND date <= '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT SUM(metric1), COUNT(DISTINCT metric2) FROM KPI_Data WHERE date >= '2022-04-01' AND date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Data WHERE id NOT IN (SELECT config_id FROM KPI_Config);",
  "### TABLEDATA\n\nCREATE TABLE KPI_Data (\n    id INT PRIMARY KEY,\n    date DATE,\n    metric1 FLOAT,\n    metric2 FLOAT\n);\n\n\nCREATE TABLE KPI_Config (\n    config_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    weight FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM KPI_Config WHERE metric_name = 'revenue';",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, name FROM kpi_metrics;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT name, value FROM kpi_metrics;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_categories;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM kpi_categories;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_name, description FROM kpi_categories;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_id, metric_id, category_id FROM kpi_data;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_id, data_value FROM kpi_data;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT timestamp FROM kpi_data;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, name, value FROM kpi_metrics WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_categories WHERE category_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_id, category_id, data_value FROM kpi_data WHERE metric_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT name, value FROM kpi_metrics WHERE id = 4;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_name, description FROM kpi_categories WHERE category_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data WHERE category_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics ORDER BY name;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_categories ORDER BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data ORDER BY timestamp;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics WHERE value > 100",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT name, value FROM kpi_metrics WHERE date_of_measurement = '2021-10-10'",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_name, description FROM kpi_categories WHERE category_id = 1",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT metric_id, category_id, data_value FROM kpi_data WHERE timestamp >= '2021-01-01' AND timestamp <= '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics JOIN kpi_data ON kpi_metrics.id = kpi_data.metric_id",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data JOIN kpi_categories ON kpi_data.category_id = kpi_categories.category_id",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_metrics.name, kpi_data.data_value, kpi_categories.description FROM kpi_metrics JOIN kpi_data ON kpi_metrics.id = kpi_data.metric_id JOIN kpi_categories ON kpi_data.category_id = kpi_categories.category_id",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(value) AS average_value FROM kpi_metrics WHERE date_of_measurement BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(data_value) AS average_data_value FROM kpi_categories JOIN kpi_data ON kpi_categories.category_id = kpi_data.category_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(value) AS max_value, MIN(value) AS min_value FROM kpi_metrics",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT kpi_metrics.name, SUM(data_value) AS total_data_value FROM kpi_metrics JOIN kpi_data ON kpi_metrics.id = kpi_data.metric_id GROUP BY kpi_metrics.name",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(*) AS num_of_data_points FROM kpi_categories JOIN kpi_data ON kpi_categories.category_id = kpi_data.category_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data WHERE metric_id IN (SELECT id FROM kpi_metrics WHERE date_of_measurement = '2021-10-10')",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics WHERE id = (SELECT metric_id FROM kpi_data WHERE data_value > 100)",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data WHERE data_value > (SELECT AVG(data_value) FROM kpi_data)",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics WHERE name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_data WHERE TIMESTAMPDIFF(HOUR, timestamp, NOW()) < 24",
  "### TABLEDATA\n\nCREATE TABLE kpi_metrics (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    value DECIMAL(10,2),\n    date_of_measurement DATE\n);\n\n\nCREATE TABLE kpi_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255),\n    description TEXT\n);\n\n\nCREATE TABLE kpi_data (\n    data_id INT PRIMARY KEY,\n    metric_id INT,\n    category_id INT,\n    data_value DECIMAL(10,2),\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM kpi_metrics WHERE date_of_measurement = (SELECT MAX(date_of_measurement) FROM kpi_metrics)",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT id, name FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT order_id, user_id, product_id FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT product_id, category FROM products;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT sale_id, order_id FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT product_id, amount FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT id, name, email FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM orders WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, amount FROM sales WHERE sale_date = '2022-05-15';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM orders JOIN users ON orders.user_id = users.id;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT orders.order_id, users.name FROM orders JOIN users ON orders.user_id = users.id;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, age FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT user_id, order_id, product_id, order_date FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT DISTINCT category FROM products;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT name, price FROM products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT s.sale_id, p.name AS product_name, s.amount AS sale_amount FROM sales s JOIN products p ON s.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, o.order_id, p.name AS product_name, o.quantity FROM users u JOIN orders o ON u.id = o.user_id JOIN products p ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, COUNT(o.order_id) AS total_orders FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, COUNT(o.order_id) AS total_orders, SUM(s.amount) AS total_sales FROM users u LEFT JOIN orders o ON u.id = o.user_id LEFT JOIN sales s ON o.order_id = s.order_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, COUNT(s.sale_id) AS total_sales, AVG(s.amount) AS avg_sale_amount FROM products p LEFT JOIN sales s ON p.product_id = s.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, COUNT(o.order_id) AS total_orders, SUM(s.amount) AS total_sales FROM users u LEFT JOIN orders o ON u.id = o.user_id LEFT JOIN sales s ON o.order_id = s.order_id GROUP BY u.name HAVING total_sales > 5000;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, MAX(o.quantity) AS max_order_quantity, MIN(o.quantity) AS min_order_quantity FROM users u JOIN orders o ON u.id = o.user_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, MIN(s.amount) AS min_sale_amount, MAX(s.amount) AS max_sale_amount FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, AVG(o.quantity) AS avg_order_quantity FROM users u JOIN orders o ON u.id = o.user_id GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id WHERE s.sale_date >= '2022-01-01' GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, COUNT(o.order_id) AS total_orders, SUM(s.amount) AS total_sales FROM users u LEFT JOIN orders o ON u.id = o.user_id LEFT JOIN sales s ON o.order_id = s.order_id WHERE s.sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, AVG(s.amount) AS avg_sale_amount FROM products p JOIN sales s ON p.product_id = s.product_id WHERE s.sale_date >= '2022-06-01' GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT u.name AS user_name, COUNT(o.order_id) AS total_orders, AVG(s.amount) AS avg_sale_amount FROM users u LEFT JOIN orders o ON u.id = o.user_id LEFT JOIN sales s ON o.order_id = s.order_id WHERE s.sale_date < '2022-06-01' GROUP BY u.name;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), age INT, gender VARCHAR(10));\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, quantity INT, order_date DATE);\n\nCREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(50));\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date DATE, amount DECIMAL(10,2));\n\n### STATEMENT\n\nSELECT p.name AS product_name, COUNT(s.sale_id) AS total_sales, SUM(s.amount) AS total_sales_amount FROM products p LEFT JOIN sales s ON p.product_id = s.product_id WHERE s.sale_date >= '2022-01-01' AND s.sale_date <= '2022-12-31' GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, user_name FROM Users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, user_name, user_email FROM Users WHERE user_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM Orders WHERE order_date >= '2022-01-01' AND order_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT order_id, user_id, total_amount FROM Orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM Products WHERE price < 500;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_id, product_name, category FROM Products WHERE product_name LIKE '%Phone%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT sale_id, order_id, product_id, quantity, sale_amount FROM Sales WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT sale_id, order_id, product_id, sale_amount FROM Sales WHERE sale_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Orders o JOIN Users u ON o.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT o.order_id, u.user_name, p.product_name FROM Orders o JOIN Users u ON o.user_id = u.user_id JOIN Products p ON o.order_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT u.user_name, o.order_date, s.sale_amount FROM Users u JOIN Orders o ON u.user_id = o.user_id JOIN Sales s ON o.order_id = s.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT s.sale_id, p.product_name, p.price FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE s.quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT u.user_name, o.order_date, k.kpi_name FROM Users u JOIN Orders o ON u.user_id = o.user_id JOIN KPIs k ON u.user_id = k.kpi_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT u.user_name, sum(o.total_amount) AS total_spent FROM Users u JOIN Orders o ON u.user_id = o.user_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT p.product_name, sum(s.quantity) AS total_sold FROM Products p JOIN Sales s ON p.product_id = s.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.product_name, k.kpi_name, s.quantity FROM Users u JOIN Orders o ON u.user_id = o.user_id JOIN Sales s ON o.order_id = s.order_id JOIN Products p ON s.product_id = p.product_id JOIN KPIs k ON p.product_id = k.kpi_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT o.order_id, o.total_amount, p.price, s.quantity, (o.total_amount - (p.price * s.quantity)) AS profit FROM Orders o JOIN Products p ON o.order_id = p.product_id JOIN Sales s ON o.order_id = s.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.product_name, sum(s.sale_amount) AS total_sales FROM Users u JOIN Orders o ON u.user_id = o.user_id JOIN Sales s ON o.order_id = s.order_id JOIN Products p ON s.product_id = p.product_id GROUP BY u.user_name, p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, user_email FROM Users WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, category, price FROM Products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_email FROM Users WHERE user_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT Orders.order_id, Products.product_name, Sales.quantity, Sales.sale_amount FROM Orders JOIN Sales ON Orders.order_id = Sales.order_id JOIN Products ON Sales.product_id = Products.product_id",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT order_date, total_amount FROM Orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, AVG(total_amount) AS avg_amount FROM Orders GROUP BY user_id HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, total_amount FROM Users JOIN Orders ON Users.user_id = Orders.user_id WHERE total_amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM Products JOIN Sales ON Products.product_id = Sales.product_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, calculation_formula FROM Users JOIN KPIs ON Users.user_id = KPIs.kpi_id",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(total_amount) FROM Orders GROUP BY user_id HAVING MAX(total_amount) > 500",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT category, COUNT(*) AS num_sales FROM Products GROUP BY category",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT kpi_name, AVG(user_id) AS avg_user_id FROM KPIs JOIN Users ON KPIs.kpi_id = Users.user_id",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, SUM(sale_amount) AS total_sales_amount FROM Users JOIN Orders ON Users.user_id = Orders.user_id JOIN Sales ON Orders.order_id = Sales.order_id GROUP BY user_name",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, SUM(sale_amount) AS total_sales_amount FROM Products JOIN Sales ON Products.product_id = Sales.product_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT kpi_name, user_name FROM KPIs JOIN Users ON KPIs.kpi_id = Users.user_id ORDER BY kpi_name DESC",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT order_id, user_name, product_name, quantity, sale_amount FROM Orders JOIN Sales ON Orders.order_id = Sales.order_id JOIN Products ON Sales.product_id = Products.product_id JOIN Users ON Orders.user_id = Users.user_id",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, sale_amount FROM Users JOIN Orders ON Users.user_id = Orders.user_id JOIN Sales ON Orders.order_id = Sales.order_id WHERE sale_amount > 200",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, category, SUM(quantity) AS total_quantity FROM Products JOIN Sales ON Products.product_id = Sales.product_id GROUP BY product_name, category",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_email, order_date FROM Users JOIN Orders ON Users.user_id = Orders.user_id ORDER BY order_date LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY, \n    user_name VARCHAR(50), \n    user_email VARCHAR(50)\n)\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY, \n    user_id INT, \n    order_date DATE, \n    total_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY, \n    product_name VARCHAR(50), \n    category VARCHAR(50), \n    price DECIMAL(10, 2)\n)\n\nCREATE TABLE Sales (\n    sale_id INT PRIMARY KEY, \n    order_id INT, \n    product_id INT, \n    quantity INT, \n    sale_amount DECIMAL(10, 2)\n)\n\nCREATE TABLE KPIs (\n    kpi_id INT PRIMARY KEY, \n    kpi_name VARCHAR(50), \n    calculation_formula VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT user_name, AVG(sale_amount) AS avg_sale_amount FROM Users JOIN Orders ON Users.user_id = Orders.user_id JOIN Sales ON Orders.order_id = Sales.order_id GROUP BY user_name HAVING AVG(sale_amount) > 50"
]