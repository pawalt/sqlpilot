[
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_id, issue_description FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, status FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_agent_id, created_at FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT issue_description, status FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE ticket_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE support_agent_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(created_at) FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(created_at) FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(customer_id) FROM customer_support_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT status, COUNT(*) FROM customer_support_tickets GROUP BY status;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_agent_id, AVG(customer_id) FROM customer_support_tickets GROUP BY support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(created_at) FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(created_at) FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE customer_id = 10 AND status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_id, status FROM customer_support_tickets WHERE status IN ('Open', 'Pending');",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, issue_description FROM customer_support_tickets WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(ticket_id) AS total_tickets FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_agent_id, COUNT(*) AS total_tickets_assigned FROM customer_support_tickets GROUP BY support_agent_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customer_support_tickets WHERE customer_id = (SELECT MAX(customer_id) FROM customer_support_tickets);",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, status, COUNT(*) AS ticket_count FROM customer_support_tickets GROUP BY customer_id, status;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, status, COUNT(*) AS ticket_count FROM customer_support_tickets WHERE status <> 'Closed' GROUP BY customer_id, status;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, support_agent_id, AVG(DATEDIFF(CURDATE(), created_at)) AS average_pending_days FROM customer_support_tickets WHERE status = 'Pending' GROUP BY customer_id, support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_tickets FROM customer_support_tickets WHERE status != 'Resolved' AND created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(DATEDIFF(CURDATE(), created_at)) AS average_response_time FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_agent_id, AVG(DATEDIFF(CURDATE(), created_at)) AS average_response_time FROM customer_support_tickets GROUP BY support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(DATEDIFF(CURDATE(), created_at)) AS longest_pending_days FROM customer_support_tickets WHERE status = 'Pending' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(DATEDIFF(CURDATE(), created_at)) AS shortest_pending_days FROM customer_support_tickets WHERE status = 'Pending' GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(DATEDIFF(created_at, COALESCE(TIMESTAMP '2022-01-01 00:00:00', created_at))) AS average_response_time_from_start FROM customer_support_tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, support_agent_id, COUNT(*) AS total_tickets_assigned FROM customer_support_tickets WHERE status = 'Open' GROUP BY customer_id, support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, support_agent_id, MAX(created_at) AS last_ticket_date FROM customer_support_tickets GROUP BY customer_id, support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, support_agent_id, COUNT(*) AS total_tickets_from_agent FROM customer_support_tickets WHERE support_agent_id = 3 GROUP BY customer_id, support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, support_agent_id, MIN(created_at) AS first_ticket_date FROM customer_support_tickets GROUP BY customer_id, support_agent_id;",
  "### TABLEDATA\n\nCREATE TABLE customer_support_tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    issue_description TEXT,\n    support_agent_id INT,\n    status VARCHAR(20),\n    created_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, status, MAX(DATEDIFF(CURDATE(), created_at)) AS longest_pending_days FROM customer_support_tickets WHERE status = 'Pending' GROUP BY customer_id, status;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name FROM customersupport_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description FROM customersupport_tickets WHERE priority > 2;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets WHERE support_agent = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, issue_description FROM customersupport_tickets WHERE priority = 1;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, support_agent FROM customersupport_tickets WHERE priority < 3;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name, issue_description, support_agent FROM customersupport_tickets WHERE priority = 3;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets WHERE customer_name LIKE 'John%';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name, issue_description FROM customersupport_tickets WHERE support_agent = 'Bob' AND priority > 1;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM issue_resolution;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_description FROM issue_resolution;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_description, resolved_at FROM issue_resolution WHERE resolved_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM issue_resolution WHERE resolution_description LIKE '%resolved%';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolved_at FROM issue_resolution WHERE ticket_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM issue_resolution WHERE resolution_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_description FROM issue_resolution WHERE resolution_description LIKE '%solved%' AND resolved_at <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_description, resolved_at FROM issue_resolution WHERE ticket_id IN (SELECT ticket_id FROM customersupport_tickets WHERE priority > 2);",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_description, resolved_at FROM issue_resolution WHERE ticket_id IN (SELECT ticket_id FROM customersupport_tickets WHERE support_agent = 'Alice');",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, support_agent, priority, resolution_description, resolved_at FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets WHERE priority > 2;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, support_agent FROM customersupport_tickets WHERE issue_description LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customersupport_tickets WHERE priority BETWEEN 1 AND 3;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, support_agent, issue_description FROM customersupport_tickets WHERE priority = 5;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name, priority FROM customersupport_tickets WHERE priority < 4 AND priority > 1;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, support_agent, issue_description FROM customersupport_tickets ORDER BY priority DESC;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT AVG(priority) AS avg_priority FROM customersupport_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_tickets FROM customersupport_tickets;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name, issue_description, support_agent FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id ORDER BY resolved_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id WHERE resolved_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets LEFT JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets RIGHT JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets FULL JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id AND issue_resolution.resolution_description LIKE '%solved%';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description, resolved_at FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id AND issue_resolution.resolved_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolutions FROM customersupport_tickets INNER JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(priority) AS avg_priority FROM customersupport_tickets GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolutions FROM customersupport_tickets LEFT JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customersupport_tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_name VARCHAR,\n    issue_description TEXT,\n    support_agent VARCHAR,\n    priority INTEGER\n);\n\n\nCREATE TABLE issue_resolution (\n    resolution_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    resolution_description TEXT,\n    resolved_at TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES customersupport_tickets(ticket_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_resolutions FROM customersupport_tickets RIGHT JOIN issue_resolution ON customersupport_tickets.ticket_id = issue_resolution.ticket_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ticket_comments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, open_date, close_date FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT comment, posted_by, posted_date FROM ticket_comments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email, open_date, close_date FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, status, comment FROM tickets JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, status, comment, posted_by FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM ticket_comments WHERE posted_by = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, close_date FROM tickets WHERE open_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT comment, posted_date FROM ticket_comments WHERE posted_date < '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, open_date FROM tickets ORDER BY open_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT comment, posted_by FROM ticket_comments ORDER BY posted_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM customers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM tickets LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = '123';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers ORDER BY customer_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, open_date, close_date FROM tickets WHERE open_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email, open_date FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, comment FROM ticket_comments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT ticket_id, comment FROM ticket_comments WHERE posted_by = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, comment FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, comment FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id WHERE posted_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, COUNT(ticket_id) AS ticket_count FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, MAX(close_date) AS last_closed_ticket FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id WHERE status = 'Closed' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, AVG(timestampdiff(HOUR, open_date, close_date)) AS avg_ticket_duration FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id WHERE status = 'Closed' GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, comment, posted_date FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id WHERE comment LIKE '%urgent%' AND status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email, open_date, comment, posted_by FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id WHERE ticket_comments.comment LIKE '%resolved%' AND status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id UUID PRIMARY KEY,\n  customer_name STRING,\n  email STRING\n)\n\nCREATE TABLE tickets (\n  ticket_id UUID PRIMARY KEY,\n  customer_id UUID REFERENCES customers(customer_id),\n  open_date TIMESTAMP,\n  close_date TIMESTAMP,\n  status STRING\n)\n\nCREATE TABLE ticket_comments (\n  comment_id UUID PRIMARY KEY,\n  ticket_id UUID REFERENCES tickets(ticket_id),\n  comment TEXT,\n  posted_by STRING,\n  posted_date TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT customer_name, email, open_date, comment, posted_by FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_comments ON tickets.ticket_id = ticket_comments.ticket_id WHERE ticket_comments.posted_by IN ('Alice', 'Bob');",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, issue_description FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, customer_email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_rep_id, support_rep_name FROM support_reps;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT resolution_id, ticket_id, resolution_date FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, resolution_details FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Closed';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE issue_description LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets ORDER BY ticket_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets ORDER BY status, ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) as ticket_count FROM tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, COUNT(*) as ticket_count FROM tickets INNER JOIN customers ON tickets.customer_id = customers.customer_id GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_rep_name, COUNT(*) as resolved_tickets FROM resolutions INNER JOIN support_reps ON resolutions.ticket_id = support_reps.support_rep_id GROUP BY support_rep_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, status, issue_description FROM tickets INNER JOIN customers ON tickets.customer_id = customers.customer_id WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.support_rep_name, COUNT(*) as unresolved_tickets FROM tickets LEFT JOIN support_reps sr ON tickets.support_rep_id = sr.support_rep_id WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sr.support_rep_name, COUNT(*) as resolved_tickets FROM resolutions INNER JOIN support_reps sr ON resolutions.ticket_id = sr.support_rep_id WHERE resolution_date IS NOT NULL GROUP BY sr.support_rep_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_id, issue_description FROM tickets WHERE support_rep_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_rep_name, support_rep_email FROM support_reps;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customers WHERE customer_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE issue_description LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email, issue_description FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, support_rep_name, resolution_details FROM tickets JOIN support_reps ON tickets.support_rep_id = support_reps.support_rep_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id WHERE resolution_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE support_rep_id IN (SELECT support_rep_id FROM support_reps WHERE support_rep_name = 'Alice');",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, issue_description FROM customers INNER JOIN tickets ON customers.customer_id = tickets.customer_id WHERE tickets.status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT ticket_id, customer_name, resolution_details FROM tickets JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id WHERE resolution_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, AVG(ticket_id) FROM tickets GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(ticket_id) AS total_tickets FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_rep_name, MAX(resolution_date) FROM support_reps JOIN tickets ON support_reps.support_rep_id = tickets.support_rep_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id GROUP BY support_rep_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(ticket_id) AS total_tickets FROM tickets GROUP BY customer_id HAVING COUNT(ticket_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT support_rep_name, AVG(ticket_id) FROM support_reps JOIN tickets on support_reps.support_rep_id = tickets.support_rep_id GROUP BY support_rep_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(resolution_id) AS total_resolutions FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, ticket_id FROM tickets UNION ALL SELECT customer_id, resolution_id FROM resolutions;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, total_tickets FROM (SELECT customer_id, COUNT(ticket_id) AS total_tickets FROM tickets GROUP BY customer_id) AS subquery WHERE total_tickets > 3;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_name, resolution_date FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN resolutions ON tickets.ticket_id = resolutions.ticket_id WHERE resolution_date = (SELECT MAX(resolution_date) FROM resolutions WHERE ticket_id = tickets.ticket_id);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id INT PRIMARY KEY,\n    customer_id INT,\n    support_rep_id INT,\n    issue_description TEXT,\n    status VARCHAR(20)\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(100)\n);\n\n\nCREATE TABLE support_reps (\n    support_rep_id INT PRIMARY KEY,\n    support_rep_name VARCHAR(50),\n    support_rep_email VARCHAR(100)\n);\n\n\nCREATE TABLE resolutions (\n    resolution_id INT PRIMARY KEY,\n    ticket_id INT,\n    resolution_details TEXT,\n    resolution_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id WHERE tickets.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT * FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT ticket_id, issue_description, status FROM tickets;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT customer_id, name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agent_id, name, email, department FROM agents;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT department_id, name FROM departments;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT * FROM ticket_responses;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT ticket_id, agent_id, response_text FROM ticket_responses;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t.ticket_id, t.issue_description, a.name AS agent_name FROM tickets t JOIN agents a ON t.customer_id = a.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, t.created_at, tr.response_text FROM customers c JOIN tickets t ON c.customer_id = t.customer_id JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t.issue_description, t.status, tr.response_text, tr.response_time FROM tickets t LEFT JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT a.name AS agent_name, d.name AS department_name FROM agents a JOIN departments d ON a.department = d.department_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t.issue_description, tr.response_text FROM tickets t JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id WHERE t.status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT c.name, COUNT(t.ticket_id) AS total_tickets FROM customers c JOIN tickets t ON c.customer_id = t.customer_id GROUP BY c.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT d.name AS department_name, COUNT(a.agent_id) AS total_agents FROM departments d JOIN agents a ON d.department_id = a.department GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t.issue_description, t.status, tr.response_text, tr.response_time FROM tickets t JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id ORDER BY t.created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, t.issue_description, tr.response_text FROM customers c JOIN tickets t ON c.customer_id = t.customer_id LEFT JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT a.name AS agent_name, d.name AS department_name, tr.response_text FROM agents a JOIN departments d ON a.department = d.department_id JOIN ticket_responses tr ON a.agent_id = tr.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t.ticket_id, t.issue_description, t.status, a.name AS agent_name, tr.response_text FROM tickets t JOIN agents a ON t.customer_id = a.agent_id LEFT JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT c.name AS customer_name, t.created_at, tr.response_text FROM customers c JOIN tickets t ON c.customer_id = t.customer_id LEFT JOIN ticket_responses tr ON t.ticket_id = tr.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT d.name AS department_name, COUNT(a.agent_id) AS total_agents FROM departments d JOIN agents a ON d.manager_id = a.agent_id GROUP BY d.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT * FROM tickets WHERE status = 'Open';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT ticket_id, issue_description, status FROM tickets WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT tickets.*, customers.name AS customer_name FROM tickets JOIN customers ON tickets.customer_id = customers.customer_id WHERE tickets.status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agents.department, COUNT(agents.agent_id) AS agent_count FROM agents GROUP BY agents.department;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT customers.name AS customer_name, COUNT(tickets.ticket_id) AS ticket_count FROM customers LEFT JOIN tickets ON customers.customer_id = tickets.customer_id GROUP BY customers.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT tickets.ticket_id, tickets.issue_description, ticket_responses.response_text AS last_response FROM tickets JOIN ticket_responses ON tickets.ticket_id = ticket_responses.ticket_id WHERE ticket_responses.response_time = (SELECT MAX(response_time) FROM ticket_responses WHERE ticket_responses.ticket_id = tickets.ticket_id);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT t1.ticket_id AS original_ticket_id, t2.ticket_id AS duplicate_ticket_id FROM tickets t1 JOIN tickets t2 ON t1.issue_description = t2.issue_description AND t1.ticket_id <> t2.ticket_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT departments.name, agents.name AS agent_name FROM departments JOIN agents ON departments.manager_id = agents.agent_id;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('day', resolved_at - created_at)) AS avg_resolution_time FROM tickets WHERE status = 'Resolved';",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT customers.name AS customer_name, ARRAY_AGG(tickets.issue_description) AS issues_reported FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id GROUP BY customers.name ORDER BY COUNT(tickets.ticket_id) DESC;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT ticket_id, COUNT(response_id) AS response_count FROM ticket_responses GROUP BY ticket_id HAVING COUNT(response_id) > 3;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT customers.name AS customer_name, COUNT(ticket_responses.response_id) AS response_count FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_responses ON tickets.ticket_id = ticket_responses.ticket_id GROUP BY customers.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agents.name AS agent_name, COUNT(ticket_responses.response_id) AS response_count FROM agents LEFT JOIN ticket_responses ON agents.agent_id = ticket_responses.agent_id GROUP BY agents.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT departments.name, SUM(CASE WHEN tickets.status = 'Open' THEN 1 ELSE 0 END) AS open_tickets, SUM(CASE WHEN tickets.status = 'Resolved' THEN 1 ELSE 0 END) AS resolved_tickets FROM departments LEFT JOIN agents ON departments.manager_id = agents.agent_id LEFT JOIN tickets ON agents.agent_id = tickets.customer_id GROUP BY departments.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT customers.name AS customer_name, AVG(DATE_PART('day', ticket_responses.response_time - tickets.created_at)) AS avg_response_time FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id JOIN ticket_responses ON tickets.ticket_id = ticket_responses.ticket_id GROUP BY customers.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agents.name AS agent_name, COUNT(ticket_responses.response_text) AS response_text_count FROM agents JOIN ticket_responses ON agents.agent_id = ticket_responses.agent_id GROUP BY agents.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT departments.name, AVG(CASE WHEN tickets.status = 'Resolved' THEN DATE_PART('day', tickets.resolved_at - tickets.created_at) ELSE DATE_PART('day', NOW() - tickets.created_at) END) AS avg_resolution_time FROM departments LEFT JOIN agents ON departments.manager_id = agents.agent_id LEFT JOIN tickets ON agents.agent_id = tickets.customer_id GROUP BY departments.name;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT customers.name AS customer_name, COUNT(DISTINCT tickets.ticket_id) AS unique_tickets_count FROM customers JOIN tickets ON customers.customer_id = tickets.customer_id GROUP BY customers.name HAVING COUNT(DISTINCT tickets.ticket_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agent_id, MAX(response_time) - MIN(response_time) AS response_time_range FROM ticket_responses GROUP BY agent_id HAVING MAX(response_time) > MIN(response_time);",
  "### TABLEDATA\n\nCREATE TABLE tickets (\n    ticket_id UUID PRIMARY KEY,\n    customer_id UUID,\n    issue_description TEXT,\n    status VARCHAR(50),\n    created_at TIMESTAMP,\n    resolved_at TIMESTAMP\n)\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    phone_number VARCHAR(20)\n)\n\nCREATE TABLE agents (\n    agent_id UUID PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100),\n    department VARCHAR(50)\n)\n\nCREATE TABLE departments (\n    department_id UUID PRIMARY KEY,\n    name VARCHAR(50),\n    manager_id UUID\n)\n\nCREATE TABLE ticket_responses (\n    response_id UUID PRIMARY KEY,\n    ticket_id UUID,\n    agent_id UUID,\n    response_text TEXT,\n    response_time TIMESTAMP,\n    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),\n    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)\n)\n\n### STATEMENT\n\nSELECT agents.name AS agent_name, AVG(DATE_PART('day', ticket_responses.response_time - tickets.created_at)) AS avg_response_time FROM agents JOIN tickets ON agents.agent_id = tickets.customer_id JOIN ticket_responses ON tickets.ticket_id = ticket_responses.ticket_id GROUP BY agents.name;"
]