[
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (101, 'Alice', 100.50, 50);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (102, 'Bob', 75.25, 30);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (103, 'Charlie', 200.75, 100);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (104, 'David', 150.00, 80);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (105, 'Eve', 50.75, 20);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (106, 'Frank', 300.00, 150);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (107, 'Grace', 80.50, 40);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (108, 'Henry', 125.25, 70);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (109, 'Ivy', 90.75, 45);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (110, 'Jack', 180.00, 90);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (111, 'Karen', 70.25, 35);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (112, 'Lucy', 250.75, 120);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (113, 'Mike', 130.00, 60);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (114, 'Nancy', 40.75, 15);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (115, 'Oliver', 350.00, 180);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (116, 'Peter', 90.50, 50);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (117, 'Quinn', 55.25, 25);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (118, 'Rachel', 200.75, 100);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (119, 'Sam', 140.00, 70);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (120, 'Tina', 60.75, 30);",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (1, 'Alice', 500.50, 100) ON DUPLICATE KEY UPDATE customer_name = 'Alice', total_spent = total_spent + 100, loyalty_points = loyalty_points + 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (2, 'Bob', 300.75, 50) ON DUPLICATE KEY UPDATE customer_name = 'Bob', total_spent = total_spent + 50, loyalty_points = loyalty_points + 5;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (3, 'Charlie', 1000.25, 200) ON DUPLICATE KEY UPDATE customer_name = 'Charlie', total_spent = total_spent + 200, loyalty_points = loyalty_points + 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (4, 'David', 750.00, 150) ON DUPLICATE KEY UPDATE customer_name = 'David', total_spent = total_spent + 150, loyalty_points = loyalty_points + 15;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (5, 'Eve', 1200.30, 250) ON DUPLICATE KEY UPDATE customer_name = 'Eve', total_spent = total_spent + 250, loyalty_points = loyalty_points + 25;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (6, 'Frank', 880.50, 180) ON DUPLICATE KEY UPDATE customer_name = 'Frank', total_spent = total_spent + 180, loyalty_points = loyalty_points + 18;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (7, 'Grace', 600.75, 120) ON DUPLICATE KEY UPDATE customer_name = 'Grace', total_spent = total_spent + 120, loyalty_points = loyalty_points + 12;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (8, 'Henry', 950.25, 220) ON DUPLICATE KEY UPDATE customer_name = 'Henry', total_spent = total_spent + 220, loyalty_points = loyalty_points + 22;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (9, 'Ivy', 1050.30, 270) ON DUPLICATE KEY UPDATE customer_name = 'Ivy', total_spent = total_spent + 270, loyalty_points = loyalty_points + 27;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (10, 'Jack', 700.50, 160) ON DUPLICATE KEY UPDATE customer_name = 'Jack', total_spent = total_spent + 160, loyalty_points = loyalty_points + 16;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (11, 'Kevin', 800.75, 190) ON DUPLICATE KEY UPDATE customer_name = 'Kevin', total_spent = total_spent + 190, loyalty_points = loyalty_points + 19;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (12, 'Lily', 1300.25, 280) ON DUPLICATE KEY UPDATE customer_name = 'Lily', total_spent = total_spent + 280, loyalty_points = loyalty_points + 28;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (13, 'Mike', 950.00, 230) ON DUPLICATE KEY UPDATE customer_name = 'Mike', total_spent = total_spent + 230, loyalty_points = loyalty_points + 23;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (14, 'Nora', 1100.30, 260) ON DUPLICATE KEY UPDATE customer_name = 'Nora', total_spent = total_spent + 260, loyalty_points = loyalty_points + 26;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (15, 'Oliver', 850.50, 200) ON DUPLICATE KEY UPDATE customer_name = 'Oliver', total_spent = total_spent + 200, loyalty_points = loyalty_points + 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (16, 'Pam', 650.75, 140) ON DUPLICATE KEY UPDATE customer_name = 'Pam', total_spent = total_spent + 140, loyalty_points = loyalty_points + 14;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (17, 'Quinn', 1200.25, 250) ON DUPLICATE KEY UPDATE customer_name = 'Quinn', total_spent = total_spent + 250, loyalty_points = loyalty_points + 25;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (18, 'Ryan', 800.50, 190) ON DUPLICATE KEY UPDATE customer_name = 'Ryan', total_spent = total_spent + 190, loyalty_points = loyalty_points + 19;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (19, 'Sara', 950.75, 230) ON DUPLICATE KEY UPDATE customer_name = 'Sara', total_spent = total_spent + 230, loyalty_points = loyalty_points + 23;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(50),\n  total_spent DECIMAL(10, 2),\n  loyalty_points INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, total_spent, loyalty_points) VALUES (20, 'Tom', 1400.30, 300) ON DUPLICATE KEY UPDATE customer_name = 'Tom', total_spent = total_spent + 300, loyalty_points = loyalty_points + 30;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (1, 'Alice', 100) ON DUPLICATE KEY UPDATE customer_name='Alice', loyalty_points=100;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (2, 'Bob', 50) ON DUPLICATE KEY UPDATE customer_name='Bob', loyalty_points=50;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (3, 'Charlie', 200) ON DUPLICATE KEY UPDATE customer_name='Charlie', loyalty_points=200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (4, 'David', 150) ON DUPLICATE KEY UPDATE customer_name='David', loyalty_points=150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (5, 'Eve', 80) ON DUPLICATE KEY UPDATE customer_name='Eve', loyalty_points=80;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (1, 'Discount Coupon', 50) ON DUPLICATE KEY UPDATE reward_name='Discount Coupon', required_points=50;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (2, 'Free Product', 100) ON DUPLICATE KEY UPDATE reward_name='Free Product', required_points=100;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (3, 'Cashback', 200) ON DUPLICATE KEY UPDATE reward_name='Cashback', required_points=200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (4, 'Gift Card', 150) ON DUPLICATE KEY UPDATE reward_name='Gift Card', required_points=150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (5, 'Exclusive Access', 80) ON DUPLICATE KEY UPDATE reward_name='Exclusive Access', required_points=80;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (6, 'Fiona', 120) ON DUPLICATE KEY UPDATE customer_name='Fiona', loyalty_points=120;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (7, 'George', 90) ON DUPLICATE KEY UPDATE customer_name='George', loyalty_points=90;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (8, 'Hannah', 180) ON DUPLICATE KEY UPDATE customer_name='Hannah', loyalty_points=180;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (9, 'Ian', 70) ON DUPLICATE KEY UPDATE customer_name='Ian', loyalty_points=70;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (10, 'Julia', 220) ON DUPLICATE KEY UPDATE customer_name='Julia', loyalty_points=220;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (6, 'Special Event Invitation', 120) ON DUPLICATE KEY UPDATE reward_name='Special Event Invitation', required_points=120;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (7, 'Personalized Gift', 90) ON DUPLICATE KEY UPDATE reward_name='Personalized Gift', required_points=90;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (8, 'Exclusive Voucher', 180) ON DUPLICATE KEY UPDATE reward_name='Exclusive Voucher', required_points=180;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (9, 'Special Discount', 70) ON DUPLICATE KEY UPDATE reward_name='Special Discount', required_points=70;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (10, 'VIP Treatment', 220) ON DUPLICATE KEY UPDATE reward_name='VIP Treatment', required_points=220;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (1, 'Alice', 100) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Alice', loyalty_points = 200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (2, 'Bob', 50) ON CONFLICT (customer_id) DO UPDATE SET loyalty_points = loyalty_points + 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (3, 'Charlie', 150) ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (1, 'Discount Coupon', 50) ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Discount Coupon', required_points = 40;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (2, 'Gift Voucher', 100) ON CONFLICT (reward_id) DO UPDATE SET required_points = required_points - 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (3, 'Free Product', 200) ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (4, 'David', 75) ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, loyalty_points = 150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (5, 'Eve', 125) ON CONFLICT (customer_id) DO UPDATE SET loyalty_points = loyalty_points + 25;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (6, 'Frank', 200) ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (4, 'Special Offer', 75) ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Special Offer';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (5, 'Membership Upgrade', 150) ON CONFLICT (reward_id) DO UPDATE SET required_points = 140;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (6, 'Free Shipping', 50) ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (7, 'Grace', 90) ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (8, 'Henry', 110) ON CONFLICT (customer_id) DO UPDATE SET loyalty_points = loyalty_points - 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (9, 'Iris', 180) ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (7, 'Birthday Gift', 40) ON CONFLICT (reward_id) DO UPDATE SET required_points = required_points + 5;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (8, 'Holiday Package', 300) ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Holiday Package', required_points = 280;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (9, 'Cashback Bonus', 150) ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (10, 'Jack', 95) ON CONFLICT (customer_id) DO UPDATE SET customer_name = EXCLUDED.customer_name, loyalty_points = 120;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (11, 'Kelly', 130) ON CONFLICT (customer_id) DO UPDATE SET loyalty_points = loyalty_points - 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program_customers (customer_id, customer_name, loyalty_points) VALUES (12, 'Luis', 75) ON CONFLICT (customer_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (10, 'Early Access Pass', 80) ON CONFLICT (reward_id) DO UPDATE SET required_points = 70;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (11, 'Exclusive Event Invitation', 120) ON CONFLICT (reward_id) DO UPDATE SET reward_name = 'Exclusive Event Invitation';",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program_customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255) NOT NULL,\n  loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_rewards (\n  reward_id INT PRIMARY KEY,\n  reward_name VARCHAR(255) NOT NULL,\n  required_points INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_rewards (reward_id, reward_name, required_points) VALUES (12, 'Gift Card', 50) ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (1, 'John Doe', 100) ON DUPLICATE KEY UPDATE loyalty_points = 100;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (2, 'Jane Smith', 150) ON DUPLICATE KEY UPDATE loyalty_points = 150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (3, 'Alice Johnson', 200) ON DUPLICATE KEY UPDATE loyalty_points = 200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (4, 'Bob Williams', 120) ON DUPLICATE KEY UPDATE loyalty_points = 120;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (5, 'Emily Brown', 180) ON DUPLICATE KEY UPDATE loyalty_points = 180;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (1, 1, 50.25, '2022-01-15') ON DUPLICATE KEY UPDATE purchase_amount = 50.25;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (2, 2, 75.50, '2022-02-20') ON DUPLICATE KEY UPDATE purchase_amount = 75.50;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (3, 3, 100.00, '2022-03-25') ON DUPLICATE KEY UPDATE purchase_amount = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (4, 4, 80.75, '2022-04-30') ON DUPLICATE KEY UPDATE purchase_amount = 80.75;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (5, 5, 120.90, '2022-05-05') ON DUPLICATE KEY UPDATE purchase_amount = 120.90;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (1, 1, 'Discount Coupon', 50) ON DUPLICATE KEY UPDATE reward_points_required = 50;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (2, 2, 'Free Product', 75) ON DUPLICATE KEY UPDATE reward_points_required = 75;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (3, 3, 'Gift Card', 100) ON DUPLICATE KEY UPDATE reward_points_required = 100;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (4, 4, 'Bonus Points', 80) ON DUPLICATE KEY UPDATE reward_points_required = 80;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (5, 5, 'Special Offer', 120) ON DUPLICATE KEY UPDATE reward_points_required = 120;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (1, 'Alice', 100) ON DUPLICATE KEY UPDATE loyalty_points = loyalty_points + 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (2, 'Bob', 150) ON DUPLICATE KEY UPDATE loyalty_points = loyalty_points + 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (3, 'Charlie', 200) ON DUPLICATE KEY UPDATE loyalty_points = loyalty_points + 30;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program (customer_id, customer_name, loyalty_points) VALUES (4, 'David', 250) ON DUPLICATE KEY UPDATE loyalty_points = loyalty_points + 40;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (1, 1, 50.00, '2022-06-15') ON DUPLICATE KEY UPDATE purchase_amount = purchase_amount + 15.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (2, 2, 75.00, '2022-06-16') ON DUPLICATE KEY UPDATE purchase_amount = purchase_amount + 20.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (3, 3, 100.00, '2022-06-17') ON DUPLICATE KEY UPDATE purchase_amount = purchase_amount + 25.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO purchases (purchase_id, customer_id, purchase_amount, purchase_date) VALUES (4, 4, 125.00, '2022-06-18') ON DUPLICATE KEY UPDATE purchase_amount = purchase_amount + 30.00;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (1, 1, 'Free Coffee', 50) ON DUPLICATE KEY UPDATE reward_points_required = reward_points_required + 10;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (2, 2, 'Discount Voucher', 75) ON DUPLICATE KEY UPDATE reward_points_required = reward_points_required + 15;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (3, 3, 'Gift Card', 100) ON DUPLICATE KEY UPDATE reward_points_required = reward_points_required + 20;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    loyalty_points INT\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    customer_id INT,\n    purchase_amount DECIMAL,\n    purchase_date DATE\n);\n\nCREATE TABLE rewards (\n    reward_id INT PRIMARY KEY,\n    customer_id INT,\n    reward_description VARCHAR(100),\n    reward_points_required INT\n);\n\n### STATEMENT\n\nUPSERT INTO rewards (reward_id, customer_id, reward_description, reward_points_required) VALUES (4, 4, 'Bonus Points', 125) ON DUPLICATE KEY UPDATE reward_points_required = reward_points_required + 25;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('c7f21e05-9354-49fa-8237-5019ccb97b4a', 'John Doe', 100) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', loyalty_points = 100;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('d5499c53-4b2d-4d33-ad21-94114a0a0ad3', 'Alice Smith', 200) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Alice Smith', loyalty_points = 200;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('e01fc90e-7f32-4863-b270-7c19cdff1e3a', 'Bob Brown', 150) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Bob Brown', loyalty_points = 150;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('f6a6ed8d-239a-45d4-8e34-79bd4374a9a0', 'Mary Johnson', 300) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Mary Johnson', loyalty_points = 300;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('bd3b12a9-bd62-4f99-8422-4191e4cf315c', 'Sarah Wilson', 250) ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'Sarah Wilson', loyalty_points = 250;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('38e0f63e-dad4-4bbe-80f9-c439c2e1c08f', 'c7f21e05-9354-49fa-8237-5019ccb97b4a', 50.25, '2022-07-15 09:30:00') ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('3774657f-6c73-4caa-8674-2c7b0e5df655', 'd5499c53-4b2d-4d33-ad21-94114a0a0ad3', 75.50, '2022-08-05 14:45:00') ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('eb4ed12f-02f8-46a4-94b5-07c032d4c980', 'e01fc90e-7f32-4863-b270-7c19cdff1e3a', 100.75, '2022-09-20 11:00:00') ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('ac0a419f-7412-4dc1-bfd7-4c894dacef99', 'f6a6ed8d-239a-45d4-8e34-79bd4374a9a0', 120.00, '2022-10-10 18:30:00') ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('a488b465-98ee-4edb-b297-0c17cfcf8e0a', 'bd3b12a9-bd62-4f99-8422-4191e4cf315c', 90.50, '2022-11-25 16:15:00') ON CONFLICT (order_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.rewards (reward_id, reward_name, loyalty_points_required, description) VALUES ('37719796-446e-4e6d-a3ec-6e21db27014d', 'Discount Voucher', 50, 'Get a 20% discount on your next purchase.') ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.rewards (reward_id, reward_name, loyalty_points_required, description) VALUES ('06c4f1ff-0cd7-464f-9c35-02938388259f', 'Free Item', 100, 'Choose a free item from our exclusive collection.') ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.rewards (reward_id, reward_name, loyalty_points_required, description) VALUES ('d5496a06-c39d-4274-8714-e909f4b8ab96', 'Cash Back', 75, 'Get cash back on your next purchase.') ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.rewards (reward_id, reward_name, loyalty_points_required, description) VALUES ('623c4d11-8da1-42cc-bd78-7d8b9f93a80d', 'Gift Card', 150, 'Receive a gift card worth $50.') ON CONFLICT (reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('c7f21e05-9354-49fa-8237-5019ccb97b4a', '37719796-446e-4e6d-a3ec-6e21db27014d', false, '2022-07-20') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('d5499c53-4b2d-4d33-ad21-94114a0a0ad3', '06c4f1ff-0cd7-464f-9c35-02938388259f', true, '2022-08-10') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('e01fc90e-7f32-4863-b270-7c19cdff1e3a', 'd5496a06-c39d-4274-8714-e909f4b8ab96', false, '2022-09-25') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('f6a6ed8d-239a-45d4-8e34-79bd4374a9a0', '623c4d11-8da1-42cc-bd78-7d8b9f93a80d', false, '2022-10-15') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('bd3b12a9-bd62-4f99-8422-4191e4cf315c', '623c4d11-8da1-42cc-bd78-7d8b9f93a80d', false, '2022-11-30') ON CONFLICT DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program.customers (customer_id, customer_name, loyalty_points) VALUES ('7b5a34d1-8d6c-4b6d-a931-5ed83b876b13', 'John Doe', 100) ON CONFLICT (customer_id) DO UPDATE SET loyalty_points = 100",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program.orders (order_id, customer_id, order_total, order_date) VALUES ('c9c5e622-5237-4911-a563-46fd86f3e6a3', '7b5a34d1-8d6c-4b6d-a931-5ed83b876b13', 50.00, '2022-01-15') ON CONFLICT (order_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program.rewards (reward_id, reward_name, loyalty_points_required, description) VALUES ('2f8fcee9-ec4d-4599-b8d5-96441c8f643b', 'Free Coffee', 50, 'Redeemable for a free coffee drink') ON CONFLICT (reward_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE loyalty_program.customers (\n    customer_id UUID PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE loyalty_program.orders (\n    order_id UUID PRIMARY KEY,\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    order_total DECIMAL(10,2) NOT NULL,\n    order_date TIMESTAMP\n);\n\nCREATE TABLE loyalty_program.rewards (\n    reward_id UUID PRIMARY KEY,\n    reward_name VARCHAR(255) NOT NULL,\n    loyalty_points_required INT NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE loyalty_program.customer_rewards (\n    customer_id UUID REFERENCES loyalty_program.customers(customer_id),\n    reward_id UUID REFERENCES loyalty_program.rewards(reward_id),\n    redeemed BOOLEAN DEFAULT FALSE,\n    received_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_program.customer_rewards (customer_id, reward_id, redeemed, received_date) VALUES ('7b5a34d1-8d6c-4b6d-a931-5ed83b876b13', '2f8fcee9-ec4d-4599-b8d5-96441c8f643b', TRUE, '2022-01-18') ON CONFLICT (customer_id, reward_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers(customer_id, customer_name, loyalty_points) VALUES (1, 'Alice', 100) ON CONFLICT(customer_id) DO UPDATE SET customer_name = excluded.customer_name, loyalty_points = excluded.loyalty_points;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers(customer_id, customer_name, loyalty_points) VALUES (2, 'Bob', 150) ON CONFLICT(customer_id) DO UPDATE SET customer_name = excluded.customer_name, loyalty_points = excluded.loyalty_points;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers(customer_id, customer_name, loyalty_points) VALUES (3, 'Charlie', 200) ON CONFLICT(customer_id) DO UPDATE SET customer_name = excluded.customer_name, loyalty_points = excluded.loyalty_points;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers(customer_id, customer_name, loyalty_points) VALUES (4, 'David', 50) ON CONFLICT(customer_id) DO UPDATE SET customer_name = excluded.customer_name, loyalty_points = excluded.loyalty_points;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers(customer_id, customer_name, loyalty_points) VALUES (5, 'Eve', 300) ON CONFLICT(customer_id) DO UPDATE SET customer_name = excluded.customer_name, loyalty_points = excluded.loyalty_points;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases(purchase_id, customer_id, purchase_date, total_amount) VALUES (1, 1, '2023-10-02', 50.0) ON CONFLICT(purchase_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases(purchase_id, customer_id, purchase_date, total_amount) VALUES (2, 2, '2023-10-03', 75.0) ON CONFLICT(purchase_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases(purchase_id, customer_id, purchase_date, total_amount) VALUES (3, 3, '2023-10-04', 100.0) ON CONFLICT(purchase_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases(purchase_id, customer_id, purchase_date, total_amount) VALUES (4, 4, '2023-10-05', 25.0) ON CONFLICT(purchase_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases(purchase_id, customer_id, purchase_date, total_amount) VALUES (5, 5, '2023-10-06', 150.0) ON CONFLICT(purchase_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards(reward_id, reward_name, point_cost, expiration_date) VALUES (1, 'Discount Coupon', 50, '2023-12-31') ON CONFLICT(reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards(reward_id, reward_name, point_cost, expiration_date) VALUES (2, 'Free Shipping', 100, '2023-12-31') ON CONFLICT(reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards(reward_id, reward_name, point_cost, expiration_date) VALUES (3, 'Cashback Bonus', 200, '2023-12-31') ON CONFLICT(reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards(reward_id, reward_name, point_cost, expiration_date) VALUES (4, 'Gift Voucher', 75, '2023-12-31') ON CONFLICT(reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards(reward_id, reward_name, point_cost, expiration_date) VALUES (5, 'Special Offer', 150, '2023-12-31') ON CONFLICT(reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards(customer_id, reward_id, claimed_date) VALUES (1, 1, '2023-10-08') ON CONFLICT(customer_id, reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards(customer_id, reward_id, claimed_date) VALUES (2, 2, '2023-10-09') ON CONFLICT(customer_id, reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards(customer_id, reward_id, claimed_date) VALUES (3, 3, '2023-10-10') ON CONFLICT(customer_id, reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards(customer_id, reward_id, claimed_date) VALUES (4, 4, '2023-10-11') ON CONFLICT(customer_id, reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards(customer_id, reward_id, claimed_date) VALUES (5, 5, '2023-10-12') ON CONFLICT(customer_id, reward_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers(tier_id, tier_name, point_threshold) VALUES (1, 'Silver', 100) ON CONFLICT(tier_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers(tier_id, tier_name, point_threshold) VALUES (2, 'Gold', 200) ON CONFLICT(tier_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers(tier_id, tier_name, point_threshold) VALUES (3, 'Platinum', 300) ON CONFLICT(tier_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers(tier_id, tier_name, point_threshold) VALUES (4, 'Diamond', 400) ON CONFLICT(tier_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers(tier_id, tier_name, point_threshold) VALUES (5, 'Elite', 500) ON CONFLICT(tier_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, loyalty_points) VALUES (1, 'John Doe', 100) ON DUPLICATE KEY UPDATE customer_name = 'John Doe', loyalty_points = 100;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_date, total_amount) VALUES (1, 1, '2022-10-10', 50.00) ON DUPLICATE KEY UPDATE customer_id = 1, purchase_date = '2022-10-10', total_amount = 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, point_cost, expiration_date) VALUES (1, 'Discount', 50, '2023-01-01') ON DUPLICATE KEY UPDATE reward_name = 'Discount', point_cost = 50, expiration_date = '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards (customer_id, reward_id, claimed_date) VALUES (1, 1, '2022-09-15') ON DUPLICATE KEY UPDATE claimed_date = '2022-09-15';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers (tier_id, tier_name, point_threshold) VALUES (1, 'Silver', 1000) ON DUPLICATE KEY UPDATE tier_name = 'Silver', point_threshold = 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, loyalty_points) VALUES (2, 'Jane Smith', 200) ON DUPLICATE KEY UPDATE customer_name = 'Jane Smith', loyalty_points = 200;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_date, total_amount) VALUES (2, 2, '2022-10-11', 75.00) ON DUPLICATE KEY UPDATE customer_id = 2, purchase_date = '2022-10-11', total_amount = 75.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, point_cost, expiration_date) VALUES (2, 'Free Shipping', 75, '2023-02-01') ON DUPLICATE KEY UPDATE reward_name = 'Free Shipping', point_cost = 75, expiration_date = '2023-02-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards (customer_id, reward_id, claimed_date) VALUES (2, 2, '2022-09-20') ON DUPLICATE KEY UPDATE claimed_date = '2022-09-20';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers (tier_id, tier_name, point_threshold) VALUES (2, 'Gold', 2000) ON DUPLICATE KEY UPDATE tier_name = 'Gold', point_threshold = 2000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, loyalty_points) VALUES (3, 'Alice Johnson', 150) ON DUPLICATE KEY UPDATE customer_name = 'Alice Johnson', loyalty_points = 150;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_date, total_amount) VALUES (3, 3, '2022-10-12', 100.00) ON DUPLICATE KEY UPDATE customer_id = 3, purchase_date = '2022-10-12', total_amount = 100.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, point_cost, expiration_date) VALUES (3, 'Gift Card', 100, '2023-03-01') ON DUPLICATE KEY UPDATE reward_name = 'Gift Card', point_cost = 100, expiration_date = '2023-03-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards (customer_id, reward_id, claimed_date) VALUES (3, 3, '2022-09-25') ON DUPLICATE KEY UPDATE claimed_date = '2022-09-25';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers (tier_id, tier_name, point_threshold) VALUES (3, 'Platinum', 3000) ON DUPLICATE KEY UPDATE tier_name = 'Platinum', point_threshold = 3000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customers (customer_id, customer_name, loyalty_points) VALUES (4, 'Michael Brown', 120) ON DUPLICATE KEY UPDATE customer_name = 'Michael Brown', loyalty_points = 120;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO purchases (purchase_id, customer_id, purchase_date, total_amount) VALUES (4, 4, '2022-10-13', 80.00) ON DUPLICATE KEY UPDATE customer_id = 4, purchase_date = '2022-10-13', total_amount = 80.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO rewards (reward_id, reward_name, point_cost, expiration_date) VALUES (4, 'Bonus Points', 80, '2023-04-01') ON DUPLICATE KEY UPDATE reward_name = 'Bonus Points', point_cost = 80, expiration_date = '2023-04-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO customer_rewards (customer_id, reward_id, claimed_date) VALUES (4, 4, '2022-09-30') ON DUPLICATE KEY UPDATE claimed_date = '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   customer_name VARCHAR(50) NOT NULL,\n   loyalty_points INT DEFAULT 0\n);\n\nCREATE TABLE purchases (\n   purchase_id INT PRIMARY KEY,\n   customer_id INT,\n   purchase_date DATE,\n   total_amount FLOAT,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE rewards (\n   reward_id INT PRIMARY KEY,\n   reward_name VARCHAR(50) NOT NULL,\n   point_cost INT,\n   expiration_date DATE\n);\n\nCREATE TABLE customer_rewards (\n   customer_id INT,\n   reward_id INT,\n   claimed_date DATE,\n   FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n   FOREIGN KEY (reward_id) REFERENCES rewards(reward_id),\n   PRIMARY KEY (customer_id, reward_id)\n);\n\nCREATE TABLE loyalty_tiers (\n   tier_id INT PRIMARY KEY,\n   tier_name VARCHAR(50) NOT NULL,\n   point_threshold INT\n);\n\n### STATEMENT\n\nINSERT INTO loyalty_tiers (tier_id, tier_name, point_threshold) VALUES (4, 'Diamond', 4000) ON DUPLICATE KEY UPDATE tier_name = 'Diamond', point_threshold = 4000;"
]