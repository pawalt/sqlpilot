<t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>upsert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '234-567-8901')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>upsert into customers (customer_id, customer_name, email, phone_number) values (2, 'jane smith', 'jane.smith@example.com', '234-567-8901')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>UPSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com', '345-678-9012')</stat><divider><t>CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15) );</t><stat>upsert into customers (customer_id, customer_name, email, phone_number) values (3, 'alice johnson', 'alice.johnson@example.com', '345-678-9012')</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (1, 'John Doe', 'john.doe@example.com', '123-456-7890') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (1, 'john doe', 'john.doe@example.com', '123-456-7890') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (2, 'jane smith', 'jane.smith@example.com', '987-654-3210') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '987-654-3210') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (2, 'jane smith', 'jane.smith@example.com', '987-654-3210') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (3, 'Alice Brown', 'alice.brown@example.com', '555-123-4567') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (3, 'alice brown', 'alice.brown@example.com', '555-123-4567') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>UPSERT INTO customers (customer_id, name, email, phone_number) VALUES (3, 'Alice Brown', 'alice.brown@example.com', '555-123-4567') ON DUPLICATE KEY UPDATE name = VALUES(name), email = VALUES(email), phone_number = VALUES(phone_number);</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15));</t><stat>upsert into customers (customer_id, name, email, phone_number) values (3, 'alice brown', 'alice.brown@example.com', '555-123-4567') on duplicate key update name = values(name), email = values(email), phone_number = values(phone_number);</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Customers (customer_id, customer_name, email, phone_number, address) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Main Street') ON CONFLICT (customer_id) DO UPDATE SET customer_name = 'John Doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 Main Street';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into customers (customer_id, customer_name, email, phone_number, address) values (1, 'john doe', 'john.doe@example.com', '1234567890', '123 main street') on conflict (customer_id) do update set customer_name = 'john doe', email = 'john.doe@example.com', phone_number = '1234567890', address = '123 main street';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Orders (order_id, customer_id, order_date, total_amount, status) VALUES (1, 1, '2022-01-01', 100.00, 'Pending') ON CONFLICT (order_id) DO UPDATE SET customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'Pending';</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into orders (order_id, customer_id, order_date, total_amount, status) values (1, 1, '2022-01-01', 100.00, 'pending') on conflict (order_id) do update set customer_id = 1, order_date = '2022-01-01', total_amount = 100.00, status = 'pending';</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>UPSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES (1, 'Product A', 50.00, 100) ON CONFLICT (product_id) DO UPDATE SET product_name = 'Product A', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(8, 2), stock_quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(20), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(15), address VARCHAR(100))</t><stat>upsert into products (product_id, product_name, price, stock_quantity) values (1, 'product a', 50.00, 100) on conflict (product_id) do update set product_name = 'product a', price = 50.00, stock_quantity = 100;</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890') ON CONFLICT (customer_id) DO UPDATE SET customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into customers (customer_id, customer_name, email, phone_number) values (1, 'john doe', 'johndoe@example.com', '123-456-7890') on conflict (customer_id) do update set customer_name = excluded.customer_name, email = excluded.email, phone_number = excluded.phone_number</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Products (product_id, product_name, price, quantity) VALUES (1, 'Laptop', 1000.00, 10) ON CONFLICT (product_id) DO UPDATE SET product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into products (product_id, product_name, price, quantity) values (1, 'laptop', 1000.00, 10) on conflict (product_id) do update set product_name = excluded.product_name, price = excluded.price, quantity = excluded.quantity</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity, total_price) VALUES (1, 1, 1, '2022-01-01', 2, 2000.00) ON CONFLICT (order_id) DO UPDATE SET customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE SalesTeam (team_id INT PRIMARY KEY, team_name VARCHAR(255), leader_name VARCHAR(255), phone_number VARCHAR(15))

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, total_price DECIMAL(10, 2))

CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT)

CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(15))</t><stat>insert into orders (order_id, customer_id, product_id, order_date, quantity, total_price) values (1, 1, 1, '2022-01-01', 2, 2000.00) on conflict (order_id) do update set customer_id = excluded.customer_id, product_id = excluded.product_id, order_date = excluded.order_date, quantity = excluded.quantity, total_price = excluded.total_price</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO customers (customer_id, customer_name, customer_email) VALUES (1, 'John Doe', 'john.doe@example.com') ON DUPLICATE KEY UPDATE customer_name = 'John Doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into customers (customer_id, customer_name, customer_email) values (1, 'john doe', 'john.doe@example.com') on duplicate key update customer_name = 'john doe', customer_email = 'john.doe@example.com';</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO orders (order_id, order_date, customer_id) VALUES (1, '2022-01-15', 1) ON DUPLICATE KEY UPDATE order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into orders (order_id, order_date, customer_id) values (1, '2022-01-15', 1) on duplicate key update order_date = '2022-01-15', customer_id = 1;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>UPSERT INTO products (product_id, product_name, product_price) VALUES (1, 'Product A', 10.99) ON DUPLICATE KEY UPDATE product_name = 'Product A', product_price = 10.99;</stat><divider><t>CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(50), employee_department VARCHAR(50))

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id))

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_price DECIMAL(10, 2))

CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id))

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), customer_email VARCHAR(50))</t><stat>upsert into products (product_id, product_name, product_price) values (1, 'product a', 10.99) on duplicate key update product_name = 'product a', product_price = 10.99;</stat>