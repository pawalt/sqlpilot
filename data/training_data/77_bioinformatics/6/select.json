[
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM gene_ontology WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM gene_ontology WHERE go_category = 'biological';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT go_term FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_category FROM gene_ontology WHERE go_term = 'cellular process';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name FROM gene_ontology WHERE gene_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM gene_ontology WHERE go_category LIKE 'molecular%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT gene_name) FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, go_term, go_category FROM gene_ontology WHERE gene_id BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_definition FROM gene_ontology WHERE go_category = 'cellular';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM gene_ontology WHERE go_definition IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name FROM gene_ontology WHERE go_category = 'molecular' AND go_term = 'cytoplasm';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id FROM gene_ontology WHERE go_term IN ('metabolic process', 'cell differentiation');",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT go_definition FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM gene_ontology WHERE gene_id = 5 OR gene_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, go_definition FROM gene_ontology WHERE go_category = 'biological' ORDER BY gene_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM gene_ontology WHERE gene_name LIKE '%kinase%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT go_category, COUNT(*) FROM gene_ontology GROUP BY go_category;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_ontology WHERE go_category = 'biological' AND go_term = 'cellular process';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_ontology WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM gene_ontology WHERE go_term LIKE '%cellular%' ORDER BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT gene_name, go_term, go_category FROM gene_ontology WHERE go_category = 'cellular component';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_genes FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_ontology WHERE gene_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term, go_definition FROM gene_ontology WHERE gene_name LIKE 'A%' AND go_term NOT LIKE '%process%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_ontology WHERE go_category = 'biological process' AND go_term LIKE '%metabolism%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, go_term FROM gene_ontology WHERE go_term LIKE '%signaling%' OR go_term LIKE '%regulation%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM gene_ontology WHERE go_category IN ('cellular component', 'molecular function') ORDER BY go_category DESC;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT gene_id, go_category FROM gene_ontology WHERE gene_name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT gene_name) AS total_genes_with_names FROM gene_ontology;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_ontology WHERE go_term LIKE '%process%' LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term, go_definition FROM gene_ontology WHERE go_category = 'biological process' ORDER BY gene_name, go_term;",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, go_term, go_definition FROM gene_ontology WHERE go_term LIKE '%transport%' AND go_category = 'cellular component';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_definition FROM gene_ontology WHERE gene_id > 100 AND gene_name LIKE '%protein%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_ontology WHERE gene_name IN ('ABC', 'XYZ') AND go_term LIKE '%function%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_ontology WHERE go_definition IS NOT NULL AND go_category LIKE '%component%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term, go_definition FROM gene_ontology WHERE gene_name = 'XYZ' AND go_term = 'metabolism' AND go_definition LIKE '%chemical%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_ontology WHERE go_definition LIKE '%biological%' OR go_definition LIKE '%molecular%';",
  "### TABLEDATA\n\nCREATE TABLE gene_ontology (\n  gene_id INT,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255),\n  go_definition TEXT,\n  go_category VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_category FROM gene_ontology WHERE go_category IN ('cellular component', 'molecular function') AND go_term NOT LIKE '%process%';",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT gene_name FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT go_id, term_name FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT term_name FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT term_name, definition FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT go_id, term_name, definition FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data WHERE gene_name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data ORDER BY gene_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data ORDER BY go_term ASC;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data ORDER BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data LIMIT 5 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data WHERE gene_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data WHERE go_term LIKE '%cell%';",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_term, definition FROM gene_data LEFT JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_data WHERE gene_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_name, term_name FROM gene_data, go_terms WHERE gene_data.gene_id = go_terms.go_id;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT gene_name FROM gene_data;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, term_name FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name WHERE gene_id > 50;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, term_name FROM gene_data AS gd JOIN go_terms AS gt ON gd.go_term = gt.term_name WHERE gt.go_id IN (SELECT go_id FROM go_terms WHERE term_name = 'cellular process');",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, COUNT(*) AS total FROM gene_data GROUP BY gene_id HAVING total > 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, definition FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name WHERE go_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_data WHERE gene_name LIKE '%ABC%';",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT term_name, COUNT(gene_id) AS gene_count FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name GROUP BY term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, go_id FROM gene_data CROSS JOIN go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_name, definition FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name ORDER BY gene_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM gene_data WHERE gene_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, definition FROM gene_data LEFT JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, term_name FROM gene_data FULL OUTER JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, term_name FROM gene_data INNER JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, gene_name, term_name FROM gene_data LEFT OUTER JOIN go_terms ON gene_data.go_term = go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT term_name FROM go_terms WHERE term_name <> 'biological process';",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, term_name FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name UNION SELECT gene_id, term_name FROM gene_data JOIN go_terms ON gene_data.go_term <> go_terms.term_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_data (\n  gene_id INT PRIMARY KEY,\n  gene_name VARCHAR(255),\n  go_term VARCHAR(255)\n);\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  term_name VARCHAR(255),\n  definition TEXT\n);\n\n### STATEMENT\n\nSELECT gene_id, term_name FROM gene_data JOIN go_terms ON gene_data.go_term = go_terms.term_name ORDER BY gene_id DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol, go_term FROM gene_annotations;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT go_id, go_name FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM go_terms;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, go_id FROM gene_go_mapping;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_id, gene_annotations.gene_symbol, go_terms.go_name FROM gene_annotations JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_symbol, go_terms.go_description FROM gene_annotations JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, COUNT(*) AS annotation_count FROM gene_annotations GROUP BY gene_id;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, COUNT(*) AS annotation_count FROM gene_annotations GROUP BY gene_symbol;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT go_name, COUNT(*) AS gene_count FROM go_terms INNER JOIN gene_go_mapping ON go_terms.go_id = gene_go_mapping.go_id GROUP BY go_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_symbol, go_terms.go_name, COUNT(*) AS gene_count FROM gene_annotations JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id GROUP BY gene_annotations.gene_symbol, go_terms.go_name;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE gene_symbol = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM go_terms WHERE go_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM go_terms WHERE go_name = 'xyz';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_go_mapping WHERE gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_go_mapping WHERE go_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_id, gene_annotations.gene_symbol, go_terms.go_description FROM gene_annotations JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE gene_annotations.gene_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_symbol, go_terms.go_name FROM gene_annotations JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE gene_annotations.gene_symbol = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations WHERE gene_symbol = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE gene_id > 100 AND go_term = 'XYZ';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, go_term FROM gene_annotations INNER JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id WHERE go_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_id, gene_annotations.gene_symbol, go_terms.go_name FROM gene_annotations INNER JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_annotations.gene_symbol, go_terms.go_description FROM gene_annotations INNER JOIN gene_go_mapping ON gene_annotations.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE gene_annotations.gene_symbol LIKE '%A%';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol, go_term FROM gene_annotations WHERE annotation_desc LIKE '%protein%';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations WHERE gene_id IN (SELECT gene_id FROM gene_go_mapping WHERE go_id = 3);",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations WHERE gene_id NOT IN (SELECT gene_id FROM gene_go_mapping WHERE go_id = 3);",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT gene_symbol FROM gene_annotations;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, COUNT(*) AS gene_count FROM gene_annotations GROUP BY gene_symbol;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT go_id, COUNT(*) AS go_count FROM gene_go_mapping GROUP BY go_id HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations ORDER BY gene_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations WHERE gene_id < 50 ORDER BY gene_id ASC, gene_symbol DESC;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT AVG(gene_id) AS avg_gene_id, AVG(go_id) AS avg_go_id FROM gene_go_mapping;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_symbol, go_term FROM gene_annotations WHERE go_term IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_symbol FROM gene_annotations WHERE gene_symbol LIKE 'T%' OR gene_symbol LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE annotation_desc LIKE '%function%' OR annotation_desc LIKE '%process%';",
  "### TABLEDATA\n\nCREATE TABLE gene_annotations (\n  gene_id INT PRIMARY KEY,\n  gene_symbol VARCHAR(255),\n  go_term VARCHAR(255),\n  annotation_desc TEXT\n)\n\nCREATE TABLE go_terms (\n  go_id INT PRIMARY KEY,\n  go_name VARCHAR(255),\n  go_description TEXT\n)\n\nCREATE TABLE gene_go_mapping (\n  gene_id INT,\n  go_id INT,\n  FOREIGN KEY (gene_id) REFERENCES gene_annotations(gene_id),\n  FOREIGN KEY (go_id) REFERENCES go_terms(go_id)\n)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE gene_id BETWEEN 10 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneInfo;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM GeneInfo;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_description FROM GeneInfo;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GoTerm;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT go_id, go_name FROM GoTerm;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT go_id, go_description FROM GoTerm;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneGoMapping;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, go_id FROM GeneGoMapping;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneGoAnnotation;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT annotation_id, mapping_id, annotation_date FROM GeneGoAnnotation;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT annotation_id, annotation_source FROM GeneGoAnnotation;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, go_name FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GoTerm ON GeneGoMapping.go_id = GoTerm.go_id;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, annotation_date FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, go_name, annotation_date, annotation_source FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GoTerm ON GeneGoMapping.go_id = GoTerm.go_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(DISTINCT go_id) AS term_count FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, AVG(annotation_confidence) AS avg_confidence FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id GROUP BY gene_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, annotation_date FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id WHERE annotation_confidence > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, go_name FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GoTerm ON GeneGoMapping.go_id = GoTerm.go_id WHERE go_id = 'some_id';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, annotation_date FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id WHERE annotation_source = 'some_source';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_name, annotation_confidence FROM GeneInfo JOIN GeneGoMapping ON GeneInfo.gene_id = GeneGoMapping.gene_id JOIN GeneGoAnnotation ON GeneGoMapping.mapping_id = GeneGoAnnotation.mapping_id WHERE annotation_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneInfo;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM GeneInfo WHERE gene_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GoTerm;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT go_id, go_name FROM GoTerm WHERE go_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneGoMapping;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT gene_id, go_id FROM GeneGoMapping WHERE go_id = '123e4567-e89b-12d3-a456-426614174002';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneGoAnnotation;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT annotation_id, annotation_date, annotation_source FROM GeneGoAnnotation WHERE annotation_source = 'PubMed';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_id, g.gene_name, a.annotation_date FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id INNER JOIN GeneGoAnnotation a ON m.mapping_id = a.mapping_id WHERE g.gene_name = 'ABC Gene';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, go.go_name, a.annotation_date FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id INNER JOIN GoTerm go ON m.go_id = go.go_id INNER JOIN GeneGoAnnotation a ON m.mapping_id = a.mapping_id WHERE go.go_name = 'Cellular Process';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, go.go_name, a.annotation_date FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id INNER JOIN GoTerm go ON m.go_id = go.go_id INNER JOIN GeneGoAnnotation a ON m.mapping_id = a.mapping_id WHERE a.annotation_confidence > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, COUNT(m.mapping_id) as total_annotations FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id GROUP BY g.gene_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, AVG(a.annotation_confidence) as avg_confidence FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id INNER JOIN GeneGoAnnotation a ON m.mapping_id = a.mapping_id GROUP BY g.gene_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT go.go_name, COUNT(m.mapping_id) as total_genes FROM GoTerm go INNER JOIN GeneGoMapping m ON go.go_id = m.go_id GROUP BY go.go_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT a.annotation_source, COUNT(DISTINCT g.gene_id) as total_genes FROM GeneInfo g INNER JOIN GeneGoMapping m ON g.gene_id = m.gene_id INNER JOIN GeneGoAnnotation a ON m.mapping_id = a.mapping_id GROUP BY a.annotation_source;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneInfo WHERE gene_description LIKE '%function%';",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT * FROM GeneGoMapping WHERE gene_id IN (SELECT gene_id FROM GeneInfo WHERE gene_name = 'XYZ Gene');",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, go.go_name FROM GeneInfo g LEFT JOIN GeneGoMapping m ON g.gene_id = m.gene_id LEFT JOIN GoTerm go ON m.go_id = go.go_id;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT go.go_name, COUNT(g.gene_id) as total_genes FROM GoTerm go LEFT JOIN GeneGoMapping m ON go.go_id = m.go_id LEFT JOIN GeneInfo g ON m.gene_id = g.gene_id GROUP BY go.go_name;",
  "### TABLEDATA\n\nCREATE TABLE GeneInfo (\n    gene_id UUID NOT NULL,\n    gene_name VARCHAR(255) NOT NULL,\n    gene_description TEXT,\n    PRIMARY KEY (gene_id)\n)\n\nCREATE TABLE GoTerm (\n    go_id UUID NOT NULL,\n    go_name VARCHAR(255) NOT NULL,\n    go_description TEXT,\n    PRIMARY KEY (go_id)\n)\n\nCREATE TABLE GeneGoMapping (\n    mapping_id UUID NOT NULL,\n    gene_id UUID NOT NULL,\n    go_id UUID NOT NULL,\n    FOREIGN KEY (gene_id) REFERENCES GeneInfo(gene_id),\n    FOREIGN KEY (go_id) REFERENCES GoTerm(go_id),\n    PRIMARY KEY (mapping_id)\n)\n\nCREATE TABLE GeneGoAnnotation (\n    annotation_id UUID NOT NULL,\n    mapping_id UUID NOT NULL,\n    annotation_date DATE,\n    annotation_source VARCHAR(255),\n    annotation_confidence FLOAT,\n    PRIMARY KEY (annotation_id),\n    FOREIGN KEY (mapping_id) REFERENCES GeneGoMapping(mapping_id)\n)\n\n### STATEMENT\n\nSELECT g.gene_name, COUNT(m.mapping_id) as total_annotations FROM GeneInfo g LEFT JOIN GeneGoMapping m ON g.gene_id = m.gene_id GROUP BY g.gene_name;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, gene_name FROM genes",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, gene_name, gene_description FROM genes",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM go_terms",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT term, definition FROM go_terms",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM gene_go_mapping",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, go_id FROM gene_go_mapping",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, annotation_text FROM gene_annotations",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM visualize_data",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, go_id, visualization_url FROM visualize_data",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, go_id FROM visualize_data",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, visualization_url FROM visualize_data",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes WHERE gene_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM go_terms WHERE go_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM gene_go_mapping WHERE mapping_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM gene_annotations WHERE annotation_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM visualize_data WHERE visualization_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, gene_name, gene_description FROM genes WHERE gene_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT term, definition, category FROM go_terms WHERE go_id = 1",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes JOIN gene_annotations ON genes.gene_id = gene_annotations.gene_id WHERE genes.gene_name LIKE 'A%' AND gene_annotations.annotation_text LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT genes.gene_id, genes.gene_name, go_terms.term FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, go_term FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE gene_name = 'ABC' AND category = 'biological';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes LEFT JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id WHERE gene_go_mapping.evidence IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT DISTINCT gene_name FROM genes;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(*) AS annotation_count FROM genes INNER JOIN gene_annotations ON genes.gene_id = gene_annotations.gene_id GROUP BY gene_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT genes.gene_id, gene_name, go_id, definition FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE go_terms.category = 'molecular' ORDER BY genes.gene_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, term, definition FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE go_terms.category = 'cellular' AND gene_name LIKE 'P%' LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT DISTINCT gene_name, visualization_url FROM genes INNER JOIN visualize_data ON genes.gene_id = visualize_data.gene_id WHERE visualization_url IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(*) AS mapping_count FROM genes LEFT JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id GROUP BY gene_name HAVING mapping_count < 2;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, gene_name, annotation_text FROM genes LEFT JOIN gene_annotations ON genes.gene_id = gene_annotations.gene_id WHERE annotation_text IS NOT NULL ORDER BY gene_id ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, term, visualization_url FROM genes INNER JOIN visualize_data ON genes.gene_id = visualize_data.gene_id INNER JOIN go_terms ON visualize_data.go_id = go_terms.go_id WHERE visualization_url LIKE '%.png';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, go_id, category FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE category = 'biological' OR category = 'cellular';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, COUNT(*) AS annotation_count FROM genes LEFT JOIN gene_annotations ON genes.gene_id = gene_annotations.gene_id WHERE annotation_text LIKE '%important%' GROUP BY gene_name HAVING annotation_count > 0;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes WHERE gene_name IN (SELECT gene_name FROM gene_annotations WHERE annotation_text = 'positive');",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_id, gene_name, term, visualization_url FROM genes INNER JOIN visualize_data ON genes.gene_id = visualize_data.gene_id INNER JOIN go_terms ON visualize_data.go_id = go_terms.go_id WHERE term = 'metabolism';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, go_id, definition FROM genes INNER JOIN gene_go_mapping ON genes.gene_id = gene_go_mapping.gene_id INNER JOIN go_terms ON gene_go_mapping.go_id = go_terms.go_id WHERE gene_name LIKE 'G%' AND definition IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, go_id, visualization_url FROM genes INNER JOIN visualize_data ON genes.gene_id = visualize_data.gene_id INNER JOIN go_terms ON visualize_data.go_id = go_terms.go_id WHERE category = 'cellular' AND visualization_url LIKE '%.svg';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT gene_name, term, visualization_url FROM genes INNER JOIN visualize_data ON genes.gene_id = visualize_data.gene_id INNER JOIN go_terms ON visualize_data.go_id = go_terms.go_id WHERE term = 'development' AND gene_name NOT LIKE 'X%';",
  "### TABLEDATA\n\nCREATE TABLE genes (gene_id INT PRIMARY KEY, gene_name TEXT, gene_description TEXT, go_term TEXT)\n\nCREATE TABLE go_terms (go_id INT PRIMARY KEY, term TEXT, definition TEXT, category TEXT)\n\nCREATE TABLE gene_go_mapping (mapping_id INT PRIMARY KEY, gene_id INT, go_id INT, evidence TEXT)\n\nCREATE TABLE gene_annotations (annotation_id INT PRIMARY KEY, gene_id INT, annotation_text TEXT)\n\nCREATE TABLE visualize_data (visualization_id INT PRIMARY KEY, gene_id INT, go_id INT, visualization_url TEXT)\n\n### STATEMENT\n\nSELECT * FROM genes WHERE gene_id IN (SELECT gene_id FROM gene_go_mapping WHERE go_id IN (SELECT go_id FROM go_terms WHERE category = 'molecular'));"
]