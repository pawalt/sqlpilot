[
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type, interaction_score FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE protein1_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE interaction_type = 'Physical';",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_score FROM protein_interaction_data WHERE interaction_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE protein2_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE protein1_id = 3 AND protein2_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id FROM protein_interaction_data WHERE interaction_score < 0.2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM protein_interaction_data WHERE interaction_type = 'Genetic';",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE interaction_score BETWEEN 0.2 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_score FROM protein_interaction_data WHERE protein1_id = 2 AND interaction_type = 'Physical';",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_type, interaction_score FROM protein_interaction_data WHERE protein1_id = 4 OR protein2_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE interaction_type IN ('Physical', 'Genetic');",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE protein1_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE interaction_score > 0.3 AND interaction_type = 'Genetic';",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_type, interaction_score FROM protein_interaction_data WHERE protein1_id = 3 OR protein2_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE interaction_score < 0.5 ORDER BY interaction_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type, interaction_score FROM protein_interaction_data ORDER BY interaction_score ASC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_id, protein2_id, interaction_score FROM protein_interaction_data WHERE interaction_type = 'Physical' ORDER BY interaction_score DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE protein1_id = 100 AND protein2_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE interaction_type = 'binding' ORDER BY interaction_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protein_interaction_data WHERE interaction_type LIKE '%activation%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, AVG(interaction_score) AS average_score FROM protein_interaction_data GROUP BY protein1_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) AS type_count FROM protein_interaction_data GROUP BY interaction_type HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, MAX(interaction_score) AS max_score FROM protein_interaction_data GROUP BY protein1_id, protein2_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, SUM(interaction_score) AS total_score FROM protein_interaction_data GROUP BY protein1_id, protein2_id HAVING SUM(interaction_score) > 100;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE protein1_id IN (SELECT protein1_id FROM protein_interaction_data WHERE interaction_type = 'inhibition');",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, interaction_score FROM protein_interaction_data WHERE interaction_score BETWEEN 0.5 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, SUBSTRING(interaction_type, 1, 3) AS short_type FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, ROUND(interaction_score, 2) AS rounded_score FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, CONCAT('Protein ', protein1_id, ' interacts with Protein ', protein2_id) AS interaction_description FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, interaction_score, CASE WHEN interaction_score > 0.5 THEN 'High' ELSE 'Low' END AS score_category FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type, interaction_score, CASE WHEN interaction_type IN ('binding', 'activation') THEN 'Yes' ELSE 'No' END AS interaction_type_check FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT p1.protein_name AS protein1_name, p2.protein_name AS protein2_name, pid.interaction_type, pid.interaction_score FROM protein_interaction_data pid JOIN proteins p1 ON pid.protein1_id = p1.protein_id JOIN proteins p2 ON pid.protein2_id = p2.protein_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interaction_data WHERE interaction_score = (SELECT MAX(interaction_score) FROM protein_interaction_data);",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, interaction_type, AVG(interaction_score) AS avg_score FROM protein_interaction_data GROUP BY protein1_id, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT protein1_id, protein2_id FROM protein_interaction_data;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE interaction_type IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE protein_interaction_data (\n  interaction_id INT PRIMARY KEY,\n  protein1_id INT,\n  protein2_id INT,\n  interaction_type VARCHAR(50),\n  interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type FROM protein_interaction_data WHERE LENGTH(interaction_type) > 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, protein1_id, protein2_id, interaction_type FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type FROM protein_interactions WHERE interaction_type = 'binding';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id FROM protein_network;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_network;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id FROM protein_network WHERE network_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, network_id FROM protein_network WHERE protein_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, protein_id FROM protein_network WHERE network_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE protein1_id = 5 AND protein2_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, interaction_type FROM protein_interactions WHERE protein1_id = 5 AND interaction_type = 'inhibition';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE interaction_type IN ('binding', 'activation');",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id FROM protein_interactions WHERE interaction_type = 'activation';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT interaction_type FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT interaction_type, COUNT(*) AS count FROM protein_interactions GROUP BY interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, COUNT(*) AS count FROM protein_interactions GROUP BY protein1_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT network_id, COUNT(*) AS count FROM protein_network GROUP BY network_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id, interaction_type FROM protein_interactions ORDER BY protein1_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_network ORDER BY protein_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, protein1_id, protein2_id, interaction_type FROM protein_interactions WHERE protein1_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE interaction_type LIKE '%ion%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE interaction_type = 'binding';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id FROM protein_interactions WHERE interaction_type = 'activation';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protein_network WHERE network_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, network_id FROM protein_network WHERE protein_id = 5 AND network_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, protein_id FROM protein_network WHERE network_id IN (1,2,3);",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, protein2_id FROM protein_interactions WHERE interaction_type IN ('activation','inhibition');",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE protein1_id = 10 OR protein2_id = 15;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT interaction_type FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_network WHERE protein_id IN (SELECT protein1_id FROM protein_interactions WHERE interaction_type = 'binding');",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT protein_id) FROM protein_network WHERE network_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT MAX(id) FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, COUNT(*) AS interaction_count FROM protein_network GROUP BY protein_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, network_id FROM protein_network WHERE protein_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE protein1_id = protein2_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM protein_network WHERE protein_id = 7 AND network_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, network_id FROM protein_network WHERE protein_id = 3 OR network_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein1_id, network_id FROM protein_interactions JOIN protein_network ON protein1_id = protein_id WHERE interaction_type = 'activation';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE interaction_type LIKE '%ing%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT id, interaction_type FROM protein_interactions ORDER BY interaction_type DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    id INT PRIMARY KEY,\n    protein1_id INT,\n    protein2_id INT,\n    interaction_type VARCHAR(50)\n);\n\nCREATE TABLE protein_network (\n    id INT PRIMARY KEY,\n    protein_id INT,\n    network_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, COUNT(*) AS interaction_count FROM protein_network WHERE network_id = 1 GROUP BY protein_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_a_id, protein_b_id FROM protein_interactions WHERE interaction_type = 'physical';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(interaction_id) FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, protein_function FROM proteins WHERE gene_name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, annotation_text FROM interaction_annotations;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, annotation_text FROM interaction_annotations WHERE annotation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, annotation_text FROM interaction_annotations ORDER BY annotation_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_type FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, annotation_text FROM proteins JOIN interaction_annotations ON proteins.protein_id = interaction_annotations.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(annotation_id) FROM interaction_annotations WHERE annotation_text LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(interaction_score) FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(interaction_score) FROM protein_interactions WHERE interaction_type = 'chemical';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_score FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_b_id WHERE interaction_score > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT gene_name, annotation_text FROM proteins JOIN interaction_annotations ON proteins.protein_id = interaction_annotations.interaction_id WHERE annotation_text LIKE '%interesting%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE protein_a_id = protein_b_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name AS protein_alias, gene_name AS gene_alias FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_type FROM proteins LEFT JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_type FROM proteins RIGHT JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_type FROM proteins INNER JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_type FROM proteins LEFT JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id WHERE interaction_score IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE interaction_type = 'physical'",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name FROM proteins WHERE protein_function LIKE '%kinase%'",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein_a_id, protein_b_id, interaction_score FROM protein_interactions WHERE interaction_score > 0.5",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, protein_function FROM proteins WHERE gene_name = 'TP53'",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT annotation_text FROM interaction_annotations WHERE annotation_id = 10",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_a_id, protein_b_id FROM protein_interactions WHERE interaction_type = 'genetic'",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, COUNT(*) AS interaction_count FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id GROUP BY protein_name",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, protein_function FROM proteins WHERE protein_function LIKE '%transcription factor%'",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, annotation_text FROM protein_interactions JOIN interaction_annotations ON protein_interactions.interaction_id = interaction_annotations.interaction_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions WHERE protein_a_id = 5 AND protein_b_id = 8",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, protein_function, interaction_type, interaction_score FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, annotation_text FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id JOIN interaction_annotations ON protein_interactions.interaction_id = interaction_annotations.interaction_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, protein_function, annotation_text FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_b_id JOIN interaction_annotations ON protein_interactions.interaction_id = interaction_annotations.interaction_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(interaction_score) AS max_score FROM protein_interactions",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, COUNT(*) AS total_interactions FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id GROUP BY protein_name HAVING total_interactions > 5",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name AS protein_a_name, protein_b_id, interaction_score FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name AS protein_a_name, protein_name AS protein_b_name, interaction_type, annotation_text FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id JOIN interaction_annotations ON protein_interactions.interaction_id = interaction_annotations.interaction_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein_a_id INT,\n    protein_b_id INT,\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE proteins (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(100),\n    gene_name VARCHAR(50),\n    protein_function TEXT\n);\n\nCREATE TABLE interaction_annotations (\n    annotation_id INT PRIMARY KEY,\n    interaction_id INT,\n    annotation_text TEXT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, protein_function, annotation_text FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_a_id JOIN interaction_annotations ON protein_interactions.interaction_id = interaction_annotations.interaction_id",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_name, interaction_type FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_properties;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, molecular_weight FROM protein_properties;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_domains;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_id, domain_name FROM protein_domains;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM network_analysis_results;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_pair, average_interaction_score FROM network_analysis_results;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_name, interaction_type FROM protein_interactions WHERE interaction_score > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name FROM protein_properties WHERE molecular_weight < 50.0;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT domain_id, domain_name FROM protein_domains WHERE start_position < 100;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_pair, common_interactions FROM network_analysis_results WHERE average_interaction_score > 3.0;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_name, protein2_name, interaction_type FROM protein_interactions WHERE interaction_type = 'binding';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, molecular_weight FROM protein_properties WHERE isoelectric_point > 7.0;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT domain_name, end_position FROM protein_domains WHERE start_position > 50;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_pair, average_interaction_score FROM network_analysis_results WHERE common_interactions > 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein1_name, interaction_type, interaction_score FROM protein_interactions WHERE interaction_score >= 0.8;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, molecular_weight, isoelectric_point FROM protein_properties WHERE molecular_weight > 50.0 AND isoelectric_point < 7.0;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT domain_id, protein_id, domain_name, start_position, end_position FROM protein_domains WHERE end_position - start_position > 20;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT analysis_id, protein_pair, common_interactions, average_interaction_score FROM network_analysis_results WHERE common_interactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_name, protein2_name, interaction_type, interaction_score FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_properties WHERE molecular_weight > 50;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, molecular_weight, isoelectric_point FROM protein_properties WHERE molecular_weight > 100 AND isoelectric_point < 7;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_properties.protein_name, protein_domains.domain_name FROM protein_properties JOIN protein_domains ON protein_properties.protein_id = protein_domains.protein_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, protein_domains.domain_name FROM protein_properties JOIN protein_domains ON protein_properties.protein_id = protein_domains.protein_id AND protein_properties.protein_name LIKE '%protein%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, common_interactions FROM protein_properties JOIN network_analysis_results ON protein_properties.protein_name = network_analysis_results.protein_pair;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_name, protein2_name, interaction_type, interaction_score FROM protein_interactions WHERE interaction_type = 'binding';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT domain_name, protein_properties.protein_name, protein_properties.molecular_weight FROM protein_domains JOIN protein_properties ON protein_domains.protein_id = protein_properties.protein_id ORDER BY protein_properties.molecular_weight DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, AVG(molecular_weight) AS avg_molecular_weight FROM protein_properties GROUP BY protein_name;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, COUNT(*) AS domain_count FROM protein_domains JOIN protein_properties ON protein_domains.protein_id = protein_properties.protein_id GROUP BY protein_name HAVING COUNT(*) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT domain_name, AVG(end_position - start_position) AS avg_domain_length FROM protein_domains GROUP BY domain_name ORDER BY avg_domain_length DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, SUM(common_interactions) AS total_interactions FROM protein_properties JOIN network_analysis_results ON protein_properties.protein_name = network_analysis_results.protein_pair GROUP BY protein_name HAVING SUM(common_interactions) > 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_domains WHERE domain_name LIKE 'PD%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, COUNT(DISTINCT domain_name) AS unique_domains FROM protein_domains JOIN protein_properties ON protein_domains.protein_id = protein_properties.protein_id GROUP BY protein_name;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT interaction_id, protein1_name, protein2_name, interaction_type, interaction_score FROM protein_interactions WHERE interaction_score > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, AVG(molecular_weight) AS avg_molecular_weight FROM protein_properties GROUP BY protein_name HAVING AVG(molecular_weight) > 60;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, MAX(isoelectric_point) AS max_isoelectric_point FROM protein_properties GROUP BY protein_name ORDER BY max_isoelectric_point DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, MIN(isoelectric_point) AS min_isoelectric_point FROM protein_properties GROUP BY protein_name ORDER BY min_isoelectric_point;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, COUNT(*) AS total_interactions FROM protein_properties JOIN network_analysis_results ON protein_properties.protein_name = network_analysis_results.protein_pair GROUP BY protein_name ORDER BY total_interactions DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n    interaction_id INT PRIMARY KEY,\n    protein1_name VARCHAR(255),\n    protein2_name VARCHAR(255),\n    interaction_type VARCHAR(50),\n    interaction_score FLOAT\n);\n\nCREATE TABLE protein_properties (\n    protein_id INT PRIMARY KEY,\n    protein_name VARCHAR(255),\n    gene_name VARCHAR(255),\n    molecular_weight FLOAT,\n    isoelectric_point FLOAT\n);\n\nCREATE TABLE protein_domains (\n    domain_id INT PRIMARY KEY,\n    protein_id INT,\n    domain_name VARCHAR(255),\n    start_position INT,\n    end_position INT\n);\n\nCREATE TABLE network_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    protein_pair VARCHAR(255),\n    common_interactions INT,\n    average_interaction_score FLOAT\n);\n\n### STATEMENT\n\nSELECT protein_name, AVG(average_interaction_score) AS avg_interaction_score FROM protein_properties JOIN network_analysis_results ON protein_properties.protein_name = network_analysis_results.protein_pair GROUP BY protein_name HAVING AVG(average_interaction_score) > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_type FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, interaction_id FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, interaction_id, interaction_type FROM protein_interactions WHERE protein_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, protein_name, gene_name FROM proteins WHERE gene_name = 'ABC';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_description FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_id, network_name FROM networks;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, network_id FROM network_proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, protein_name, gene_name, function FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_description, interaction_source FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_id, network_name, network_type FROM networks;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM networks;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM network_proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT p.protein_id, p.protein_name, n.network_name FROM proteins p LEFT JOIN network_proteins np ON p.protein_id = np.protein_id LEFT JOIN networks n ON np.network_id = n.network_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT n.network_name, COUNT(np.protein_id) AS protein_count FROM networks n LEFT JOIN network_proteins np ON n.network_id = np.network_id GROUP BY n.network_name;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT i.interaction_id, i.interaction_description, COUNT(np.protein_id) AS protein_count FROM interactions i LEFT JOIN protein_interactions pi ON i.interaction_id = pi.interaction_id LEFT JOIN network_proteins np ON pi.protein_id = np.protein_id GROUP BY i.interaction_id, i.interaction_description;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT p.protein_id, p.protein_name, n.network_name FROM proteins p INNER JOIN network_proteins np ON p.protein_id = np.protein_id INNER JOIN networks n ON np.network_id = n.network_id WHERE n.network_type = 'TypeA' ORDER BY p.protein_id ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM protein_interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, function FROM proteins;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT interaction_description, interaction_source FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, interaction_id, interaction_type FROM protein_interactions WHERE interaction_type = 'physical';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name FROM proteins WHERE gene_name LIKE 'ABC%';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT * FROM proteins WHERE protein_id IN (SELECT protein_id FROM network_proteins WHERE network_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_name, network_type FROM networks WHERE network_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, COUNT(interaction_id) AS interaction_count FROM protein_interactions GROUP BY protein_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_name, protein_name FROM networks JOIN network_proteins ON networks.network_id = network_proteins.network_id JOIN proteins ON network_proteins.protein_id = proteins.protein_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_description FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_id JOIN interactions ON protein_interactions.interaction_id = interactions.interaction_id;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_id, COUNT(protein_id) AS protein_count FROM network_proteins GROUP BY network_id HAVING COUNT(protein_id) > 3;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, function FROM proteins WHERE protein_id IN (SELECT protein_id FROM protein_interactions WHERE interaction_id = 2);",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_description FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_id JOIN interactions ON protein_interactions.interaction_id = interactions.interaction_id WHERE interaction_type = 'genetic';",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_name, network_type, COUNT(protein_id) AS protein_count FROM networks JOIN network_proteins ON networks.network_id = network_proteins.network_id GROUP BY network_name, network_type HAVING COUNT(protein_id) < 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, interaction_id, interaction_type FROM protein_interactions WHERE interaction_type = 'physical' ORDER BY protein_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, gene_name, function FROM proteins WHERE protein_id BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT network_name, protein_name FROM networks JOIN network_proteins ON networks.network_id = network_proteins.network_id JOIN proteins ON network_proteins.protein_id = proteins.protein_id WHERE network_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, COUNT(interaction_id) AS interaction_count FROM protein_interactions GROUP BY protein_id HAVING interaction_count > 1;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_description FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_id JOIN interactions ON protein_interactions.interaction_id = interactions.interaction_id ORDER BY protein_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_id, interaction_id, interaction_type FROM protein_interactions WHERE protein_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE protein_interactions (\n  protein_id INT,\n  interaction_id INT,\n  interaction_type VARCHAR(50)\n);\n\nCREATE TABLE proteins (\n  protein_id INT,\n  protein_name VARCHAR(50),\n  gene_name VARCHAR(50),\n  function VARCHAR(100)\n);\n\nCREATE TABLE interactions (\n  interaction_id INT,\n  interaction_description VARCHAR(100),\n  interaction_source VARCHAR(50)\n);\n\nCREATE TABLE networks (\n  network_id INT,\n  network_name VARCHAR(100),\n  network_type VARCHAR(50)\n);\n\nCREATE TABLE network_proteins (\n  network_id INT,\n  protein_id INT\n);\n\n### STATEMENT\n\nSELECT protein_name, interaction_description FROM proteins JOIN protein_interactions ON proteins.protein_id = protein_interactions.protein_id JOIN interactions ON protein_interactions.interaction_id = interactions.interaction_id WHERE interaction_type = 'physical' AND gene_name LIKE '%XYZ%';"
]