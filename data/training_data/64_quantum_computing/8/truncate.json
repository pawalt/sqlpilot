[
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications;",
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications RESTART IDENTITY;",
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications;",
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE QuantumApplications (\n    id INT PRIMARY KEY,\n    application_name VARCHAR(50) NOT NULL,\n    data_security_level INT,\n    encryption_key VARCHAR(100) UNIQUE,\n    quantum_compatible BOOLEAN\n)\n\n### STATEMENT\n\nTRUNCATE TABLE QuantumApplications RESTART IDENTITY;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    id UUID PRIMARY KEY,\n    sensitive_data VARCHAR(255),\n    encryption_key UUID\n);\n\n\nCREATE TABLE quantum_users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    id UUID PRIMARY KEY,\n    sensitive_data VARCHAR(255),\n    encryption_key UUID\n);\n\n\nCREATE TABLE quantum_users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_users;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    id UUID PRIMARY KEY,\n    sensitive_data VARCHAR(255),\n    encryption_key UUID\n);\n\n\nCREATE TABLE quantum_users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    id UUID PRIMARY KEY,\n    sensitive_data VARCHAR(255),\n    encryption_key UUID\n);\n\n\nCREATE TABLE quantum_users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_users;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    id UUID PRIMARY KEY,\n    sensitive_data VARCHAR(255),\n    encryption_key UUID\n);\n\n\nCREATE TABLE quantum_users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255),\n    email VARCHAR(100)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_data CASCADE;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_users;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_logs;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_logs;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    security_level INT\n);\n\nCREATE TABLE quantum_data (\n    data_id INT PRIMARY KEY,\n    user_id INT,\n    data_blob BYTEA NOT NULL,\n    encryption_key VARCHAR(50) NOT NULL,\n    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\nCREATE TABLE quantum_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    log_details TEXT,\n    log_time TIMESTAMP NOT NULL,\n    CONSTRAINT fk_user_log FOREIGN KEY (user_id) REFERENCES quantum_users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE quantum_users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE files;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE access_logs;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE access_logs;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE files;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE files (\n    file_id INT PRIMARY KEY,\n    file_name VARCHAR(100) NOT NULL,\n    file_type VARCHAR(50) NOT NULL,\n    file_size INT NOT NULL,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE access_logs (\n    log_id INT PRIMARY KEY,\n    user_id INT,\n    file_id INT,\n    access_date TIMESTAMP NOT NULL,\n    access_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (file_id) REFERENCES files(file_id)\n);\n\nCREATE TABLE encryption_keys (\n    key_id INT PRIMARY KEY,\n    user_id INT,\n    encryption_key VARCHAR(200) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nTRUNCATE TABLE encryption_keys;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Users;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Data;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Keys;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Users;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Data;",
  "### TABLEDATA\n\nCREATE TABLE Quantum_Users (\n user_id INT PRIMARY KEY,\n username STRING UNIQUE,\n password STRING,\n email STRING UNIQUE\n);\n\nCREATE TABLE Quantum_Data (\n data_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n data_content STRING,\n encrypted BOOLEAN\n);\n\nCREATE TABLE Quantum_Keys (\n key_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n encryption_key STRING\n);\n\nCREATE TABLE Quantum_Logs (\n log_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n log_content STRING,\n timestamp TIMESTAMP\n);\n\nCREATE TABLE Quantum_Settings (\n setting_id INT PRIMARY KEY,\n user_id INT REFERENCES Quantum_Users(user_id),\n setting_name STRING,\n setting_value STRING\n);\n\n### STATEMENT\n\nTRUNCATE TABLE Quantum_Keys;"
]