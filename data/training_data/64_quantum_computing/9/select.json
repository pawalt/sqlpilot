[
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_id = 1",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_level FROM QuantumOptimization WHERE optimization_level > 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT circuit_id, circuit_name FROM QuantumOptimization WHERE algorithm_name = 'Grover'",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE circuit_id = 3",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_name FROM QuantumOptimization WHERE optimization_level < 3",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_name LIKE 'Q%'",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_name = 'QAOA' AND optimization_level = 2",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id FROM QuantumOptimization WHERE optimization_level >= 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_id = 4 OR circuit_id = 7",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE optimization_level BETWEEN 2 AND 4",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id, circuit_name FROM QuantumOptimization WHERE circuit_name IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumOptimization WHERE optimization_level = 1",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_name = 'VQE'",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_level FROM QuantumOptimization WHERE algorithm_id IN (1, 5, 9)",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, circuit_id FROM QuantumOptimization WHERE optimization_level < 2",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE circuit_name LIKE '%Quantum%'",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE optimization_level > 3 AND optimization_level < 7",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE optimization_level = 3 OR circuit_name IS NULL",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumOptimization WHERE optimization_level <= 3",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_id = 1",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumOptimization WHERE optimization_level > 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id, circuit_name FROM QuantumOptimization WHERE optimization_level BETWEEN 3 AND 7",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_name LIKE '%Simulated%' AND optimization_level < 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE algorithm_name IN ('QAOA', 'VQE')",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id FROM QuantumOptimization ORDER BY algorithm_id ASC",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT circuit_name, optimization_level FROM QuantumOptimization ORDER BY optimization_level DESC",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization WHERE circuit_id IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id, circuit_name FROM QuantumOptimization WHERE optimization_level = (SELECT MAX(optimization_level) FROM QuantumOptimization)",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT AVG(optimization_level) FROM QuantumOptimization WHERE algorithm_name = 'QAOA'",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM QuantumOptimization WHERE optimization_level > 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM QuantumOptimization",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) FROM QuantumOptimization GROUP BY algorithm_name ",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, SUM(optimization_level) FROM QuantumOptimization GROUP BY algorithm_name HAVING SUM(optimization_level) > 10",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumOptimization WHERE optimization_level = (SELECT MIN(optimization_level) FROM QuantumOptimization)",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, circuit_id, circuit_name FROM QuantumOptimization WHERE optimization_level > (SELECT AVG(optimization_level) FROM QuantumOptimization)",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_level FROM QuantumOptimization WHERE optimization_level < (SELECT AVG(optimization_level) FROM QuantumOptimization)",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name, circuit_name FROM QuantumOptimization ORDER BY algorithm_name DESC, circuit_name ASC",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumOptimization (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    circuit_id INT,\n    circuit_name VARCHAR(255),\n    optimization_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimization OFFSET 10",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, name FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT description FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, name, description FROM quantum_algorithms WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT algorithm_id, circuit_description FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT gate_count, is_optimized FROM quantum_circuits WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, circuit_description, gate_count FROM quantum_circuits WHERE is_optimized = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE algorithm_id = 1 AND is_optimized = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, algorithm_id, gate_count FROM quantum_circuits ORDER BY gate_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(gate_count) FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(created_at) FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(gate_count) FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, name FROM quantum_algorithms WHERE name LIKE '%quantum%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, name FROM quantum_algorithms WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT a.name, c.circuit_description FROM quantum_algorithms a JOIN quantum_circuits c ON a.id = c.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT a.name AS algorithm, c.gate_count AS gates FROM quantum_algorithms a JOIN quantum_circuits c ON a.id = c.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_algorithms FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, description FROM quantum_algorithms WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE gate_count > 100 AND is_optimized = true;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT quantum_algorithms.name, quantum_circuits.circuit_description FROM quantum_algorithms INNER JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_algorithms FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(gate_count) AS avg_gate_count FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE algorithm_id IN (SELECT id FROM quantum_algorithms WHERE created_at >= '2022-01-01');",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms WHERE name LIKE 'Quantum%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, description, circuit_description FROM quantum_algorithms LEFT JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT quantum_circuits.algorithm_id FROM quantum_circuits WHERE is_optimized = false;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(gate_count) AS max_gate_count FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT algorithm_id, COUNT(*) AS circuit_count FROM quantum_circuits GROUP BY algorithm_id HAVING COUNT(*) >= 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT quantum_algorithms.name, quantum_circuits.gate_count FROM quantum_algorithms LEFT JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id WHERE quantum_circuits.is_optimized = true;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE algorithm_id = (SELECT id FROM quantum_algorithms WHERE name = 'Grover Search');",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms WHERE created_at BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, description, gate_count FROM quantum_algorithms INNER JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id WHERE gate_count > 50;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_id FROM quantum_circuits WHERE circuit_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT algorithm_id, SUM(gate_count) AS total_gate_count FROM quantum_circuits GROUP BY algorithm_id ORDER BY total_gate_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, gate_count FROM quantum_algorithms RIGHT JOIN quantum_circuits ON quantum_algorithms.id = quantum_circuits.algorithm_id WHERE quantum_algorithms.name = 'Shor Factorization';",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE algorithm_id = 1 AND gate_count < (SELECT AVG(gate_count) FROM quantum_circuits);",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n  id INT,\n  name VARCHAR(255),\n  description TEXT,\n  created_at TIMESTAMP\n);\n\n\nCREATE TABLE quantum_circuits (\n  id INT,\n  algorithm_id INT,\n  circuit_description TEXT,\n  gate_count INT,\n  is_optimized BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, description FROM quantum_algorithms WHERE id = (SELECT algorithm_id FROM quantum_circuits WHERE gate_count = (SELECT MAX(gate_count) FROM quantum_circuits));",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumAlgorithms;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, algorithm_description FROM QuantumAlgorithms;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name FROM QuantumCircuits;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, circuit_description FROM QuantumCircuits;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name FROM QuantumCircuits WHERE circuit_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id WHERE QuantumCircuits.circuit_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE algorithm_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT record_id, optimization_type FROM OptimizationRecords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, optimization_result FROM QuantumCircuits JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_type FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name FROM QuantumCircuits WHERE circuit_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name FROM QuantumAlgorithms WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, optimization_result FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, optimization_type, optimization_result FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, algorithm_description FROM QuantumAlgorithms;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumAlgorithms WHERE algorithm_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, algorithm_name FROM QuantumCircuits JOIN QuantumAlgorithms ON QuantumCircuits.algorithm_id = QuantumAlgorithms.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, optimization_type, optimization_result FROM QuantumCircuits JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumAlgorithms;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, algorithm_description FROM QuantumAlgorithms WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, circuit_description FROM QuantumCircuits WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT QuantumCircuits.circuit_name, QuantumAlgorithms.algorithm_name FROM QuantumCircuits INNER JOIN QuantumAlgorithms ON QuantumCircuits.algorithm_id = QuantumAlgorithms.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, algorithm_name FROM QuantumCircuits JOIN QuantumAlgorithms ON QuantumCircuits.algorithm_id = QuantumAlgorithms.algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE circuit_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, optimization_type FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(circuit_name) AS circuit_count FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, AVG(CHAR_LENGTH(optimization_result)) AS avg_result_length FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, optimization_type, optimization_result FROM QuantumCircuits JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id WHERE circuit_name LIKE '%test%' ORDER BY circuit_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS record_count FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id WHERE optimization_result IS NOT NULL GROUP BY algorithm_name HAVING record_count > 0;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, MAX(CHAR_LENGTH(optimization_result)) AS max_result_length FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT circuit_name, SUM(record_id) AS total_records FROM QuantumCircuits JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id GROUP BY circuit_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, COUNT(*) AS total_records FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id GROUP BY algorithm_name, circuit_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT optimization_type FROM OptimizationRecords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumAlgorithms UNION SELECT * FROM QuantumCircuits UNION SELECT * FROM OptimizationRecords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, optimization_type, optimization_result FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id WHERE optimization_type = 'performance';",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT algorithm_name, circuit_name, optimization_type, optimization_result FROM QuantumAlgorithms JOIN QuantumCircuits ON QuantumAlgorithms.algorithm_id = QuantumCircuits.algorithm_id JOIN OptimizationRecords ON QuantumCircuits.circuit_id = OptimizationRecords.circuit_id WHERE optimization_type IN ('time', 'quality') AND CHAR_LENGTH(optimization_result) > 100;",
  "### TABLEDATA\n\nCREATE TABLE QuantumAlgorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(255),\n    algorithm_description TEXT\n);\n\n\nCREATE TABLE QuantumCircuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    circuit_description TEXT,\n    algorithm_id INT,\n    FOREIGN KEY (algorithm_id) REFERENCES QuantumAlgorithms(algorithm_id)\n);\n\n\nCREATE TABLE OptimizationRecords (\n    record_id INT PRIMARY KEY,\n    circuit_id INT,\n    optimization_type VARCHAR(50),\n    optimization_result TEXT,\n    FOREIGN KEY (circuit_id) REFERENCES QuantumCircuits(circuit_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT circuit_name, algorithm_name FROM QuantumCircuits JOIN QuantumAlgorithms ON QuantumCircuits.algorithm_id = QuantumAlgorithms.algorithm_id ORDER BY algorithm_name DESC, circuit_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_name, description FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, optimization_level FROM quantum_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT circuit_name, gate_count FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT circuit_id, qubit_count FROM quantum_circuits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM algorithm_circuit_mapping;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, circuit_id FROM algorithm_circuit_mapping;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT mapping_id, algorithm_id, circuit_id FROM algorithm_circuit_mapping;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM optimization_history;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, optimization_steps FROM optimization_history;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, optimization_time FROM optimization_history;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT history_id, algorithm_id, optimization_steps FROM optimization_history;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms WHERE optimization_level > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits WHERE qubit_count < 4;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM algorithm_circuit_mapping WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM optimization_history WHERE optimization_steps > 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms ORDER BY algorithm_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits ORDER BY gate_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM optimization_history ORDER BY optimization_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithms",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_name, description FROM quantum_algorithms",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_name, optimization_level FROM quantum_algorithms WHERE optimization_level > 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_circuits",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT circuit_name, gate_count FROM quantum_circuits",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT circuit_name, qubit_count FROM quantum_circuits WHERE qubit_count < 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM algorithm_circuit_mapping",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, circuit_id FROM algorithm_circuit_mapping WHERE algorithm_id = 1",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM optimization_history",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, optimization_steps FROM optimization_history",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT algorithm_id, optimization_time FROM optimization_history WHERE optimization_steps > 100",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qc.circuit_name, qc.gate_count, qc.qubit_count, acm.algorithm_id FROM quantum_circuits qc JOIN algorithm_circuit_mapping acm ON qc.circuit_id = acm.circuit_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qalg.algorithm_name, oh.optimization_steps, oh.optimization_time FROM quantum_algorithms qalg JOIN optimization_history oh ON qalg.algorithm_id = oh.algorithm_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qc.circuit_name, qalg.algorithm_name, acm.algorithm_id FROM quantum_circuits qc JOIN algorithm_circuit_mapping acm ON qc.circuit_id = acm.circuit_id JOIN quantum_algorithms qalg ON acm.algorithm_id = qalg.algorithm_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qalg.algorithm_name, qalg.optimization_level, SUM(oh.optimization_steps) AS total_opt_steps FROM quantum_algorithms qalg JOIN optimization_history oh ON qalg.algorithm_id = oh.algorithm_id GROUP BY qalg.algorithm_name, qalg.optimization_level ORDER BY total_opt_steps DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qc.circuit_name, COUNT(acm.algorithm_id) AS num_algorithms FROM quantum_circuits qc JOIN algorithm_circuit_mapping acm ON qc.circuit_id = acm.circuit_id GROUP BY qc.circuit_name HAVING num_algorithms > 2",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qalg.algorithm_name, qc.qubit_count, AVG(oh.optimization_steps) AS avg_opt_steps FROM quantum_algorithms qalg JOIN algorithm_circuit_mapping acm ON qalg.algorithm_id = acm.algorithm_id JOIN optimization_history oh ON acm.algorithm_id = oh.algorithm_id JOIN quantum_circuits qc ON acm.circuit_id = qc.circuit_id GROUP BY qalg.algorithm_name, qc.qubit_count ORDER BY avg_opt_steps ASC",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qalg.algorithm_name, MAX(oh.optimization_steps) AS max_opt_steps, MIN(oh.optimization_steps) AS min_opt_steps FROM quantum_algorithms qalg JOIN optimization_history oh ON qalg.algorithm_id = oh.algorithm_id GROUP BY qalg.algorithm_name ORDER BY max_opt_steps DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qc.circuit_name, MAX(qc.qubit_count) AS max_qubits, MIN(qc.qubit_count) AS min_qubits FROM quantum_circuits qc GROUP BY qc.circuit_name ORDER BY max_qubits DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_algorithms (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    description TEXT,\n    optimization_level INT\n);\n\n\nCREATE TABLE quantum_circuits (\n    circuit_id INT PRIMARY KEY,\n    circuit_name VARCHAR(50) NOT NULL,\n    gate_count INT,\n    qubit_count INT\n);\n\n\nCREATE TABLE algorithm_circuit_mapping (\n    mapping_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    circuit_id INT REFERENCES quantum_circuits(circuit_id)\n);\n\n\nCREATE TABLE optimization_history (\n    history_id INT PRIMARY KEY,\n    algorithm_id INT REFERENCES quantum_algorithms(algorithm_id),\n    optimization_steps INT,\n    optimization_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qc.circuit_name, COUNT(*) AS num_mappings FROM quantum_circuits qc JOIN algorithm_circuit_mapping acm ON qc.circuit_id = acm.circuit_id GROUP BY qc.circuit_name ORDER BY num_mappings DESC",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, circuit_name FROM QuantumCircuits WHERE qubit_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT gate_id, gate_name, gate_type FROM QuantumGateLibrary;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM CircuitExecutionLogs WHERE success = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT log_id, execution_time FROM CircuitExecutionLogs WHERE circuit_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM AlgorithmOptimizationHistory ORDER BY optimization_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, optimization_steps, execution_time FROM AlgorithmOptimizationHistory WHERE optimization_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT config_id, optimizer_name FROM QuantumOptimizerConfig WHERE learning_rate < 0.01;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE gate_count < 10 AND optimization_level > 2;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, circuit_name FROM QuantumCircuits WHERE circuit_name LIKE 'Grover%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, gate_matrix FROM QuantumGateLibrary WHERE gate_type = 'Hadamard';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM CircuitExecutionLogs WHERE execution_date BETWEEN '2022-01-01' AND '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT optimization_id, execution_time FROM AlgorithmOptimizationHistory WHERE optimization_steps >= 1000 ORDER BY execution_time ASC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumOptimizerConfig WHERE max_iterations = 100 AND learning_rate = 0.05;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, circuit_name, gate_count FROM QuantumCircuits WHERE optimization_level = 3;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT gate_id, gate_name, gate_type, gate_matrix FROM QuantumGateLibrary WHERE gate_type IN ('CNOT', 'SWAP');",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM CircuitExecutionLogs WHERE execution_time > 10 AND success = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT config_id, optimizer_name, optimization_strategy FROM QuantumOptimizerConfig WHERE max_iterations > 500;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, optimization_steps FROM AlgorithmOptimizationHistory WHERE execution_time < 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE qubit_count = (SELECT MAX(qubit_count) FROM QuantumCircuits);",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumCircuits WHERE qubit_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, gate_count FROM QuantumCircuits JOIN CircuitExecutionLogs ON QuantumCircuits.circuit_id = CircuitExecutionLogs.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT QuantumCircuits.circuit_name, QuantumGateLibrary.gate_name FROM QuantumCircuits INNER JOIN QuantumGateLibrary ON QuantumCircuits.circuit_id = QuantumGateLibrary.gate_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, gate_count, execution_time FROM QuantumCircuits LEFT JOIN CircuitExecutionLogs ON QuantumCircuits.circuit_id = CircuitExecutionLogs.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(execution_time) AS avg_execution_time FROM CircuitExecutionLogs WHERE success = true GROUP BY circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, MAX(optimization_level) AS max_optimization_level FROM QuantumCircuits;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS circuit_count FROM QuantumCircuits;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM CircuitExecutionLogs WHERE execution_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, COUNT(log_id) AS log_count FROM QuantumCircuits LEFT JOIN CircuitExecutionLogs ON QuantumCircuits.circuit_id = CircuitExecutionLogs.circuit_id GROUP BY circuit_name;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, COUNT(*) AS execution_count FROM CircuitExecutionLogs GROUP BY circuit_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, algorithm_name FROM QuantumCircuits CROSS JOIN QuantumOptimizerConfig;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, execution_time, optimizer_name FROM QuantumCircuits JOIN AlgorithmOptimizationHistory ON QuantumCircuits.circuit_id = AlgorithmOptimizationHistory.circuit_id JOIN QuantumOptimizerConfig ON AlgorithmOptimizationHistory.config_id = QuantumOptimizerConfig.config_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(optimization_steps) AS avg_optimization_steps, MAX(optimization_steps) AS max_optimization_steps FROM AlgorithmOptimizationHistory GROUP BY circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, optimization_strategy, learning_rate FROM QuantumOptimizerConfig WHERE max_iterations > 100;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM QuantumGateLibrary WHERE gate_type = 'X-Gate';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT gate_name, gate_matrix FROM QuantumGateLibrary WHERE gate_matrix LIKE '%Hadamard%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, optimization_date FROM QuantumCircuits JOIN AlgorithmOptimizationHistory ON QuantumCircuits.circuit_id = AlgorithmOptimizationHistory.circuit_id WHERE optimization_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, SUM(opt_steps) AS total_optimization_steps FROM (SELECT circuit_id, SUM(optimization_steps) AS opt_steps FROM AlgorithmOptimizationHistory GROUP BY circuit_id) AS temp_table JOIN QuantumCircuits ON QuantumCircuits.circuit_id = temp_table.circuit_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_id, COUNT(*) AS opt_count FROM AlgorithmOptimizationHistory GROUP BY circuit_id ORDER BY opt_count DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCircuits (\n    circuit_id UUID PRIMARY KEY,\n    circuit_name VARCHAR(255),\n    qubit_count INT,\n    gate_count INT,\n    optimization_level INT\n)\n\nCREATE TABLE QuantumGateLibrary (\n    gate_id UUID PRIMARY KEY,\n    gate_name VARCHAR(100),\n    gate_type VARCHAR(50),\n    gate_matrix TEXT\n)\n\nCREATE TABLE CircuitExecutionLogs (\n    log_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    execution_time FLOAT,\n    success BOOLEAN,\n    execution_date TIMESTAMP\n)\n\nCREATE TABLE AlgorithmOptimizationHistory (\n    optimization_id UUID PRIMARY KEY,\n    circuit_id UUID REFERENCES QuantumCircuits(circuit_id),\n    optimization_date TIMESTAMP,\n    optimization_steps INT,\n    execution_time FLOAT\n)\n\nCREATE TABLE QuantumOptimizerConfig (\n    config_id UUID PRIMARY KEY,\n    optimizer_name VARCHAR(100),\n    optimization_strategy TEXT,\n    max_iterations INT,\n    learning_rate FLOAT\n)\n\n### STATEMENT\n\nSELECT circuit_name, gate_count, optimizer_name FROM QuantumCircuits JOIN AlgorithmOptimizationHistory ON QuantumCircuits.circuit_id = AlgorithmOptimizationHistory.circuit_id JOIN QuantumOptimizerConfig ON AlgorithmOptimizationHistory.config_id = QuantumOptimizerConfig.config_id WHERE gate_count > 10;"
]