[
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET password_hash = 'new_password' WHERE user_id = '12345678-1234-1234-1234-123456789abc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET role = 'admin' WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET created_at = '2022-01-01 10:00:00' WHERE user_id = '87654321-4321-4321-4321-0987654321abc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET username = 'new_username' WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET password_hash = 'new_password_hash' WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPDATE users SET username = 'new_username', role = 'user' WHERE created_at < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'john_doe' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE access_controls SET permission_type = 'READ' WHERE control_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE users SET password = 'new_password' WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE users SET username = 'john_doe' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE access_controls SET permission_type = 'read_write' WHERE control_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPDATE users JOIN access_controls ON users.user_id = access_controls.user_id SET users.username = 'jane_smith' WHERE access_controls.control_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE users SET password='newpassword' WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE roles SET role_name='Admin User' WHERE role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id=2 WHERE user_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE users SET username = 'johndoe', password = 'newpassword' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 1 AND role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE users SET password = 'new-password' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE resources SET description = 'Updated description' WHERE resource_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE users SET password = 'newpassword' WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE roles SET role_name = 'Admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nUPDATE user_roles SET role_id = 2 WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_auth SET password = 'new_password' WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_name = 'admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_name = 'read_only' WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_auth SET password = 'new_password' WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_roles SET role_name = 'admin' WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nUPDATE user_permissions SET permission_name = 'read_only' WHERE permission_id = 2;"
]