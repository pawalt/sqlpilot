[
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, role FROM users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username, created_at FROM users WHERE role = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username FROM users WHERE created_at < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role IN ('admin', 'user');",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id FROM users WHERE username LIKE 'john%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN ('123e4567-e89b-12d3-a456-426614174000', '234e5678-e89b-12d3-b456-426614174001');",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'user' AND created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT role, COUNT(*) FROM users GROUP BY role;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username = 'alice' OR username = 'bob';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'admin' ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, role FROM users WHERE role = 'admin' OR role = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE created_at >= '2022-06-01' AND created_at < '2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE role = 'admin' AND created_at < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' OR role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE role = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, created_at FROM users WHERE username LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE created_at > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'admin' AND created_at < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'user' OR username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(created_at), MIN(created_at) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, role FROM users WHERE username = 'alice';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'admin' AND created_at < '2022-01-01' ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'user' AND created_at < '2022-01-01' ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, role, created_at FROM users WHERE role = 'admin' AND created_at > '2020-01-01' ORDER BY created_at DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, created_at FROM users WHERE role = 'user' AND created_at < '2022-01-01' ORDER BY created_at ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, role FROM users WHERE username LIKE '%doe%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username, role FROM users WHERE created_at BETWEEN '2021-01-01' AND '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_admins FROM users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, role FROM users WHERE role = 'user' UNION SELECT 'guest', 'guest';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role IN ('admin', 'user') ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, role FROM users WHERE role = 'admin' GROUP BY role;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(DATE_PART('year', AGE(created_at))) AS avg_age FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM access_controls;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT control_id, user_id, resource_id, permission_type FROM access_controls;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT control_id, permission_type FROM access_controls WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT control_id, resource_id FROM access_controls WHERE permission_type = 'read';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, resource_id FROM access_controls WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'a%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT control_id, permission_type FROM access_controls WHERE resource_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_type FROM access_controls WHERE control_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 3 OR user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT control_id, resource_id FROM access_controls WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'alice' OR username = 'bob';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, resource_id FROM access_controls WHERE permission_type = 'write';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE password LIKE '%123%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id FROM access_controls WHERE permission_type = 'read';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_type FROM access_controls WHERE resource_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.permission_type FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id WHERE a.resource_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.permission_type FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id WHERE a.permission_type IN ('read', 'write');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users u LEFT JOIN access_controls a ON u.user_id = a.user_id WHERE a.user_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(a.control_id) AS num_controls FROM users u LEFT JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username HAVING num_controls > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MAX(a.resource_id) AS max_resource_id FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT a.resource_id) AS num_resources FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, SUM(a.resource_id) AS total_resource_id FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(a.resource_id) AS avg_resource_id FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, MIN(a.resource_id) AS min_resource_id FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, a.resource_id FROM users u INNER JOIN access_controls a ON u.user_id = a.user_id WHERE a.resource_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM users WHERE user_id IN (SELECT user_id FROM access_controls WHERE permission_type = 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT permission_type FROM access_controls;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY username ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT role_name FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE users.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM roles ORDER BY role_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(role_id) FROM user_roles GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT MAX(role_id) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT DISTINCT role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'j%';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id FROM user_roles WHERE role_id IN (SELECT role_id FROM roles WHERE role_name = 'admin');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(role_id) AS num_roles FROM user_roles GROUP BY user_id HAVING num_roles > 2;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users LEFT JOIN user_roles ON users.user_id = user_roles.user_id LEFT JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE roles.role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_roles FROM user_roles GROUP BY user_id ORDER BY num_roles DESC;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (SELECT user_id FROM user_roles WHERE role_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, AVG(user_id) AS avg_userid FROM users GROUP BY username HAVING AVG(user_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id, username FROM users ORDER BY username DESC;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS num_roles FROM users JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS num_roles FROM users JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY username HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT MAX(user_id) AS max_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users UNION SELECT user_id, role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id WHERE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT users.username, COUNT(*) AS num_roles FROM users JOIN user_roles ON users.user_id = user_roles.user_id GROUP BY users.username HAVING num_roles = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE user_id = 1 AND role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(role_id) AS num_roles FROM user_roles GROUP BY user_id HAVING num_roles = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE user_id IN (SELECT user_id FROM users WHERE username = 'John');",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, username FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT role_id, role_name FROM roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT role_id, role_name FROM roles WHERE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT role_id, role_name FROM roles ORDER BY role_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_roles ORDER BY user_id DESC, role_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM resources;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT resource_id, resource_name, description FROM resources WHERE resource_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT resource_id, resource_name, description FROM resources WHERE resource_name = 'example';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT resource_id, resource_name, description FROM resources ORDER BY resource_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, r.role_name FROM users u INNER JOIN user_roles ur ON u.user_id = ur.user_id INNER JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT DISTINCT u.user_id, u.username, r.role_name FROM users u INNER JOIN user_roles ur ON u.user_id = ur.user_id INNER JOIN roles r ON ur.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT AVG(user_id) AS avg_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT role_name FROM roles WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT username, role_name FROM users JOIN user_roles ON users.user_id = user_roles.user_id JOIN roles ON user_roles.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT resource_name, description FROM resources WHERE resource_id IN (SELECT role_id FROM user_roles WHERE user_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id WHERE u.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT u.username, r.role_name, res.resource_name FROM users u JOIN user_roles ur ON u.user_id = ur.user_id JOIN roles r ON ur.role_id = r.role_id JOIN resources res ON res.resource_id = ur.role_id WHERE u.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT COUNT(*) AS user_count FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT AVG(resource_id) AS avg_resource_id FROM resources;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT MAX(user_id) AS max_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT username, COUNT(ur.role_id) AS role_count FROM users u JOIN user_roles ur ON u.user_id = ur.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT role_name, COUNT(ur.user_id) AS user_count FROM roles r JOIN user_roles ur ON r.role_id = ur.role_id GROUP BY role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT resource_id, COUNT(u.username) AS user_count FROM resources res JOIN user_roles ur ON res.resource_id = ur.role_id JOIN users u ON u.user_id = ur.user_id GROUP BY resource_id;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'a%';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' AND password = 'pass@123';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'admin' OR role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users, SUM(user_id) AS sum_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT permission_name FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_role_mapping;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_id, COUNT(*) FROM user_role_mapping GROUP BY user_id, role_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM role_permission_mapping;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_id, permission_id FROM role_permission_mapping;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_name, permission_name FROM user_roles JOIN role_permission_mapping ON user_roles.role_id = role_permission_mapping.role_id JOIN user_permissions ON role_permission_mapping.permission_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username, role_name, permission_name FROM user_auth JOIN user_role_mapping ON user_auth.user_id = user_role_mapping.user_id JOIN user_roles ON user_role_mapping.role_id = user_roles.role_id JOIN role_permission_mapping ON user_roles.role_id = role_permission_mapping.role_id JOIN user_permissions ON role_permission_mapping.permission_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_name, permission_name FROM user_auth JOIN user_role_mapping ON user_auth.user_id = user_role_mapping.user_id JOIN user_roles ON user_role_mapping.role_id = user_roles.role_id JOIN role_permission_mapping ON user_roles.role_id = role_permission_mapping.role_id JOIN user_permissions ON role_permission_mapping.permission_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role_name, permission_name FROM user_auth JOIN user_role_mapping ON user_auth.user_id = user_role_mapping.user_id JOIN user_roles ON user_role_mapping.role_id = user_roles.role_id JOIN role_permission_mapping ON user_roles.role_id = role_permission_mapping.role_id JOIN user_permissions ON role_permission_mapping.permission_id = user_permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username FROM user_auth WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_name FROM user_roles WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT permission_name FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_id FROM user_role_mapping WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_id, permission_id FROM role_permission_mapping WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, role_name FROM user_auth INNER JOIN user_role_mapping ON user_auth.user_id = user_role_mapping.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_name, permission_name FROM user_roles INNER JOIN role_permission_mapping ON user_roles.role_id = role_permission_mapping.role_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_auth.username, user_roles.role_name FROM user_auth INNER JOIN user_role_mapping ON user_auth.user_id = user_role_mapping.user_id INNER JOIN user_roles ON user_role_mapping.role_id = user_roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_roles FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) AS avg_user_id FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MAX(permission_id) AS max_permission_id FROM user_permissions;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MIN(role_id) AS min_role_id FROM user_roles;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT SUM(user_id) AS total_user_id FROM user_auth;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_auth ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_roles ORDER BY role_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(role_id) FROM user_role_mapping GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_id, COUNT(permission_id) FROM role_permission_mapping GROUP BY role_id;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT role_name, COUNT(*) AS total_permissions FROM role_permission_mapping INNER JOIN user_roles ON role_permission_mapping.role_id = user_roles.role_id GROUP BY role_name;"
]