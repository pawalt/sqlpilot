[
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('1', 'john_doe', 'hash123', 'admin', '2022-01-01 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', password_hash = 'hash123', role = 'admin', created_at = '2022-01-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('2', 'jane_smith', 'pass456', 'user', '2022-01-02 08:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', password_hash = 'pass456', role = 'user', created_at = '2022-01-02 08:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('3', 'mary_jones', 'password789', 'user', '2022-01-03 15:45:00') ON CONFLICT (user_id) DO UPDATE SET username = 'mary_jones', password_hash = 'password789', role = 'user', created_at = '2022-01-03 15:45:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('4', 'peter_pan', 'pan123', 'user', '2022-01-04 10:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'peter_pan', password_hash = 'pan123', role = 'user', created_at = '2022-01-04 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('5', 'alice_wonder', 'wonderland123', 'user', '2022-01-05 16:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_wonder', password_hash = 'wonderland123', role = 'user', created_at = '2022-01-05 16:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('6', 'bob_bean', 'beanstalk456', 'admin', '2022-01-06 11:15:00') ON CONFLICT (user_id) DO UPDATE SET username = 'bob_bean', password_hash = 'beanstalk456', role = 'admin', created_at = '2022-01-06 11:15:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('7', 'susan_rice', 'rice789', 'user', '2022-01-07 17:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'susan_rice', password_hash = 'rice789', role = 'user', created_at = '2022-01-07 17:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('8', 'kevin_snow', 'frozen123', 'user', '2022-01-08 13:45:00') ON CONFLICT (user_id) DO UPDATE SET username = 'kevin_snow', password_hash = 'frozen123', role = 'user', created_at = '2022-01-08 13:45:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('9', 'linda_green', 'green123', 'admin', '2022-01-09 11:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'linda_green', password_hash = 'green123', role = 'admin', created_at = '2022-01-09 11:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('10', 'tom_brown', 'brown123', 'user', '2022-01-10 18:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'tom_brown', password_hash = 'brown123', role = 'user', created_at = '2022-01-10 18:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('11', 'emma_white', 'white456', 'user', '2022-01-11 14:45:00') ON CONFLICT (user_id) DO UPDATE SET username = 'emma_white', password_hash = 'white456', role = 'user', created_at = '2022-01-11 14:45:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('12', 'willow_tree', 'tree123', 'user', '2022-01-12 09:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'willow_tree', password_hash = 'tree123', role = 'user', created_at = '2022-01-12 09:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('13', 'johnny_apple', 'apple456', 'admin', '2022-01-13 19:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'johnny_apple', password_hash = 'apple456', role = 'admin', created_at = '2022-01-13 19:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('14', 'lily_flower', 'flower123', 'user', '2022-01-14 15:15:00') ON CONFLICT (user_id) DO UPDATE SET username = 'lily_flower', password_hash = 'flower123', role = 'user', created_at = '2022-01-14 15:15:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('15', 'max_black', 'black789', 'user', '2022-01-15 10:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'max_black', password_hash = 'black789', role = 'user', created_at = '2022-01-15 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('16', 'ruby_red', 'red123', 'user', '2022-01-16 16:45:00') ON CONFLICT (user_id) DO UPDATE SET username = 'ruby_red', password_hash = 'red123', role = 'user', created_at = '2022-01-16 16:45:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('17', 'luke_sky', 'force456', 'admin', '2022-01-17 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'luke_sky', password_hash = 'force456', role = 'admin', created_at = '2022-01-17 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('18', 'sara_ocean', 'water123', 'user', '2022-01-18 08:15:00') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_ocean', password_hash = 'water123', role = 'user', created_at = '2022-01-18 08:15:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('19', 'jack_hill', 'hill789', 'admin', '2022-01-19 13:30:00') ON CONFLICT (user_id) DO UPDATE SET username = 'jack_hill', password_hash = 'hill789', role = 'admin', created_at = '2022-01-19 13:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('20', 'olivia_sky', 'cloud123', 'user', '2022-01-20 19:45:00') ON CONFLICT (user_id) DO UPDATE SET username = 'olivia_sky', password_hash = 'cloud123', role = 'user', created_at = '2022-01-20 19:45:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('1', 'john_doe', 'password123', 'admin', CURRENT_TIMESTAMP) ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, created_at = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('2', 'jane_smith', 'pass456', 'user', CURRENT_TIMESTAMP) ON CONFLICT (user_id) DO UPDATE SET role = EXCLUDED.role, created_at = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('3', 'bob_johnson', 'mypass', 'user', CURRENT_TIMESTAMP) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('4', 'alice_white', '123pass', 'admin', CURRENT_TIMESTAMP) ON CONFLICT (user_id) DO UPDATE SET password_hash = EXCLUDED.password_hash, created_at = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  role ENUM('admin', 'user') NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password_hash, role, created_at) VALUES ('5', 'sam_miller', 'mypass123', 'user', CURRENT_TIMES...",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username=VALUES(username), password=VALUES(password);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'letmein') ON DUPLICATE KEY UPDATE username=VALUES(username), password=VALUES(password);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (3, 'alice_wonderland', 'rabbit') ON DUPLICATE KEY UPDATE username=VALUES(username), password=VALUES(password);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (4, 'bob_jenkins', 'secret123') ON DUPLICATE KEY UPDATE username=VALUES(username), password=VALUES(password);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (1, 1, 100, 'read') ON DUPLICATE KEY UPDATE user_id=VALUES(user_id), resource_id=VALUES(resource_id), permission_type=VALUES(permission_type);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (2, 2, 101, 'write') ON DUPLICATE KEY UPDATE user_id=VALUES(user_id), resource_id=VALUES(resource_id), permission_type=VALUES(permission_type);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (3, 3, 102, 'execute') ON DUPLICATE KEY UPDATE user_id=VALUES(user_id), resource_id=VALUES(resource_id), permission_type=VALUES(permission_type);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (4, 4, 103, 'delete') ON DUPLICATE KEY UPDATE user_id=VALUES(user_id), resource_id=VALUES(resource_id), permission_type=VALUES(permission_type);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (1, 'john.doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (2, 'jane.smith', 's3cur3Pwd') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (1, 1, 100, 'read') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (2, 2, 101, 'write') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (3, 'alice.wonderland', 'w0nd3rl@nd') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (4, 'bob.thomas', 't0m@to') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (3, 3, 102, 'read') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (4, 4, 103, 'write') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (5, 'charlie.smith', 'c4a0t!') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (6, 'daisy.jones', 'd@isy123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (5, 5, 104, 'read') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (6, 6, 105, 'write') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (7, 'emma.johnson', '3mm@123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (8, 'frank.white', 'wh1t3f@rm') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (7, 7, 106, 'read') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (8, 8, 107, 'write') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (9, 'grace.thompson', 't0m@to') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (10, 'henry.miller', 'm!ll3rH') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (9, 9, 108, 'read') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE access_controls (\n    control_id INT PRIMARY KEY,\n    user_id INT NOT NULL,\n    resource_id INT NOT NULL,\n    permission_type VARCHAR(20) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nUPSERT INTO access_controls (control_id, user_id, resource_id, permission_type) VALUES (10, 10, 109, 'write') ON CONFLICT (control_id) DO UPDATE SET user_id = excluded.user_id, resource_id = excluded.resource_id, permission_type = excluded.permission_type;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username = 'john_doe', password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'securepass') ON DUPLICATE KEY UPDATE username = 'jane_smith', password = 'securepass';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role_name = 'user';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE user_id = 1, role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE user_id = 2, role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (3, 'alice_smith', 'pass123') ON DUPLICATE KEY UPDATE username = 'alice_smith', password = 'pass123';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (4, 'bob_jones', 'testpass') ON DUPLICATE KEY UPDATE username = 'bob_jones', password = 'testpass';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (3, 'manager') ON DUPLICATE KEY UPDATE role_name = 'manager';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (4, 'guest') ON DUPLICATE KEY UPDATE role_name = 'guest';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE user_id = 3, role_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE user_id = 4, role_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (5, 'sam_williams', 'password456') ON DUPLICATE KEY UPDATE username = 'sam_williams', password = 'password456';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (6, 'sara_johnson', 'pass567') ON DUPLICATE KEY UPDATE username = 'sara_johnson', password = 'pass567';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (5, 'developer') ON DUPLICATE KEY UPDATE role_name = 'developer';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name) VALUES (6, 'designer') ON DUPLICATE KEY UPDATE role_name = 'designer';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (5, 5) ON DUPLICATE KEY UPDATE user_id = 5, role_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO user_roles (user_id, role_id) VALUES (6, 6) ON DUPLICATE KEY UPDATE user_id = 6, role_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (7, 'max_roberts', 'maxpass') ON DUPLICATE KEY UPDATE username = 'max_roberts', password = 'maxpass';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password) VALUES (8, 'lily_smith', 'lilypass') ON DUPLICATE KEY UPDATE username = 'lily_smith', password = 'lilypass';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password1') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_update', password = 'password1_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'admin_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'password2') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith_update', password = 'password2_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'user_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alice_green', 'password3') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_green_update', password = 'password3_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'manager') ON CONFLICT (role_id) DO UPDATE SET role_name = 'manager_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'bob_jones', 'password4') ON CONFLICT (user_id) DO UPDATE SET username = 'bob_jones_update', password = 'password4_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (4, 'developer') ON CONFLICT (role_id) DO UPDATE SET role_name = 'developer_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'emma_brown', 'password5') ON CONFLICT (user_id) DO UPDATE SET username = 'emma_brown_update', password = 'password5_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (5, 'tester') ON CONFLICT (role_id) DO UPDATE SET role_name = 'tester_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (5, 5) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'sam_wilson', 'password6') ON CONFLICT (user_id) DO UPDATE SET username = 'sam_wilson_update', password = 'password6_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (6, 'analyst') ON CONFLICT (role_id) DO UPDATE SET role_name = 'analyst_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (6, 6) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'sara_white', 'password7') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_white_update', password = 'password7_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (7, 'designer') ON CONFLICT (role_id) DO UPDATE SET role_name = 'designer_update';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE roles ( \n    role_id INT PRIMARY KEY, \n    role_name VARCHAR(50) NOT NULL \n);\n\nCREATE TABLE user_roles ( \n    user_id INT, \n    role_id INT, \n    PRIMARY KEY (user_id, role_id), \n    FOREIGN KEY (user_id) REFERENCES users(user_id), \n    FOREIGN KEY (role_id) REFERENCES roles(role_id) \n);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (7, 7) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user1', 'password1') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('admin') ON CONFLICT (role_id) DO UPDATE SET role_name=EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_name, description) VALUES ('resource1', 'This is resource 1') ON CONFLICT (resource_id) DO UPDATE SET resource_name=EXCLUDED.resource_name, description=EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user2', 'password2') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('user') ON CONFLICT (role_id) DO UPDATE SET role_name=EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_name, description) VALUES ('resource2', 'This is resource 2') ON CONFLICT (resource_id) DO UPDATE SET resource_name=EXCLUDED.resource_name, description=EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user3', 'password3') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('guest') ON CONFLICT (role_id) DO UPDATE SET role_name=EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_name, description) VALUES ('resource3', 'This is resource 3') ON CONFLICT (resource_id) DO UPDATE SET resource_name=EXCLUDED.resource_name, description=EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user4', 'password4') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('manager') ON CONFLICT (role_id) DO UPDATE SET role_name=EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_name, description) VALUES ('resource4', 'This is resource 4') ON CONFLICT (resource_id) DO UPDATE SET resource_name=EXCLUDED.resource_name, description=EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user5', 'password5') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_name) VALUES ('analyst') ON CONFLICT (role_id) DO UPDATE SET role_name=EXCLUDED.role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (5, 5) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_name, description) VALUES ('resource5', 'This is resource 5') ON CONFLICT (resource_id) DO UPDATE SET resource_name=EXCLUDED.resource_name, description=EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (username, password) VALUES ('user6', 'password6') ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username, password=EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_smith', password = 'new_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (1, 'Admin') ON CONFLICT (role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (1, 1) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_id, resource_name, description) VALUES (1, 'Example Resource', 'This is an example resource') ON CONFLICT (resource_id) DO UPDATE SET resource_name = 'Updated Resource', description = 'Updated description';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_doe', 'password456') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (2, 'Viewer') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Read Only';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (2, 2) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_id, resource_name, description) VALUES (2, 'Another Resource', 'This is another resource') ON CONFLICT (resource_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'test_user', 'test123') ON CONFLICT (user_id) DO UPDATE SET username = 'new_user', password = 'new_password';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (3, 'Editor') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Content Creator';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (3, 3) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_id, resource_name, description) VALUES (3, 'Test Resource', 'This is a test resource') ON CONFLICT (resource_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'new_user', 'newpassword123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (4, 'Guest') ON CONFLICT (role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (4, 4) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_id, resource_name, description) VALUES (4, 'Guest Resource', 'This is a resource for guests') ON CONFLICT (resource_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'admin_user', 'admin123') ON CONFLICT (user_id) DO UPDATE SET username = 'admin', password = 'adminpassword';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name) VALUES (5, 'Super Admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'Administrator';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO user_roles (user_id, role_id) VALUES (5, 5) ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id SERIAL PRIMARY KEY,\n           username VARCHAR(50) NOT NULL,\n           password VARCHAR(100) NOT NULL);\n\nCREATE TABLE roles (role_id SERIAL PRIMARY KEY,\n           role_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_roles (user_id INT REFERENCES users(user_id),\n           role_id INT REFERENCES roles(role_id),\n           PRIMARY KEY (user_id, role_id));\n\nCREATE TABLE resources (resource_id SERIAL PRIMARY KEY,\n           resource_name VARCHAR(50) NOT NULL,\n           description TEXT);\n\n### STATEMENT\n\nINSERT INTO resources (resource_id, resource_name, description) VALUES (5, 'Admin Resource', 'This is a resource for admins') ON CONFLICT (resource_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username='john_doe', password='password123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role_name='admin';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (1, 'read') ON DUPLICATE KEY UPDATE permission_name='read';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE user_id=1, role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping (role_id, permission_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE role_id=1, permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth (user_id, username, password) VALUES (2, 'jane_smith', 'p@ssw0rd') ON DUPLICATE KEY UPDATE username='jane_smith', password='p@ssw0rd';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role_name='user';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (2, 'write') ON DUPLICATE KEY UPDATE permission_name='write';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE user_id=2, role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping (role_id, permission_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE role_id=2, permission_id=2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth (user_id, username, password) VALUES (3, 'alice_wonderland', 'alice123') ON DUPLICATE KEY UPDATE username='alice_wonderland', password='alice123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (3, 'guest') ON DUPLICATE KEY UPDATE role_name='guest';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (3, 'execute') ON DUPLICATE KEY UPDATE permission_name='execute';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE user_id=3, role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping (role_id, permission_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE role_id=3, permission_id=3;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth (user_id, username, password) VALUES (4, 'bob_roberts', 'pass123') ON DUPLICATE KEY UPDATE username='bob_roberts', password='pass123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES (4, 'editor') ON DUPLICATE KEY UPDATE role_name='editor';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES (4, 'delete') ON DUPLICATE KEY UPDATE permission_name='delete';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE user_id=4, role_id=4;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping (role_id, permission_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE role_id=4, permission_id=4;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth(user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username='john_doe_update', password='updated_password123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles(role_id, role_name) VALUES (1, 'admin') ON DUPLICATE KEY UPDATE role_name='admin_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions(permission_id, permission_name) VALUES (1, 'read') ON DUPLICATE KEY UPDATE permission_name='read_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping(user_id, role_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping(role_id, permission_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth(user_id, username, password) VALUES (2, 'jane_smith', 'smithy123') ON DUPLICATE KEY UPDATE username='jane_smith_updated', password='updated_smithy123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles(role_id, role_name) VALUES (2, 'user') ON DUPLICATE KEY UPDATE role_name='user_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions(permission_id, permission_name) VALUES (2, 'write') ON DUPLICATE KEY UPDATE permission_name='write_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping(user_id, role_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping(role_id, permission_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE permission_id=2;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth(user_id, username, password) VALUES (3, 'sam_roberts', 'sam123') ON DUPLICATE KEY UPDATE username='sam_roberts_updated', password='updated_sam123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles(role_id, role_name) VALUES (3, 'guest') ON DUPLICATE KEY UPDATE role_name='guest_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions(permission_id, permission_name) VALUES (3, 'delete') ON DUPLICATE KEY UPDATE permission_name='delete_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping(user_id, role_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping(role_id, permission_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE permission_id=3;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_auth(user_id, username, password) VALUES (4, 'mary_brown', 'marybrown123') ON DUPLICATE KEY UPDATE username='mary_brown_updated', password='updated_marybrown123';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles(role_id, role_name) VALUES (4, 'editor') ON DUPLICATE KEY UPDATE role_name='editor_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions(permission_id, permission_name) VALUES (4, 'update') ON DUPLICATE KEY UPDATE permission_name='update_updated';",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping(user_id, role_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE role_id=4;",
  "### TABLEDATA\n\nCREATE TABLE user_auth (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id INT,\n    role_id INT,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES user_auth(user_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)\n);\n\nCREATE TABLE role_permission_mapping (\n    role_id INT,\n    permission_id INT,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES user_roles(role_id),\n    FOREIGN KEY (permission_id) REFERENCES user_permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO role_permission_mapping(role_id, permission_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE permission_id=4;"
]