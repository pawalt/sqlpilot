[
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, description FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, description, error_threshold FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, error_threshold FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE algorithm_name = 'Shor';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE error_threshold < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction ORDER BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction ORDER BY error_threshold DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(error_threshold) FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT MAX(error_threshold) FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT MIN(error_threshold) FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT SUM(error_threshold) FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE algorithm_name LIKE '%quantum%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, description FROM quantum_error_correction WHERE error_threshold < 0.05;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, description FROM quantum_error_correction WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE algorithm_name LIKE '%Shor%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, error_threshold FROM quantum_error_correction WHERE error_threshold > 0.1 ORDER BY error_threshold DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS total_errors FROM quantum_error_correction GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(error_threshold) AS avg_error_threshold, MAX(error_threshold) AS max_error_threshold, MIN(error_threshold) AS min_error_threshold FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, description, error_threshold FROM quantum_error_correction WHERE description IS NOT NULL AND error_threshold BETWEEN 0.05 AND 0.1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE algorithm_name IN ('Shor', 'Grover', 'Steane');",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, error_threshold FROM quantum_error_correction WHERE LENGTH(description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE algorithm_name = 'Shor' OR algorithm_name = 'Steane';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, SUM(error_threshold) AS total_error_threshold FROM quantum_error_correction GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, description FROM quantum_error_correction WHERE algorithm_name = 'Shor' AND error_threshold < 0.05;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE id NOT IN (2, 4, 6, 8);",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction WHERE id > 15 OR error_threshold < 0.01;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, error_threshold, ROUND(error_threshold, 2) AS rounded_error_threshold FROM quantum_error_correction;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(*) AS total_records, SUM(error_threshold) AS total_error_threshold, AVG(error_threshold) AS avg_error_threshold FROM quantum_error_correction GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction (\n  id INT PRIMARY KEY,\n  algorithm_name VARCHAR(255),\n  description TEXT,\n  error_threshold FLOAT\n)\n\n### STATEMENT\n\nSELECT id, algorithm_name, description, error_threshold FROM quantum_error_correction WHERE description LIKE '%error%' AND error_threshold >= 0.01;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_correction_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT code_id, code_type FROM error_correction_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, algorithm_description FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_name = 'Shor';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_correction_codes WHERE code_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_correction_codes WHERE code_type = 'Hamming';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT code_id, code_type FROM error_correction_codes WHERE code_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_name = 'Grover';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT code_id, code_type FROM error_correction_codes WHERE code_type = 'Reed-Solomon';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, algorithm_description FROM quantum_error_correction_algorithm WHERE algorithm_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_correction_codes WHERE code_type LIKE 'H%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT code_id, code_type FROM error_correction_codes WHERE code_properties IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm ORDER BY algorithm_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_correction_codes ORDER BY code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, algorithm_description FROM quantum_error_correction_algorithm WHERE algorithm_name LIKE 'Q%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithm WHERE algorithm_description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, code_type FROM quantum_error_correction_algorithm INNER JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, code_type FROM quantum_error_correction_algorithm LEFT JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, code_type FROM quantum_error_correction_algorithm RIGHT JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, code_type FROM quantum_error_correction_algorithm FULL JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, code_type FROM quantum_error_correction_algorithm CROSS JOIN error_correction_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm WHERE algorithm_id NOT BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, code_type FROM quantum_error_correction_algorithm JOIN error_correction_codes USING (algorithm_id);",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_id, algorithm_name FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT algorithm_name) FROM quantum_error_correction_algorithm;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name, code_type FROM quantum_error_correction_algorithm WHERE algorithm_id = 1 UNION SELECT algorithm_id, algorithm_name, code_type FROM quantum_error_correction_algorithm WHERE algorithm_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, COUNT(code_id) FROM quantum_error_correction_algorithm LEFT JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, MAX(code_id) FROM quantum_error_correction_algorithm LEFT JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithm (\n    algorithm_id INT PRIMARY KEY,\n    algorithm_name VARCHAR(50) NOT NULL,\n    algorithm_description TEXT\n);\n\nCREATE TABLE error_correction_codes (\n    code_id INT PRIMARY KEY,\n    code_type VARCHAR(50) NOT NULL,\n    code_properties TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, SUM(code_id) FROM quantum_error_correction_algorithm LEFT JOIN error_correction_codes ON quantum_error_correction_algorithm.algorithm_id = error_correction_codes.code_id GROUP BY algorithm_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_code;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name FROM quantum_code;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM qubit;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qubit_value FROM qubit;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM syndromes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT syndrome_info FROM syndromes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, qb.qubit_value FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qb.qubit_value, s.syndrome_info FROM qubit qb JOIN syndromes s ON qb.qubit_id = s.qubit_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, s.syndrome_info FROM quantum_code qc JOIN syndromes s ON qc.code_id = s.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT qb.qubit_value FROM qubit qb;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_code WHERE code_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM qubit WHERE code_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM syndromes WHERE code_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, qb.qubit_value, s.syndrome_info FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id JOIN syndromes s ON qb.qubit_id = s.qubit_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, qb.qubit_value, s.syndrome_info FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id JOIN syndromes s ON qc.code_id = s.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, qb.qubit_value, s.syndrome_info FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id JOIN syndromes s ON s.qubit_id = qb.qubit_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, qb.qubit_value, s.syndrome_info FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id JOIN syndromes s ON qc.code_id = s.code_id AND qb.qubit_id = s.qubit_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_code ORDER BY code_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM qubit ORDER BY qubit_value ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qc.code_name, COUNT(qb.qubit_id) AS qubit_count FROM quantum_code qc JOIN qubit qb ON qc.code_id = qb.code_id GROUP BY qc.code_name HAVING COUNT(qb.qubit_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, error_type FROM quantum_code WHERE code_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qubit_value FROM qubit WHERE code_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT syndrome_info FROM syndromes WHERE syndrome_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, error_type, qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, syndrome_info FROM quantum_code INNER JOIN syndromes ON quantum_code.code_id = syndromes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT quantum_code.code_name, qubit.qubit_value, syndromes.syndrome_info FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id INNER JOIN syndromes ON quantum_code.code_id = syndromes.code_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, AVG(qubit_value) AS avg_qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, COUNT(*) AS qubits_count FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, MAX(qubit_value) AS max_qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, MIN(qubit_value) AS min_qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, SUM(qubit_value) AS total_qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, COUNT(*) AS syndromes_count FROM quantum_code INNER JOIN syndromes ON quantum_code.code_id = syndromes.code_id GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT syndrome_info, AVG(qubit_value) AS avg_qubit_value FROM syndromes INNER JOIN qubit ON syndromes.qubit_id = qubit.qubit_id GROUP BY syndrome_info;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_value) AS avg_qubit_value FROM qubit;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, error_type FROM quantum_code WHERE error_type = 'X' OR error_type = 'Z';",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, error_type FROM quantum_code WHERE code_name LIKE 'Q%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT syndromes.syndrome_info FROM syndromes INNER JOIN qubit ON syndromes.qubit_id = qubit.qubit_id WHERE qubit.qubit_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT qubit.qubit_value FROM qubit INNER JOIN quantum_code ON qubit.code_id = quantum_code.code_id WHERE quantum_code.code_name = 'Qubit';",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, AVG(qubit_value) AS avg_qubit_value FROM quantum_code INNER JOIN qubit ON quantum_code.code_id = qubit.code_id WHERE qubit.qubit_value > 0.5 GROUP BY code_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_code (\n    code_id SERIAL PRIMARY KEY,\n    code_name VARCHAR(255) NOT NULL,\n    error_type VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE qubit (\n    qubit_id SERIAL PRIMARY KEY,\n    qubit_value FLOAT NOT NULL,\n    code_id INTEGER NOT NULL\n);\n\nCREATE TABLE syndromes (\n    syndrome_id SERIAL PRIMARY KEY,\n    syndrome_info TEXT NOT NULL,\n    code_id INTEGER NOT NULL,\n    qubit_id INTEGER NOT NULL\n);\n\n### STATEMENT\n\nSELECT code_name, COUNT(*) AS syndromes_count FROM quantum_code INNER JOIN syndromes ON quantum_code.code_id = syndromes.code_id WHERE syndromes.syndrome_info LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_code FROM SyndromeTable;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT error_description FROM ErrorMatrix;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_rule FROM CorrectionMatrix;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word_id, code_word FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_id, syndrome_code FROM SyndromeTable;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT error_id, error_type, error_description FROM ErrorMatrix;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_id, correction_type, correction_rule FROM CorrectionMatrix;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords WHERE code_word_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word FROM QuantumCodeWords WHERE code_word LIKE '%abc%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM SyndromeTable WHERE syndrome_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_code FROM SyndromeTable WHERE syndrome_code = 'XYZ';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM ErrorMatrix WHERE error_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT error_type, error_description FROM ErrorMatrix WHERE error_type = 'TypeA';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM CorrectionMatrix WHERE correction_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_type, correction_rule FROM CorrectionMatrix WHERE correction_rule LIKE '%rule%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM CorrectionMatrix ORDER BY correction_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords WHERE code_word_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word FROM QuantumCodeWords WHERE code_word LIKE '%xyz%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_code FROM SyndromeTable ORDER BY syndrome_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM ErrorMatrix WHERE error_id = 1 AND error_type = 'X';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_type FROM CorrectionMatrix WHERE correction_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word FROM QuantumCodeWords WHERE code_word LIKE 'qwerty%' AND code_word_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM ErrorMatrix WHERE error_type LIKE 'Z%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_code, COUNT(syndrome_id) AS syndrome_count FROM SyndromeTable GROUP BY syndrome_code;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords q JOIN SyndromeTable s ON q.code_word_id = s.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT c.correction_type, e.error_type FROM CorrectionMatrix c, ErrorMatrix e WHERE c.correction_id = e.error_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT code_word FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM ErrorMatrix WHERE error_description LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_id, COUNT(DISTINCT correction_type) AS unique_corrections FROM CorrectionMatrix GROUP BY correction_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords q LEFT JOIN SyndromeTable s ON q.code_word_id = s.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT c.correction_id, e.error_description FROM CorrectionMatrix c INNER JOIN ErrorMatrix e ON c.correction_type = e.error_type;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT correction_id FROM CorrectionMatrix ORDER BY correction_id ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word_id, CONCAT(code_word, ' is a code word.') AS code_word_info FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(error_id) AS max_error_id FROM ErrorMatrix;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumCodeWords q RIGHT JOIN SyndromeTable s ON q.code_word_id = s.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT code_word_id, LENGTH(code_word) AS code_length FROM QuantumCodeWords;",
  "### TABLEDATA\n\nCREATE TABLE QuantumCodeWords (\n    code_word_id INT PRIMARY KEY,\n    code_word VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE SyndromeTable (\n    syndrome_id INT PRIMARY KEY,\n    syndrome_code VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ErrorMatrix (\n    error_id INT PRIMARY KEY,\n    error_type VARCHAR(255) NOT NULL,\n    error_description TEXT\n);\n\nCREATE TABLE CorrectionMatrix (\n    correction_id INT PRIMARY KEY,\n    correction_type VARCHAR(255) NOT NULL,\n    correction_rule TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(error_id) AS avg_error_id FROM ErrorMatrix;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_id, algorithm_name FROM quantum_error_correction_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT qubit_id, qubit_value FROM qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM stabilizer_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT code_id, code_name FROM stabilizer_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM logical_qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT logical_qubit_id, logical_qubit_value FROM logical_qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_syndromes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_id, syndrome_name FROM error_syndromes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms WHERE algorithm_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM qubits WHERE qubit_value > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM stabilizer_codes WHERE code_name = 'Repetition Code';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM logical_qubits WHERE has_error_correction = true;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM error_syndromes WHERE syndrome_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, description FROM quantum_error_correction_algorithms WHERE algorithm_name LIKE 'Shor%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT code_name, generator_matrix FROM stabilizer_codes WHERE code_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT logical_qubit_value FROM logical_qubits WHERE has_error_correction = false;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT syndrome_name, syndrome_description FROM error_syndromes WHERE syndrome_name LIKE '%parity%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms ORDER BY algorithm_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, description FROM quantum_error_correction_algorithms WHERE algorithm_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT qubit_id, qubit_value FROM qubits WHERE is_entangled = true;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM stabilizer_codes WHERE code_name LIKE 'CSS%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM logical_qubits WHERE has_error_correction = true;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM error_syndromes WHERE syndrome_name LIKE '%X Syndrome%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, qubit_value, syndrome_name FROM quantum_error_correction_algorithms JOIN qubits ON quantum_error_correction_algorithms.algorithm_id = qubits.qubit_id JOIN error_syndromes ON qubits.qubit_id = error_syndromes.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT code_name, generator_matrix FROM stabilizer_codes WHERE LENGTH(generator_matrix) > 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_value) AS avg_qubit_value FROM qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, qubit_value, syndrome_name FROM quantum_error_correction_algorithms INNER JOIN qubits ON quantum_error_correction_algorithms.algorithm_id = qubits.qubit_id INNER JOIN error_syndromes ON qubits.qubit_id = error_syndromes.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM stabilizer_codes WHERE code_id IN (SELECT code_id FROM stabilizer_codes ORDER BY code_id DESC LIMIT 5);",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, qubit_value, syndrome_name FROM quantum_error_correction_algorithms LEFT JOIN qubits ON quantum_error_correction_algorithms.algorithm_id = qubits.qubit_id LEFT JOIN error_syndromes ON qubits.qubit_id = error_syndromes.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_error_correction_algorithms WHERE algorithm_id < 10 AND description LIKE '%fault-tolerant%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT code_name, LENGTH(generator_matrix) AS matrix_length FROM stabilizer_codes WHERE LENGTH(generator_matrix) > 50 ORDER BY matrix_length DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_qubits, SUM(qubit_value) AS total_qubit_value FROM qubits;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT algorithm_name, qubit_value, syndrome_name FROM quantum_error_correction_algorithms RIGHT JOIN qubits ON quantum_error_correction_algorithms.algorithm_id = qubits.qubit_id RIGHT JOIN error_syndromes ON qubits.qubit_id = error_syndromes.syndrome_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM stabilizer_codes WHERE code_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT code_name, LEFT(generator_matrix, 50) AS partial_matrix FROM stabilizer_codes;",
  "### TABLEDATA\n\nCREATE TABLE quantum_error_correction_algorithms (\n  algorithm_id SERIAL PRIMARY KEY,\n  algorithm_name VARCHAR(50) NOT NULL,\n  description TEXT\n);\n\nCREATE TABLE qubits (\n  qubit_id SERIAL PRIMARY KEY,\n  qubit_value INT NOT NULL,\n  is_entangled BOOLEAN\n);\n\nCREATE TABLE stabilizer_codes (\n  code_id SERIAL PRIMARY KEY,\n  code_name VARCHAR(50) NOT NULL,\n  generator_matrix TEXT\n);\n\nCREATE TABLE logical_qubits (\n  logical_qubit_id SERIAL PRIMARY KEY,\n  logical_qubit_value INT NOT NULL,\n  has_error_correction BOOLEAN\n);\n\nCREATE TABLE error_syndromes (\n  syndrome_id SERIAL PRIMARY KEY,\n  syndrome_name VARCHAR(50) NOT NULL,\n  syndrome_description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT algorithm_name FROM quantum_error_correction_algorithms;"
]