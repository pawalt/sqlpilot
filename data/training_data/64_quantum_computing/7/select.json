[
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'IBM';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(data_analysis_pipeline_id) FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name, execution_date FROM quantum_computing_capabilities WHERE execution_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities ORDER BY quantum_algorithm_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, quantum_computing_provider FROM quantum_computing_capabilities WHERE id = 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_computing_provider FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'Google';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT quantum_algorithm_name FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(id) FROM quantum_computing_capabilities WHERE data_analysis_pipeline_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_algorithm_name LIKE '%QFT%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name, execution_date FROM quantum_computing_capabilities WHERE execution_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'Microsoft' AND data_analysis_pipeline_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name, execution_date FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'IBM' AND execution_date > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, quantum_computing_provider FROM quantum_computing_capabilities WHERE id < 15;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT data_analysis_pipeline_id) FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE id IN (1, 3, 5, 7, 9);",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, quantum_computing_provider, execution_date FROM quantum_computing_capabilities ORDER BY execution_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'IBM' OR quantum_computing_provider = 'Google';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'IBM' AND execution_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name FROM quantum_computing_capabilities WHERE data_analysis_pipeline_id = 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM quantum_computing_capabilities",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_algorithm_name LIKE '%Grover%'",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT quantum_computing_provider FROM quantum_computing_capabilities",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT id, quantum_algorithm_name, execution_date FROM quantum_computing_capabilities WHERE quantum_computing_provider = 'Google' ORDER BY execution_date DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE execution_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities ORDER BY quantum_computing_provider, quantum_algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT AVG(data_analysis_pipeline_id) AS avg_pipeline_id FROM quantum_computing_capabilities",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, COUNT(*) AS total_count FROM quantum_computing_capabilities GROUP BY quantum_algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT DISTINCT YEAR(execution_date) AS year FROM quantum_computing_capabilities",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_computing_provider, COUNT(*) AS provider_count FROM quantum_computing_capabilities GROUP BY quantum_computing_provider",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_algorithm_name = 'Shor' OR quantum_algorithm_name = 'Grover'",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, quantum_computing_provider, YEAR(execution_date) AS year FROM quantum_computing_capabilities ORDER BY year, quantum_algorithm_name",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_computing_provider, COUNT(*) AS provider_count FROM quantum_computing_capabilities HAVING provider_count > 1",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_computing_provider, AVG(data_analysis_pipeline_id) AS avg_pipeline_id FROM quantum_computing_capabilities GROUP BY quantum_computing_provider",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE execution_date < CURRENT_DATE()",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE execution_date > '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_computing_provider IN ('IBM', 'Google')",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT quantum_algorithm_name, execution_date FROM quantum_computing_capabilities WHERE execution_date = (SELECT MAX(execution_date) FROM quantum_computing_capabilities)",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  data_analysis_pipeline_id INT,\n  quantum_algorithm_name VARCHAR(255),\n  quantum_computing_provider VARCHAR(255),\n  execution_date DATE\n)\n\n### STATEMENT\n\nSELECT MAX(execution_date) AS latest_execution_date FROM quantum_computing_capabilities",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, quantum_bits FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT id, data_title, quantum_bits FROM quantum_data WHERE quantum_bits > 10",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algorithm_name FROM quantum_algorithm",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algo_id, algorithm_name FROM quantum_algorithm WHERE algo_id = 1",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE id = 10",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, analysis_result FROM quantum_data WHERE id = 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algo_id, algorithm_name, support_libraries FROM quantum_algorithm WHERE algo_id = 3",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT id, data_title, quantum_bits, analysis_result FROM quantum_data WHERE quantum_bits < 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE algo_id > 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algo_id, algorithm_name FROM quantum_algorithm WHERE algo_id BETWEEN 2 AND 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE id IN (1, 3, 7)",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, quantum_bits FROM quantum_data WHERE data_title LIKE '%quantum%'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE support_libraries IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT id, data_title, quantum_bits FROM quantum_data ORDER BY quantum_bits DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT id, data_title, quantum_bits FROM quantum_data ORDER BY data_title ASC",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT id, data_title, quantum_bits, analysis_result FROM quantum_data WHERE analysis_result ->> 'success' = 'true'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE algorithm_name LIKE '%quantum%'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algo_id, algorithm_name, support_libraries FROM quantum_algorithm ORDER BY algo_id DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE quantum_bits > 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, analysis_result FROM quantum_data WHERE quantum_bits <= 3",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE quantum_bits BETWEEN 3 AND 5",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data ORDER BY quantum_bits DESC",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT AVG(quantum_bits) FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE data_title LIKE 'Qubit%'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE JSON_LENGTH(support_libraries) > 2",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT algorithm_name, support_libraries FROM quantum_algorithm",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data d INNER JOIN quantum_algorithm a ON d.quantum_bits = a.algo_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data d LEFT JOIN quantum_algorithm a ON d.id = a.algo_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm a RIGHT JOIN quantum_data d ON a.algo_id = d.id",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_data INNER JOIN quantum_algorithm ON quantum_data.id = quantum_algorithm.algo_id",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, analysis_result FROM quantum_data WHERE analysis_result->'$.status' = 'success'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_data WHERE JSON_CONTAINS(analysis_result, '\"status\":\"success\"')",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT MAX(quantum_bits) FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT MIN(quantum_bits) FROM quantum_data",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT data_title, COUNT(*) FROM quantum_data GROUP BY data_title HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE algorithm_name LIKE 'Quantum%'",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n  id INT PRIMARY KEY,\n  data_title VARCHAR,\n  quantum_bits INT,\n  analysis_result JSON\n)\n\nCREATE TABLE quantum_algorithm (\n  algo_id INT PRIMARY KEY,\n  algorithm_name VARCHAR,\n  support_libraries JSON\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_algorithm WHERE algo_id IN (SELECT id FROM quantum_data WHERE quantum_bits > 5)",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT name, quantum_algorithm FROM quantum_computing_capabilities WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name FROM data_analysis_pipelines WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results WHERE pipeline_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_name FROM data_analysis_pipelines WHERE pipeline_name LIKE '%analysis%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, result_data FROM analysis_results WHERE id < 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_description FROM data_analysis_pipelines WHERE id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT name, quantum_algorithm FROM quantum_computing_capabilities WHERE quantum_algorithm IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name FROM data_analysis_pipelines WHERE CHAR_LENGTH(pipeline_name) > 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities ORDER BY name DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name FROM data_analysis_pipelines ORDER BY id ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_name, pipeline_description FROM data_analysis_pipelines WHERE pipeline_name LIKE '%data%' AND pipeline_description LIKE '%ETL%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, result_data FROM analysis_results WHERE result_data->>'accuracy' > '0.9';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_name FROM data_analysis_pipelines WHERE pipeline_description ILIKE '%machine learning%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE name IN ('Qiskit', 'Cirq', 'IBM Q');",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_name FROM data_analysis_pipelines WHERE pipeline_description LIKE '%visualization%' OR pipeline_description LIKE '%graph%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results WHERE pipeline_id IN (SELECT id FROM data_analysis_pipelines WHERE pipeline_description ILIKE '%analytics%');",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, pipeline_name FROM data_analysis_pipelines WHERE CHAR_LENGTH(pipeline_description) > 50;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results WHERE result_data->>'execution_time' < '30 minutes';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT name, quantum_algorithm FROM quantum_computing_capabilities WHERE quantum_algorithm = 'Grover';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities JOIN data_analysis_pipelines ON quantum_computing_capabilities.id = data_analysis_pipelines.id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name, pipeline_description FROM data_analysis_pipelines WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_algorithm LIKE '%Shor%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM data_analysis_pipelines WHERE pipeline_description LIKE '%data cleaning%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results JOIN data_analysis_pipelines ON analysis_results.pipeline_id = data_analysis_pipelines.id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT id, result_data FROM analysis_results WHERE pipeline_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name, result_data FROM analysis_results JOIN data_analysis_pipelines ON analysis_results.pipeline_id = data_analysis_pipelines.id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM data_analysis_pipelines WHERE pipeline_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE quantum_algorithm IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM analysis_results WHERE result_data ->> 'accuracy' >= '0.9';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_computing_capabilities WHERE name = 'IBM Quantum';",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM data_analysis_pipelines;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT AVG(id) FROM quantum_computing_capabilities;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name, COUNT(*) FROM analysis_results JOIN data_analysis_pipelines ON analysis_results.pipeline_id = data_analysis_pipelines.id GROUP BY pipeline_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_name, AVG(id) FROM analysis_results JOIN data_analysis_pipelines ON analysis_results.pipeline_id = data_analysis_pipelines.id GROUP BY pipeline_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_description, COUNT(*) FROM data_analysis_pipelines JOIN analysis_results ON data_analysis_pipelines.id = analysis_results.pipeline_id GROUP BY pipeline_description;",
  "### TABLEDATA\n\nCREATE TABLE quantum_computing_capabilities (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  quantum_algorithm VARCHAR(255)\n)\n\nCREATE TABLE data_analysis_pipelines (\n  id INT PRIMARY KEY,\n  pipeline_name VARCHAR(255),\n  pipeline_description TEXT\n)\n\nCREATE TABLE analysis_results (\n  id INT PRIMARY KEY,\n  pipeline_id INT,\n  result_data JSONB\n)\n\n### STATEMENT\n\nSELECT pipeline_description, AVG(id) FROM data_analysis_pipelines JOIN analysis_results ON data_analysis_pipelines.id = analysis_results.pipeline_id GROUP BY pipeline_description;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_name, quantum_features->>'quantum_feature_1' AS feature_1 FROM quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM classical_data WHERE data_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_name, classical_features->>'classical_feature_1' AS feature_1 FROM classical_data WHERE data_name LIKE '%sample%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM data_analysis WHERE analysis_name = 'Initial Analysis';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_name, analysis_result->>'result_value' AS result FROM data_analysis WHERE analysis_result @> '{\"status\": \"completed\"}';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_computers WHERE quantum_processing_units > 10 AND qubit_capacity > 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, quantum_processing_units FROM quantum_computers WHERE qubit_capacity >= 50;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_name, analysis_result->>'result_date' AS result_date FROM data_analysis WHERE analysis_result->'details'->>'location' = 'Lab A';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM data_analysis WHERE analysis_result->'details'->>'user_id' = 'user123';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_id, data_name FROM quantum_data UNION SELECT data_id, data_name FROM classical_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_result->>'status' AS status, COUNT(*) AS count FROM data_analysis GROUP BY status;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, quantum_processing_units + qubit_capacity AS total_units FROM quantum_computers;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT AVG(quantum_processing_units) AS avg_qpu, AVG(qubit_capacity) AS avg_qubits FROM quantum_computers;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_name, COUNT(*) AS count FROM classical_data GROUP BY data_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_id, analysis_name, analysis_result->>'output' AS output FROM data_analysis WHERE analysis_result->>'status' = 'success' ORDER BY analysis_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, SUM(quantum_processing_units) AS total_qpu FROM quantum_computers GROUP BY computer_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_data OFFSET 5 LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, MIN(qubit_capacity) AS min_qubits, MAX(qubit_capacity) AS max_qubits FROM quantum_computers GROUP BY computer_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_name, quantum_features FROM quantum_data WHERE quantum_features->>'feature_type' = 'entangled';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_name, quantum_features FROM quantum_data WHERE data_name = 'example';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_id, data_name, quantum_features->'feature1' FROM quantum_data WHERE quantum_features->>'feature2' = 'value';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM classical_data WHERE data_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_id, data_name, JSONB_ARRAY_LENGTH(classical_features->'array_field') AS array_length FROM classical_data WHERE JSONB_ARRAY_LENGTH(classical_features->'array_field') > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_id, analysis_name, JSONB_OBJECT_KEYS(analysis_result) AS result_keys FROM data_analysis;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, quantum_processing_units + qubit_capacity AS total_capacity FROM quantum_computers WHERE quantum_processing_units > 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_id, analysis_name, JSONB_ARRAY_ELEMENTS_TEXT(analysis_result->'results') AS result_text FROM data_analysis WHERE analysis_result->'type' = 'experimental';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_data q INNER JOIN classical_data c ON q.data_id = c.data_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_data q LEFT JOIN data_analysis a ON q.data_id = a.analysis_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT computer_name) AS total_computers FROM quantum_computers;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT AVG(quantum_processing_units) AS avg_qpu FROM quantum_computers;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, quantum_processing_units * qubit_capacity AS total_qubits FROM quantum_computers WHERE qubit_capacity > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT MAX(qubit_capacity) AS max_capacity FROM quantum_computers;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT analysis_name, JSONB_EACH_TEXT(analysis_result) AS result_pairs FROM data_analysis WHERE analysis_result->'status' = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, COUNT(*) AS data_count FROM quantum_data q JOIN data_analysis a ON q.data_id = a.analysis_id GROUP BY computer_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT AVG(JSONB_ARRAY_LENGTH(quantum_features->'features')) AS avg_features FROM quantum_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT ON (computer_name) computer_name, qubit_capacity FROM quantum_computers ORDER BY computer_name, qubit_capacity DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT computer_name, SUM(qubit_capacity) AS total_capacity FROM quantum_computers GROUP BY computer_name HAVING SUM(qubit_capacity) > 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    quantum_features JSONB\n);\n\nCREATE TABLE classical_data (\n    data_id UUID PRIMARY KEY,\n    data_name STRING,\n    classical_features JSONB\n);\n\nCREATE TABLE data_analysis (\n    analysis_id UUID PRIMARY KEY,\n    analysis_name STRING,\n    analysis_result JSONB\n);\n\nCREATE TABLE quantum_computers (\n    computer_id UUID PRIMARY KEY,\n    computer_name STRING,\n    quantum_processing_units INT,\n    qubit_capacity INT\n);\n\n### STATEMENT\n\nSELECT data_id, data_name, quantum_features FROM quantum_data UNION SELECT data_id, data_name, classical_features FROM classical_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_analysis",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT analysis_name, quantum_algorithm FROM quantum_analysis",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_results",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT result_data FROM quantum_results",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT analysis_id, result_timestamp FROM quantum_results",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_devices",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT device_name, provider FROM quantum_devices",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_projects",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT project_name, start_date FROM quantum_projects",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_users",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT username, email FROM quantum_users",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_analysis WHERE status='completed'",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_devices WHERE device_type='quantum processor'",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_users WHERE role='admin'",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT analysis_name AS name, quantum_algorithm AS algorithm FROM quantum_analysis",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT project_name AS name, start_date AS start FROM quantum_projects",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT username AS name, organization AS org FROM quantum_users",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_analysis WHERE analysis_id=1",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE result_id=3",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_devices WHERE device_id=2",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_analysis WHERE status='completed';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_name, quantum_algorithm FROM quantum_analysis WHERE analysis_id=1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE result_timestamp BETWEEN '2022-09-01' AND '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT device_name, device_type FROM quantum_devices WHERE provider='IBM';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_projects WHERE end_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT user_id, username, organization FROM quantum_users WHERE role='admin';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT qa.analysis_name, qr.result_data FROM quantum_analysis qa INNER JOIN quantum_results qr ON qa.analysis_id = qr.analysis_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT qp.device_name, qp.device_type, qp.provider, qr.result_data FROM quantum_devices qp LEFT JOIN quantum_results qr ON qp.device_id = qr.analysis_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_issues UNION SELECT * FROM quantum_tasks;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_analysis FROM quantum_analysis;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT DISTINCT user_id, organization FROM quantum_users;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) AS total_results FROM quantum_projects LEFT JOIN quantum_results ON quantum_projects.project_id = quantum_results.analysis_id GROUP BY project_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT analysis_id, analysis_name FROM quantum_analysis ORDER BY analysis_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT SUM(CAST(result_data->>'$.value' AS DECIMAL)) AS total_value FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_projects WHERE project_name LIKE '%research%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT * FROM quantum_users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT device_type, COUNT(*) AS total_devices FROM quantum_devices GROUP BY device_type HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT username, role, COUNT(*) AS total_users FROM quantum_users GROUP BY username, role;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT DISTINCT provider FROM quantum_devices;",
  "### TABLEDATA\n\nCREATE TABLE quantum_analysis (\n    analysis_id INT PRIMARY KEY,\n    analysis_name VARCHAR(255),\n    quantum_algorithm VARCHAR(100),\n    data_source VARCHAR(255),\n    status ENUM('pending', 'completed')\n)\n\nCREATE TABLE quantum_results (\n    result_id INT PRIMARY KEY,\n    analysis_id INT,\n    result_data JSON,\n    result_timestamp TIMESTAMP,\n    FOREIGN KEY (analysis_id) REFERENCES quantum_analysis(analysis_id)\n)\n\nCREATE TABLE quantum_devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(100),\n    device_type ENUM('quantum annealer', 'quantum processor'),\n    provider VARCHAR(100)\n)\n\nCREATE TABLE quantum_projects (\n    project_id INT PRIMARY KEY,\n    project_name VARCHAR(255),\n    project_description TEXT,\n    start_date DATE,\n    end_date DATE\n)\n\nCREATE TABLE quantum_users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    organization VARCHAR(255),\n    role ENUM('admin', 'collaborator', 'viewer')\n)\n\n### STATEMENT\n\nSELECT project_name, COUNT(*) AS total_results FROM quantum_projects LEFT JOIN quantum_results ON quantum_projects.project_id = quantum_results.analysis_id GROUP BY project_name HAVING COUNT(*) > 0;"
]