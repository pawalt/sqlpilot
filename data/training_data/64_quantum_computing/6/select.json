[
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_description FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name FROM QuantumComputingExperiments WHERE experiment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_description LIKE '%quantum%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(experiment_date) FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(experiment_date) FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(experiment_id) FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, YEAR(experiment_date) FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments ORDER BY experiment_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM QuantumComputingExperiments ORDER BY experiment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT experiment_name FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name || ' on ' || experiment_date AS experiment_info FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_name IN ('Experiment A', 'Experiment B');",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM QuantumComputingExperiments WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_description FROM QuantumComputingExperiments WHERE experiment_name LIKE '%quantum%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_description FROM QuantumComputingExperiments WHERE experiment_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_experiments FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(experiment_id) AS avg_experiment_id FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, DATE(experiment_date) AS experiment_date_month FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_date FROM QuantumComputingExperiments ORDER BY experiment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM QuantumComputingExperiments WHERE experiment_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, DATE(experiment_date) AS experiment_date_day FROM QuantumComputingExperiments WHERE experiment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT experiment_name FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingExperiments WHERE experiment_date = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, LENGTH(experiment_description) AS description_length FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_description FROM QuantumComputingExperiments WHERE LENGTH(experiment_description) > 100;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_description FROM QuantumComputingExperiments WHERE experiment_name REGEXP '^Q';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_name, YEAR(experiment_date) AS experiment_year FROM QuantumComputingExperiments;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM QuantumComputingExperiments WHERE experiment_name LIKE '%quantum%' ORDER BY experiment_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date FROM QuantumComputingExperiments WHERE experiment_description LIKE '%quantum%' ORDER BY experiment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_description FROM QuantumComputingExperiments WHERE experiment_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingExperiments (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experiment_date TIMESTAMP,\n  experiment_description TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date FROM QuantumComputingExperiments WHERE YEAR(experiment_date) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, experiment_name, qubits_used FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, experiment_name, qubits_used, gate_operations FROM quantum_simulation WHERE qubits_used > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(execution_time) AS avg_execution_time FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_simulations FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_id, simulation_id, visualization_type FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_id, visualization_type, visual_data FROM visualization_data WHERE visualization_type = '3D';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(simulation_id) AS avg_simulation_id FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_visualizations FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, AVG(timestamp) AS avg_timestamp FROM visualization_data GROUP BY simulation_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation WHERE simulation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, experiment_name FROM quantum_simulation WHERE qubits_used = 4;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_type, COUNT(*) AS total_visualizations FROM visualization_data GROUP BY visualization_type;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, visualization_id FROM visualization_data ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_id, visualization_type FROM visualization_data WHERE timestamp > NOW() - INTERVAL '1 day';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT visualization_type FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(visualization_id) AS total_visualizations FROM visualization_data WHERE visualization_type = '2D';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, AVG(execution_time) AS avg_execution_time FROM quantum_simulation GROUP BY simulation_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, visualization_id, timestamp FROM visualization_data WHERE visualization_type IN ('2D', '3D');",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation WHERE qubits_used > 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT experiment_name, execution_time FROM quantum_simulation WHERE visualization_id IN (SELECT visualization_id FROM visualization_data WHERE visualization_type = 'graph');",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, experiment_name, qubits_used FROM quantum_simulation WHERE experiment_name LIKE 'Qubit%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_id, visualization_type, timestamp FROM visualization_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT qubits_used, AVG(execution_time) AS avg_execution_time FROM quantum_simulation GROUP BY qubits_used;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(visualization_id) AS num_visualizations FROM quantum_simulation LEFT JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id GROUP BY experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, qubits_used, gate_operations FROM quantum_simulation WHERE gate_operations LIKE '%X%' AND qubits_used = 3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, visualization_id, execution_time FROM quantum_simulation LEFT JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id WHERE simulation_id < 100;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(experiment_name), visualization_type FROM quantum_simulation JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id GROUP BY visualization_type;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT experiment_name, qubits_used, gate_operations FROM quantum_simulation WHERE qubits_used > (SELECT AVG(qubits_used) FROM quantum_simulation);",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(simulation_id) AS num_simulations, visualization_type FROM quantum_simulation JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id GROUP BY visualization_type;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(qubits_used) AS avg_qubits, MAX(execution_time) AS max_execution_time FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_simulation UNION SELECT * FROM visualization_data;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT experiment_name) AS num_experiments FROM quantum_simulation;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT experiment_name, visualization_type, timestamp FROM quantum_simulation INNER JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id WHERE visualization_type LIKE '%3D%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, experiment_name, qubits_used FROM quantum_simulation WHERE simulation_id IN (SELECT simulation_id FROM visualization_data GROUP BY simulation_id HAVING COUNT(visualization_id) > 2);",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT simulation_id, AVG(execution_time) AS avg_execution_time FROM quantum_simulation GROUP BY simulation_id HAVING AVG(execution_time) > 50;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT visualization_id, visualization_type, visual_data FROM visualization_data WHERE LENGTH(visual_data) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE quantum_simulation (\n    simulation_id INT PRIMARY KEY,\n    experiment_name VARCHAR(50),\n    qubits_used INT,\n    gate_operations VARCHAR(100),\n    execution_time DECIMAL(10,2)\n);\n\nCREATE TABLE visualization_data (\n    visualization_id INT PRIMARY KEY,\n    simulation_id INT REFERENCES quantum_simulation(simulation_id),\n    visualization_type VARCHAR(50),\n    visual_data BYTEA,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT experiment_name, visualization_type, execution_time FROM quantum_simulation JOIN visualization_data ON quantum_simulation.simulation_id = visualization_data.simulation_id WHERE execution_time > 100;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM QuantumComputingData;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT qubit_count FROM QuantumComputingData WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingResults;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT result_data FROM QuantumComputingResults WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT result_id, result_timestamp FROM QuantumComputingResults ORDER BY result_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM ExecutionLog;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT log_message FROM ExecutionLog WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, qubit_count FROM QuantumComputingData WHERE qubit_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM QuantumComputingData WHERE experiment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData JOIN QuantumComputingResults ON QuantumComputingData.experiment_id = QuantumComputingResults.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData LEFT JOIN QuantumComputingResults ON QuantumComputingData.experiment_id = QuantumComputingResults.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData RIGHT JOIN QuantumComputingResults ON QuantumComputingData.experiment_id = QuantumComputingResults.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_id, log_message FROM QuantumComputingData JOIN ExecutionLog ON QuantumComputingData.experiment_id = ExecutionLog.log_id;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE experiment_name LIKE 'Q%';",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, qubit_count FROM QuantumComputingData WHERE qubit_count < 3;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_id, qubit_count FROM QuantumComputingData WHERE experiment_id IN (1, 5, 10);",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM QuantumComputingData;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_count) FROM QuantumComputingData;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(qubit_count) FROM QuantumComputingData;",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE experiment_date > '2021-01-01'",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, qubit_count FROM QuantumComputingData WHERE qubit_count > 5",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT QC.experiment_name, QR.result_data FROM QuantumComputingData QC JOIN QuantumComputingResults QR ON QC.experiment_id = QR.experiment_id",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE experiment_id IN (SELECT experiment_id FROM QuantumComputingResults)",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_count) AS average_qubits FROM QuantumComputingData",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(result_id) AS result_count FROM QuantumComputingData LEFT JOIN QuantumComputingResults ON QuantumComputingData.experiment_id = QuantumComputingResults.experiment_id GROUP BY experiment_name",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData ORDER BY experiment_date DESC",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, MAX(qubit_count) AS max_qubits FROM QuantumComputingData",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT QC.experiment_name, COUNT(QR.result_id) AS result_count FROM QuantumComputingData QC JOIN QuantumComputingResults QR ON QC.experiment_id = QR.experiment_id GROUP BY QC.experiment_name",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE qubit_count > (SELECT AVG(qubit_count) FROM QuantumComputingData)",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, SUM(qubit_count) AS total_qubits FROM QuantumComputingData GROUP BY experiment_name",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT QC.experiment_name, QR.result_data FROM QuantumComputingData QC LEFT JOIN QuantumComputingResults QR ON QC.experiment_id = QR.experiment_id",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE experiment_name LIKE '%quantum%'",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_experiments FROM QuantumComputingData",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_count) AS average_qubits, MAX(qubit_count) AS max_qubits, MIN(qubit_count) AS min_qubits FROM QuantumComputingData",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, result_timestamp FROM QuantumComputingData QCD LEFT JOIN QuantumComputingResults QCR ON QCD.experiment_id = QCR.experiment_id",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT QC.experiment_name, COUNT(QR.result_id) AS result_count FROM QuantumComputingData QC JOIN QuantumComputingResults QR ON QC.experiment_id = QR.experiment_id HAVING result_count > 1",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM QuantumComputingData WHERE experiment_id NOT IN (SELECT experiment_id FROM QuantumComputingResults)",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(result_id) AS result_count FROM QuantumComputingData LEFT JOIN QuantumComputingResults ON QuantumComputingData.experiment_id = QuantumComputingResults.experiment_id GROUP BY experiment_name HAVING result_count > 0",
  "### TABLEDATA\n\nCREATE TABLE QuantumComputingData (\n  experiment_id SERIAL PRIMARY KEY,\n  experiment_name VARCHAR(100) NOT NULL,\n  experiment_date DATE NOT NULL,\n  qubit_count INT NOT NULL\n);\n\n\nCREATE TABLE QuantumComputingResults (\n  result_id SERIAL PRIMARY KEY,\n  experiment_id INT NOT NULL,\n  result_data JSONB NOT NULL,\n  result_timestamp TIMESTAMP\n);\n\n\nCREATE TABLE ExecutionLog (\n  log_id SERIAL PRIMARY KEY,\n  log_timestamp TIMESTAMP NOT NULL,\n  log_message TEXT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(qubit_count) AS average_qubits, SUM(qubit_count) AS total_qubits FROM QuantumComputingData",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ExperimentData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, start_time, end_time FROM ExperimentData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT quantum_result, result_time FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_data FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ExperimentLogs;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT log_message, log_time FROM ExperimentLogs;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, ExperimentLogs.log_message FROM ExperimentData INNER JOIN ExperimentLogs ON ExperimentData.experiment_id = ExperimentLogs.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, VisualizationData.visualization_data FROM ExperimentData INNER JOIN VisualizationData ON ExperimentData.experiment_id = VisualizationData.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentResults.result_id, ExperimentData.experiment_name, VisualizationData.visualization_type FROM ExperimentResults INNER JOIN ExperimentData ON ExperimentResults.experiment_id = ExperimentData.experiment_id INNER JOIN VisualizationData ON ExperimentResults.experiment_id = VisualizationData.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, ExperimentResults.result_time FROM ExperimentData LEFT JOIN ExperimentResults ON ExperimentData.experiment_id = ExperimentResults.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, VisualizationData.visualization_data FROM ExperimentData LEFT JOIN VisualizationData ON ExperimentData.experiment_id = VisualizationData.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, ExperimentLogs.log_message FROM ExperimentData RIGHT JOIN ExperimentLogs ON ExperimentData.experiment_id = ExperimentLogs.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentLogs.log_message, ExperimentData.end_time FROM ExperimentLogs RIGHT JOIN ExperimentData ON ExperimentLogs.experiment_id = ExperimentData.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentData.experiment_name, VisualizationData.visualization_type FROM ExperimentData FULL JOIN VisualizationData ON ExperimentData.experiment_id = VisualizationData.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ExperimentResults.result_id, ExperimentLogs.log_message FROM ExperimentResults FULL JOIN ExperimentLogs ON ExperimentResults.experiment_id = ExperimentLogs.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT AVG(result_id) FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT MAX(result_id) FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT MIN(log_time) FROM ExperimentLogs;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ExperimentData WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, start_time FROM ExperimentData WHERE start_time > '2022-01-01' AND end_time < '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT er.result_id, ed.experiment_name, er.quantum_result FROM ExperimentResults er JOIN ExperimentData ed ON er.experiment_id = ed.experiment_id WHERE ed.experiment_name LIKE '%Quantum%';",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, ev.visualization_type, ev.visualization_data FROM ExperimentData ed JOIN VisualizationData ev ON ed.experiment_id = ev.experiment_id WHERE ed.experiment_name = 'Experiment A' AND ev.visualization_type = 'graph';",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT el.log_message, el.log_time FROM ExperimentLogs el JOIN ExperimentData ed ON el.experiment_id = ed.experiment_id WHERE ed.experiment_name = 'Experiment B' ORDER BY el.log_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, er.result_time, ev.visualization_type FROM ExperimentData ed JOIN ExperimentResults er ON ed.experiment_id = er.experiment_id JOIN VisualizationData ev ON ed.experiment_id = ev.experiment_id WHERE er.result_time BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM ExperimentData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(end_time, start_time)) AS avg_duration FROM ExperimentData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT MAX(log_time) AS latest_log_time FROM ExperimentLogs;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT MIN(result_time) AS earliest_result_time FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT AVG(JSON_LENGTH(quantum_result)) AS avg_quantum_result_length FROM ExperimentResults;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, COUNT(*) AS result_count FROM ExperimentResults GROUP BY experiment_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, COUNT(*) AS log_count FROM ExperimentLogs el JOIN ExperimentData ed ON el.experiment_id = ed.experiment_id GROUP BY ed.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, MAX(result_time) AS latest_result_time FROM ExperimentData ed JOIN ExperimentResults er ON ed.experiment_id = er.experiment_id GROUP BY ed.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ev.visualization_type, COUNT(*) AS vis_count FROM VisualizationData GROUP BY ev.visualization_type ORDER BY vis_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, el.log_message, ev.visualization_type FROM ExperimentData ed LEFT JOIN ExperimentLogs el ON ed.experiment_id = el.experiment_id LEFT JOIN VisualizationData ev ON ed.experiment_id = ev.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM ExperimentData UNION SELECT * FROM ExperimentResults UNION SELECT * FROM VisualizationData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, ed.start_time, er.result_time, ev.visualization_type, el.log_message FROM ExperimentData ed LEFT JOIN ExperimentResults er ON ed.experiment_id = er.experiment_id LEFT JOIN VisualizationData ev ON ed.experiment_id = ev.experiment_id LEFT JOIN ExperimentLogs el ON ed.experiment_id = el.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, DATEDIFF(end_time, start_time) AS duration_days FROM ExperimentData;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, JSON_LENGTH(visualization_data) AS vis_data_length FROM ExperimentData ed JOIN VisualizationData ev ON ed.experiment_id = ev.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE ExperimentData (\n    experiment_id INT PRIMARY KEY,\n    experiment_name TEXT,\n    start_time TIMESTAMP,\n    end_time TIMESTAMP\n);\n\n\nCREATE TABLE ExperimentResults (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    quantum_result JSON,\n    result_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE VisualizationData (\n    vis_id INT PRIMARY KEY,\n    experiment_id INT,\n    visualization_type TEXT,\n    visualization_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n\nCREATE TABLE ExperimentLogs (\n    log_id INT PRIMARY KEY,\n    experiment_id INT,\n    log_message TEXT,\n    log_time TIMESTAMP,\n    FOREIGN KEY (experiment_id) REFERENCES ExperimentData(experiment_id)\n);\n\n### STATEMENT\n\nSELECT ed.experiment_name, JSON_UNQUOTE(JSON_EXTRACT(quantum_result, '$.result')) AS result_value FROM ExperimentData ed JOIN ExperimentResults er ON ed.experiment_id = er.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_devices;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT device_name, location FROM quantum_devices;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_data;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT data_id, data_values FROM experiment_data;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM data_processing;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT processing_id, processing_date FROM data_processing;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM visualization;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT visualization_id, visualization_type FROM visualization;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, quantum_devices.device_name FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN quantum_devices ON quantum_devices.device_id = experiment_data.device_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, data_processing.processing_status FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN data_processing ON experiment_data.data_id = data_processing.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT quantum_devices.device_name FROM quantum_devices WHERE quantum_devices.location = 'Lab A';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_data.data_id FROM experiment_data WHERE experiment_data.device_id = (SELECT device_id FROM quantum_devices WHERE quantum_devices.device_name = 'Device 1');",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, visualization.visualization_type FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN visualization ON visualization.data_id = experiment_data.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiments WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_devices WHERE device_type = 'Quantum Computer';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_data ORDER BY data_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT AVG(processing_date) AS avg_processing_date FROM data_processing;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_visualizations FROM visualization;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM experiments WHERE experiment_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, location FROM experiments INNER JOIN quantum_devices ON experiments.experiment_id = quantum_devices.device_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_data JOIN experiments ON experiment_data.experiment_id = experiments.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT device_name, experiment_name FROM quantum_devices JOIN experiment_data ON quantum_devices.device_id = experiment_data.device_id JOIN experiments ON experiment_data.experiment_id = experiments.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, data_values FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, location, data_values FROM experiments JOIN quantum_devices ON experiments.experiment_id = quantum_devices.device_id JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_data FROM visualization JOIN experiment_data ON visualization.data_id = experiment_data.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT processing_status, processing_date FROM data_processing JOIN experiment_data ON data_processing.data_id = experiment_data.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT device_name, location, data_values FROM quantum_devices JOIN experiment_data ON quantum_devices.device_id = experiment_data.device_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT visualization_type, visualization_data, experiment_name FROM visualization JOIN experiment_data ON visualization.data_id = experiment_data.data_id JOIN experiments ON experiment_data.experiment_id = experiments.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM experiments WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, visualization_type FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, processing_date FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN data_processing ON experiment_data.data_id = data_processing.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT device_name, visualization_type FROM quantum_devices JOIN experiment_data ON quantum_devices.device_id = experiment_data.device_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, location, visualization_type FROM experiments JOIN quantum_devices ON experiments.experiment_id = quantum_devices.device_id JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, processing_status, data_values FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN data_processing ON experiment_data.data_id = data_processing.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT device_name, location, visualization_type FROM quantum_devices JOIN experiment_data ON quantum_devices.device_id = experiment_data.device_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, processing_date, visualization_type FROM experiments JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN data_processing ON experiment_data.data_id = data_processing.data_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, location, data_values, visualization_data FROM experiments JOIN quantum_devices ON experiments.experiment_id = quantum_devices.device_id JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN visualization ON experiment_data.data_id = visualization.data_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id UUID PRIMARY KEY,\n    experiment_name STRING,\n    experiment_date TIMESTAMP,\n    experiment_status STRING\n);\n\nCREATE TABLE quantum_devices (\n    device_id UUID PRIMARY KEY,\n    device_name STRING,\n    device_type STRING,\n    location STRING\n);\n\nCREATE TABLE experiment_data (\n    data_id UUID PRIMARY KEY,\n    experiment_id UUID REFERENCES experiments(experiment_id),\n    device_id UUID REFERENCES quantum_devices(device_id),\n    data_values JSONB\n);\n\nCREATE TABLE data_processing (\n    processing_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    processing_date TIMESTAMP,\n    processing_status STRING\n);\n\nCREATE TABLE visualization (\n    visualization_id UUID PRIMARY KEY,\n    data_id UUID REFERENCES experiment_data(data_id),\n    visualization_type STRING,\n    visualization_data JSONB\n);\n\n### STATEMENT\n\nSELECT experiment_name, location, data_values, processing_status FROM experiments JOIN quantum_devices ON experiments.experiment_id = quantum_devices.device_id JOIN experiment_data ON experiments.experiment_id = experiment_data.experiment_id JOIN data_processing ON experiment_data.data_id = data_processing.data_id;"
]