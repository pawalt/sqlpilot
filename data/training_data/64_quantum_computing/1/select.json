[
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_result FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_time FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_result > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_time >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_result) FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(*) AS num_results FROM quantum_results GROUP BY experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results ORDER BY measurement_result DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE experiment_name LIKE 'Qubit%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, MAX(measurement_result) FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_result FROM quantum_results WHERE experiment_name = 'Bell State';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_time BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_result) AS average_result, MAX(measurement_result) AS max_result FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE experiment_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE experiment_id = (SELECT MAX(experiment_id) FROM quantum_results);",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_result IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(*) FROM quantum_results GROUP BY experiment_name HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM quantum_results WHERE measurement_result > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_time FROM quantum_results WHERE experiment_name LIKE '%quantum%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results ORDER BY measurement_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_result) FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM quantum_results WHERE measurement_result between 0.2 and 0.8;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_result FROM quantum_results WHERE measurement_result < (SELECT AVG(measurement_result) FROM quantum_results);",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, AVG(measurement_result) AS avg_measurement_result FROM quantum_results GROUP BY experiment_name HAVING AVG(measurement_result) > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_result FROM quantum_results WHERE measurement_time > '2022-01-01' AND measurement_time < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, MAX(measurement_result) FROM quantum_results GROUP BY experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(*) AS num_experiments FROM quantum_results GROUP BY experiment_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT DISTINCT experiment_name FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_time, measurement_result FROM quantum_results WHERE measurement_time >= NOW() - INTERVAL '1 month';",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_time::DATE = CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_result, EXTRACT(MONTH FROM measurement_time) AS month FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, ROUND(measurement_result, 2) AS rounded_result FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_time, measurement_result, DENSE_RANK() OVER (ORDER BY measurement_result DESC) AS rank FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_results WHERE measurement_result IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_result, CASE WHEN measurement_result > 0.5 THEN 'High' ELSE 'Low' END AS result_category FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_result, AVG(measurement_result) OVER (PARTITION BY experiment_name) AS avg_measurement_result FROM quantum_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_results (\n    experiment_id SERIAL PRIMARY KEY,\n    experiment_name VARCHAR(100),\n    measurement_time TIMESTAMP,\n    measurement_result FLOAT\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(*) AS num_experiments FROM quantum_results GROUP BY experiment_name ORDER BY num_experiments DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM measurement_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT measurement_id, experiment_id, measurement_value FROM measurement_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, experimental_data FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_value, measurement_unit FROM measurement_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_value FROM measurement_results WHERE measurement_value > 10;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name FROM experiment_results WHERE experiment_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM measurement_results WHERE measurement_unit = 'cm';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT measurement_id FROM measurement_results WHERE measurement_value < 5;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_unit FROM measurement_results WHERE experiment_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results ORDER BY experiment_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM experiment_results ORDER BY experiment_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, SUM(measurement_value) AS total_measurement FROM measurement_results GROUP BY experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, AVG(measurement_value) AS avg_measurement FROM measurement_results GROUP BY experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_id, measurement_value FROM measurement_results INNER JOIN experiment_results ON measurement_results.experiment_id = experiment_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_id, experiment_results.experiment_name, measurement_results.measurement_id, measurement_results.measurement_value FROM experiment_results LEFT JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, COUNT(*) AS measurement_count FROM measurement_results GROUP BY experiment_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, MAX(measurement_value) AS max_measurement FROM measurement_results GROUP BY experiment_id HAVING MAX(measurement_value) > 10;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE experiment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name FROM experiment_results WHERE experiment_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_value) FROM measurement_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, SUM(measurement_value) FROM measurement_results GROUP BY experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT MAX(measurement_value) FROM measurement_results WHERE experiment_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, COUNT(*) FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id GROUP BY experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_value) AS avg_measurement, MAX(measurement_value) AS max_measurement FROM measurement_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, AVG(measurement_value) AS avg_measurement FROM measurement_results GROUP BY experiment_id HAVING avg_measurement > 50;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT experiment_name FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_value FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE experimental_data->>'status' = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_value FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id WHERE experiment_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id FROM experiment_results WHERE experiment_id IN (SELECT experiment_id FROM measurement_results WHERE measurement_value > 100);",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_value FROM measurement_results ORDER BY measurement_value DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE experiment_name ILIKE 'test%' AND CAST(experimental_data->>'result' AS FLOAT) > 0;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, SUM(measurement_value) FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id GROUP BY experiment_name HAVING SUM(measurement_value) > 1000;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT ON (experiment_id) experiment_id, measurement_value FROM measurement_results ORDER BY experiment_id, measurement_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n  experiment_id INT PRIMARY KEY,\n  experiment_name VARCHAR(255),\n  experimental_data JSONB\n);\n\n\nCREATE TABLE measurement_results (\n  measurement_id INT PRIMARY KEY,\n  experiment_id INT,\n  measurement_value FLOAT,\n  measurement_unit VARCHAR(50),\n  FOREIGN KEY (experiment_id) REFERENCES experiment_results(experiment_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_value, measurement_unit FROM experiment_results JOIN measurement_results ON experiment_results.experiment_id = measurement_results.experiment_id WHERE measurement_unit = 'kg';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name FROM quantum_experiment_results WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_1 FROM quantum_experiment_results WHERE measurement_1 > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_details;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_analysis_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, analysis_date FROM quantum_analysis_results WHERE analysis_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT analysis_id, experiment_id FROM quantum_analysis_results WHERE analysis_result LIKE '%success%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_results ORDER BY experiment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1 FROM quantum_experiment_results WHERE measurement_1 BETWEEN 0.5 AND 1.0;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT detail_id, temperature FROM quantum_experiment_details WHERE temperature < 25.0;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1, measurement_2 FROM quantum_experiment_results WHERE measurement_1 + measurement_2 > 1.0;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1 FROM quantum_experiment_results WHERE experiment_name LIKE 'Experiment%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_details WHERE time_taken > 10;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT analysis_id, experiment_id, analysis_result FROM quantum_analysis_results WHERE analysis_result IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, measurement_1, measurement_2 FROM quantum_experiment_results WHERE measurement_1 > measurement_2;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_date FROM quantum_experiment_results WHERE experiment_date < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT detail_id, temperature, pressure FROM quantum_experiment_details WHERE pressure < 100.0;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT analysis_id, experiment_id, analysis_result FROM quantum_analysis_results WHERE analysis_result NOT LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_results WHERE experiment_name IN ('Experiment A', 'Experiment B');",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, measurement_1, measurement_2 FROM quantum_experiment_results ORDER BY experiment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1, measurement_2 FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date FROM quantum_experiment_results WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1, measurement_2 FROM quantum_experiment_results WHERE measurement_1 > 0.5 OR measurement_2 < 0.3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, temperature, pressure FROM quantum_experiment_results JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, time_taken FROM quantum_experiment_results JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id WHERE pressure < 1.0;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT analysis_id, experiment_id, analysis_date, analysis_result FROM quantum_analysis_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT analysis_id, experiment_id, analysis_date, analysis_result FROM quantum_analysis_results WHERE analysis_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, measurement_1, measurement_2, temperature, time_taken FROM quantum_experiment_results JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, analysis_date, analysis_result FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, analysis_date, analysis_result FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id WHERE measurement_1 > 0.3;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, analysis_date, analysis_result, temperature FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id WHERE temperature > 20;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, measurement_1, measurement_2, analysis_result FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id WHERE measurement_1 < 0.2 AND measurement_2 > 0.7;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, measurement_1, measurement_2, analysis_result FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id WHERE analysis_result LIKE '%successful%';",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, measurement_1, measurement_2, analysis_result FROM quantum_experiment_results JOIN quantum_analysis_results ON quantum_experiment_results.experiment_id = quantum_analysis_results.experiment_id WHERE analysis_result IN ('approved', 'completed');",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(measurement_1) as avg_measurement_1, AVG(measurement_2) as avg_measurement_2 FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(measurement_1) as max_measurement_1, MAX(measurement_2) as max_measurement_2 FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(measurement_1) as min_measurement_1, MIN(measurement_2) as min_measurement_2 FROM quantum_experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, temperature, time_taken, AVG(pressure) as avg_pressure FROM quantum_experiment_results JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id GROUP BY experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE quantum_experiment_results (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    experiment_date DATE,\n    measurement_1 FLOAT,\n    measurement_2 FLOAT\n);\n\n\nCREATE TABLE quantum_experiment_details (\n    detail_id INT PRIMARY KEY,\n    experiment_id INT,\n    temperature FLOAT,\n    pressure FLOAT,\n    time_taken INT\n);\n\n\nCREATE TABLE quantum_analysis_results (\n    analysis_id INT PRIMARY KEY,\n    experiment_id INT,\n    analysis_date DATE,\n    analysis_result TEXT\n);\n\n### STATEMENT\n\nSELECT experiment_id, experiment_name, experiment_date, SUM(temperature) as total_temperature, SUM(pressure) as total_pressure FROM quantum_experiment_results JOIN quantum_experiment_details ON quantum_experiment_results.experiment_id = quantum_experiment_details.experiment_id GROUP BY experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM measurements;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT measurement_value, measurement_unit FROM measurements;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM scientists;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT scientist_name FROM scientists;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT result_description, result_analysis_data FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, measurements.measurement_value FROM experiments JOIN measurements ON experiments.experiment_id = measurements.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT scientists.scientist_name, experiment_results.result_description, experiment_results.result_analysis_data FROM scientists JOIN experiment_results ON scientists.scientist_id = experiment_results.scientist_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, measurement_value, measurement_unit FROM experiments JOIN measurements ON experiments.experiment_id = measurements.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT scientist_name, result_description, result_analysis_data FROM scientists JOIN experiment_results ON scientists.scientist_id = experiment_results.scientist_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, experiment_results.result_description FROM experiments JOIN experiment_results ON experiments.experiment_id = experiment_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT measurements.measurement_value, measurements.measurement_unit, experiment_results.result_description FROM measurements JOIN experiment_results ON measurements.experiment_id = experiment_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT scientists.scientist_name, experiment_name FROM scientists JOIN experiment_results ON scientists.scientist_id = experiment_results.scientist_id JOIN experiments ON experiments.experiment_id = experiment_results.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiments.experiment_name, experiment_date, scientists.scientist_name, result_description FROM experiments JOIN experiment_results ON experiments.experiment_id = experiment_results.experiment_id JOIN scientists ON scientists.scientist_id = experiment_results.scientist_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiments WHERE experiment_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM measurements WHERE measurement_value > 10;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM scientists WHERE scientist_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE result_description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiments ORDER BY experiment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT experiment_name, experiment_date FROM experiments;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, m.measurement_value FROM experiments e JOIN measurements m ON e.experiment_id = m.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, r.result_description FROM experiments e JOIN experiment_results r ON e.experiment_id = r.experiment_id;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT AVG(m.measurement_value) AS avg_measurement_value FROM measurements m;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT MAX(m.measurement_value) AS max_measurement_value FROM measurements m;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM measurements;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT s.scientist_name, COUNT(r.result_id) AS num_results FROM scientists s LEFT JOIN experiment_results r ON s.scientist_id = r.scientist_id GROUP BY s.scientist_name;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, COUNT(r.result_id) AS num_results FROM experiments e LEFT JOIN experiment_results r ON e.experiment_id = r.experiment_id GROUP BY e.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, r.result_description FROM experiments e JOIN experiment_results r ON e.experiment_id = r.experiment_id WHERE r.result_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT * FROM experiments WHERE experiment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT s.scientist_name, AVG(m.measurement_value) AS avg_measurement_value FROM scientists s JOIN experiment_results r ON s.scientist_id = r.scientist_id JOIN measurements m ON r.experiment_id = m.experiment_id GROUP BY s.scientist_name;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, SUM(m.measurement_value) AS total_measurement_value FROM experiments e JOIN measurements m ON e.experiment_id = m.experiment_id GROUP BY e.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT s.scientist_name, COUNT(DISTINCT e.experiment_id) AS num_experiments FROM scientists s JOIN experiment_results r ON s.scientist_id = r.scientist_id JOIN experiments e ON r.experiment_id = e.experiment_id GROUP BY s.scientist_name;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, r.result_description FROM experiments e JOIN experiment_results r ON e.experiment_id = r.experiment_id ORDER BY e.experiment_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, r.result_description FROM experiments e JOIN experiment_results r ON e.experiment_id = r.experiment_id ORDER BY e.experiment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT s.scientist_name AS researcher, AVG(m.measurement_value) AS avg_measurement_value FROM scientists s JOIN experiment_results r ON s.scientist_id = r.scientist_id JOIN measurements m ON r.experiment_id = m.experiment_id GROUP BY researcher;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, r.result_description FROM experiments e JOIN experiment_results r ON e.experiment_id = r.experiment_id LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT s.scientist_name, COUNT(*) AS num_results FROM scientists s JOIN experiment_results r ON s.scientist_id = r.scientist_id GROUP BY s.scientist_name HAVING num_results > 10;",
  "### TABLEDATA\n\nCREATE TABLE experiments (\n    experiment_id INT PRIMARY KEY,\n    experiment_name VARCHAR(255) NOT NULL,\n    experiment_date DATE\n);\n\nCREATE TABLE measurements (\n    measurement_id INT PRIMARY KEY,\n    experiment_id INT,\n    measurement_value FLOAT,\n    measurement_unit VARCHAR(50),\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id)\n);\n\nCREATE TABLE scientists (\n    scientist_id INT PRIMARY KEY,\n    scientist_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE experiment_results (\n    result_id INT PRIMARY KEY,\n    experiment_id INT,\n    scientist_id INT,\n    result_description TEXT,\n    result_analysis_data JSON,\n    FOREIGN KEY (experiment_id) REFERENCES experiments(experiment_id),\n    FOREIGN KEY (scientist_id) REFERENCES scientists(scientist_id)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, AVG(m.measurement_value) AS avg_measurement_value FROM experiments e JOIN measurements m ON e.experiment_id = m.experiment_id GROUP BY e.experiment_name HAVING avg_measurement_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT id, experiment_name, measurement_time FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_responses;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT respondent_name, response FROM experiment_responses;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_notes;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT note_text FROM experiment_notes WHERE author_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_parameters;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT parameter_name, parameter_value FROM experiment_parameters;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_participants;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT participant_name, contact_email FROM experiment_participants;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT e.id, e.experiment_name, e.result_value, p.parameter_name FROM experiment_results e JOIN experiment_parameters p ON e.id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT r.id, r.respondent_name, n.note_text FROM experiment_responses r JOIN experiment_notes n ON r.result_id = n.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT p.id, p.participant_name, r.response FROM experiment_participants p JOIN experiment_responses r ON p.id = r.id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT e.experiment_name, n.note_text, p.parameter_value FROM experiment_results e JOIN experiment_notes n ON e.id = n.result_id JOIN experiment_parameters p ON e.id = p.id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE result_value > 100;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_responses WHERE respondent_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_notes WHERE author_name = 'Jane Smith' AND created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_parameters WHERE parameter_value < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_participants WHERE contact_email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT e.id, e.experiment_name, r.respondent_name, n.note_text FROM experiment_results e JOIN experiment_responses r ON e.id = r.result_id JOIN experiment_notes n ON e.id = n.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM experiment_results WHERE result_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.id, experiment_results.experiment_name, experiment_notes.created_at FROM experiment_results JOIN experiment_notes ON experiment_results.id = experiment_notes.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, COUNT(*) AS total_responses FROM experiment_results JOIN experiment_responses ON experiment_results.id = experiment_responses.result_id GROUP BY experiment_results.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_responses.respondent_name, COUNT(*) AS total_responses FROM experiment_responses JOIN experiment_results ON experiment_responses.result_id = experiment_results.id WHERE experiment_results.result_value < 50 GROUP BY experiment_responses.respondent_name;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_responses.response, experiment_notes.note_text FROM experiment_responses JOIN experiment_notes ON experiment_responses.result_id = experiment_notes.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_results.measurement_time, experiment_responses.response FROM experiment_results JOIN experiment_responses ON experiment_results.id = experiment_responses.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MAX(result_value) AS max_result FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(result_value) AS avg_result FROM experiment_results;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_parameters.parameter_name, experiment_parameters.parameter_value FROM experiment_parameters;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_participants.participant_name, experiment_participants.contact_email FROM experiment_participants;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_notes.note_text FROM experiment_results JOIN experiment_notes ON experiment_results.id = experiment_notes.result_id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_notes.note_text, experiment_notes.author_name FROM experiment_results JOIN experiment_notes ON experiment_results.id = experiment_notes.result_id WHERE experiment_notes.author_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_results.result_value, experiment_responses.response FROM experiment_results JOIN experiment_responses ON experiment_results.id = experiment_responses.result_id ORDER BY experiment_results.result_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_results.result_value, experiment_notes.note_text FROM experiment_results JOIN experiment_notes ON experiment_results.id = experiment_notes.result_id WHERE experiment_notes.note_text LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT participant_name FROM experiment_participants WHERE participant_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_parameters.parameter_name, experiment_parameters.parameter_value FROM experiment_results JOIN experiment_parameters ON experiment_results.id = experiment_parameters.id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_participants.participant_name FROM experiment_results JOIN experiment_participants ON experiment_results.id = experiment_participants.id;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, COUNT(*) AS total_notes FROM experiment_results JOIN experiment_notes ON experiment_results.id = experiment_notes.result_id GROUP BY experiment_results.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, AVG(result_value) AS avg_result FROM experiment_results GROUP BY experiment_results.experiment_name;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_responses.respondent_name, COUNT(*) AS total_responses FROM experiment_responses GROUP BY experiment_responses.respondent_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE experiment_results (\n    id INT PRIMARY KEY,\n    experiment_name VARCHAR(255),\n    measurement_time TIMESTAMP,\n    result_value DECIMAL\n);\n\nCREATE TABLE experiment_responses (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    respondent_name VARCHAR(255),\n    response VARCHAR(1000)\n);\n\nCREATE TABLE experiment_notes (\n    id INT PRIMARY KEY,\n    result_id INT REFERENCES experiment_results(id),\n    note_text TEXT,\n    created_at TIMESTAMP,\n    author_name VARCHAR(255)\n);\n\nCREATE TABLE experiment_parameters (\n    id INT PRIMARY KEY,\n    parameter_name VARCHAR(255),\n    parameter_value DECIMAL\n);\n\nCREATE TABLE experiment_participants (\n    id INT PRIMARY KEY,\n    participant_name VARCHAR(255),\n    contact_email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT experiment_results.experiment_name, experiment_results.result_value, experiment_responses.response, experiment_participants.contact_email FROM experiment_results JOIN experiment_responses ON experiment_results.id = experiment_responses.result_id JOIN experiment_participants ON experiment_results.id = experiment_participants.id;"
]