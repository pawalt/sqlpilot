[
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT song_id, title FROM songs WHERE artist = 'Taylor Swift';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE duration > 300;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, release_date FROM songs WHERE genre = 'Rock' AND duration < 240;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs ORDER BY title;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE release_date BETWEEN '2021-01-01' AND '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist LIKE '%Beyonce%';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, release_date FROM songs WHERE artist = 'Ed Sheeran' ORDER BY release_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) AS num_songs FROM songs GROUP BY artist;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, duration FROM songs WHERE album_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist IN ('Ariana Grande', 'Justin Bieber');",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, AVG(duration) AS avg_duration FROM songs GROUP BY artist HAVING AVG(duration) > 200;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, album_id FROM songs WHERE release_date >= '2021-06-01' AND genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT genre) AS num_genres FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Rock' ORDER BY release_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, duration FROM songs WHERE artist LIKE 'A%' AND duration > 180;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) AS total_songs FROM songs GROUP BY artist HAVING total_songs > 3 ORDER BY total_songs DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs WHERE duration >= 240 AND release_date BETWEEN '2020-01-01' AND '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, MAX(duration) AS max_duration FROM songs GROUP BY artist ORDER BY max_duration DESC LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE release_date >= '2019-01-01' AND release_date <= '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) AS total_songs FROM songs WHERE genre = 'Pop' GROUP BY artist HAVING total_songs > 2 ORDER BY total_songs DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, release_date FROM songs WHERE genre IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, duration FROM songs ORDER BY duration ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT artist FROM songs WHERE genre = 'Hip-Hop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, release_date FROM songs WHERE album_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT genre, AVG(duration) AS avg_duration FROM songs GROUP BY genre HAVING avg_duration > 200;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE title LIKE '%Love%' OR title LIKE '%Heart%';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, MAX(release_date) AS latest_release FROM songs GROUP BY artist ORDER BY latest_release DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) AS total_songs FROM songs GROUP BY artist HAVING COUNT(*) > 1 ORDER BY total_songs DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, release_date FROM songs WHERE genre = 'R&B' AND duration < 180;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, genre FROM songs WHERE artist = 'Taylor Swift' AND genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT artist, MIN(duration) AS min_duration, MAX(duration) AS max_duration FROM songs GROUP BY artist HAVING max_duration - min_duration > 120;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n  song_id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  artist VARCHAR(100) NOT NULL,\n  genre VARCHAR(50),\n  release_date DATE,\n  duration INT,\n  album_id INT,\n  FOREIGN KEY (album_id) REFERENCES albums(album_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, duration FROM songs WHERE genre = 'Rock' AND release_date < '2018-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT song_id, song_title, artist FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre='Rock';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE duration > 300;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT song_title, artist FROM songs WHERE genre='Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, user_id FROM playlists WHERE user_id=10;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT song_title, duration FROM songs ORDER BY duration DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE playlist_name LIKE '%Summer%';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) AS song_count FROM songs GROUP BY artist;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT AVG(duration) AS average_duration FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist='Ed Sheeran' AND genre='Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(*) AS song_count FROM playlists LEFT JOIN songs ON playlists.playlist_id=songs.song_id GROUP BY playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT artist, SUM(duration) AS total_duration FROM songs GROUP BY artist;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE duration BETWEEN 200 AND 400;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name FROM playlists WHERE user_id IN (SELECT user_id FROM users WHERE user_id > 5);",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_songs FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT MAX(duration) AS longest_duration FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, user_id FROM playlists ORDER BY playlist_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Pop' AND duration > 180",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT song_title, artist FROM songs WHERE genre = 'Rock' AND duration < 300",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist LIKE 'Beyonc\u00e9%'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT song_title, genre FROM songs WHERE artist = 'Ed Sheeran'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre IN ('R&B', 'Hip Hop') AND duration < 240",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT DISTINCT artist FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE playlist_name = 'Workout Playlist'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, user_id FROM playlists WHERE playlist_name LIKE '%Party%'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs ORDER BY duration DESC",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist = 'Taylor Swift' AND genre IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(*) AS num_songs FROM playlists JOIN songs ON playlists.playlist_id = songs.duration GROUP BY playlists.playlist_name",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT AVG(duration) AS avg_duration FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, playlist_id, COUNT(*) AS num_songs FROM playlists LEFT JOIN songs ON playlists.playlist_id = songs.duration GROUP BY playlist_name, playlist_id",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Pop' AND artist IN ('Katy Perry', 'Justin Bieber')",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(song_id) AS num_songs FROM playlists JOIN songs ON playlists.playlist_id = songs.duration GROUP BY playlist_name",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre IS NULL",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_id, COUNT(song_id) AS num_songs FROM playlists LEFT JOIN songs ON playlists.playlist_id = songs.duration GROUP BY playlist_id",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT playlist_name, user_id FROM playlists WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id SERIAL PRIMARY KEY,\n    song_title VARCHAR(255) NOT NULL,\n    artist VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    duration INT\n);\n\n\nCREATE TABLE playlists (\n    playlist_id SERIAL PRIMARY KEY,\n    playlist_name VARCHAR(100) NOT NULL,\n    user_id INT REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE duration BETWEEN 200 AND 300",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title FROM songs WHERE release_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs ORDER BY release_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name, created_date FROM playlists WHERE user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE created_date = '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name FROM playlists WHERE user_id = 456 ORDER BY created_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE dob < '1990-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT username FROM users WHERE email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs JOIN playlists ON songs.song_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT songs.title, playlists.playlist_name FROM songs JOIN playlists ON songs.song_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT songs.title, playlists.playlist_name, users.username FROM songs JOIN playlists ON songs.song_id = playlists.playlist_id JOIN users ON users.user_id = playlists.user_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs UNION SELECT * FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT MAX(release_date) FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT genre, COUNT(*) FROM songs GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs WHERE genre = 'Rock';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name, user_id FROM playlists WHERE created_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE dob <= '1990-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE release_date BETWEEN '2020-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM playlists WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT MAX(release_date), MIN(release_date) FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(*) FROM playlists GROUP BY playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT artist, COUNT(*) FROM songs GROUP BY artist HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs JOIN playlists ON songs.song_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT users.username, playlists.playlist_name FROM users INNER JOIN playlists ON users.user_id = playlists.user_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist, playlist_name FROM songs JOIN playlists ON songs.song_id = playlists.playlist_id WHERE artist = 'Queen';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs JOIN playlists ON songs.artist = playlists.playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name, username FROM playlists INNER JOIN users ON playlists.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs LEFT JOIN playlists ON songs.song_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT playlist_name, artist FROM playlists LEFT JOIN songs ON playlists.user_id = songs.song_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs CROSS JOIN users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs UNION SELECT playlist_name, username FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE title LIKE '%love%';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    artist VARCHAR(255),\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(255),\n    user_id INT,\n    created_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(255),\n    dob DATE\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs ORDER BY release_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, artist_name FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, artist_name, album_name FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, country, date_of_birth FROM users",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM playlists",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT playlist_name, creation_date FROM playlists",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM song_playlist",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM user_playlist",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT s.song_title, p.playlist_name FROM songs s, playlists p, song_playlist sp WHERE s.song_id = sp.song_id AND p.playlist_id = sp.playlist_id",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.playlist_name FROM users u, playlists p, user_playlist up WHERE u.user_id = up.user_id AND p.playlist_id = up.playlist_id",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT s.song_title, s.artist_name, u.user_name, u.country FROM songs s, users u, user_playlist up, playlist p WHERE up.user_id = u.user_id AND up.playlist_id = p.playlist_id AND p.playlist_id = sp.playlist_id AND sp.song_id = s.song_id",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM songs WHERE release_year >= 2000",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE country = 'USA'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE creation_date >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT s.song_title FROM songs s WHERE s.genre = 'Rock'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT u.user_name FROM users u WHERE u.date_of_birth < '1990-01-01'",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT AVG(release_year) AS avg_release_year FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT MAX(release_year) AS max_release_year FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT MIN(release_year) AS min_release_year FROM songs",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM songs WHERE genre = 'Rock' AND release_year > 2000;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, artist_name, album_name FROM songs WHERE artist_name = 'Adele' AND genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_songs FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, artist_name, release_year FROM songs WHERE genre IN ('Pop', 'R&B');",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, email, country FROM users WHERE country = 'USA';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, email, date_of_birth FROM users WHERE date_of_birth BETWEEN '1990-01-01' AND '2000-12-31';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT playlist_name, user_name FROM playlists INNER JOIN users ON playlists.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, playlist_name FROM songs INNER JOIN song_playlist ON songs.song_id = song_playlist.song_id INNER JOIN playlists ON song_playlist.playlist_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, playlist_name FROM users INNER JOIN user_playlist ON users.user_id = user_playlist.user_id INNER JOIN playlists ON user_playlist.playlist_id = playlists.playlist_id;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT artist_name, COUNT(song_id) AS total_songs FROM songs GROUP BY artist_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT genre, AVG(release_year) AS avg_release_year FROM songs GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(song_id) AS total_songs FROM song_playlist INNER JOIN playlists ON song_playlist.playlist_id = playlists.playlist_id GROUP BY playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, COUNT(playlist_id) AS total_playlists FROM user_playlist INNER JOIN users ON user_playlist.user_id = users.user_id GROUP BY user_name;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT song_title, artist_name, release_year FROM songs WHERE release_year = (SELECT MAX(release_year) FROM songs);",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT playlist_name FROM playlists WHERE creation_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name FROM users WHERE user_id NOT IN (SELECT user_id FROM user_playlist);",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT * FROM songs ORDER BY release_year DESC, artist_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT user_name, playlist_name, creation_date FROM users INNER JOIN playlists ON users.user_id = playlists.user_id ORDER BY creation_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id INT PRIMARY KEY,\n    song_title VARCHAR(255),\n    artist_name VARCHAR(255),\n    album_name VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(50)\n)\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(100),\n    email VARCHAR(255),\n    country VARCHAR(50),\n    date_of_birth DATE\n)\n\nCREATE TABLE playlists (\n    playlist_id INT PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    user_id INT,\n    creation_date DATE\n)\n\nCREATE TABLE song_playlist (\n    song_id INT,\n    playlist_id INT,\n    PRIMARY KEY (song_id, playlist_id)\n)\n\nCREATE TABLE user_playlist (\n    user_id INT,\n    playlist_id INT,\n    PRIMARY KEY (user_id, playlist_id)\n)\n\n### STATEMENT\n\nSELECT DISTINCT album_name, artist_name FROM songs WHERE genre = 'Hip Hop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT title, artist FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT genre, release_year FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT registration_date, favorite_genre FROM users;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, description FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT creation_date, user_id FROM playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs_in_playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_id, song_id FROM songs_in_playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT added_at FROM songs_in_playlists;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_follows;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT follower_id, following_id FROM user_follows;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT follow_date FROM user_follows;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, p.playlist_name FROM songs s, playlists p;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, p.playlist_name FROM users u, playlists p;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, sip.added_at FROM songs s, songs_in_playlists sip;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, uf.follow_date FROM users u, user_follows uf;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_id, p.playlist_name, u.username FROM playlists p, users u;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.song_id, s.title, sip.added_at FROM songs s, songs_in_playlists sip;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, uf.follow_date FROM users u, user_follows uf;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT title, artist, genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE favorite_genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE registration_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, description, creation_date FROM playlists WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, p.playlist_name FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id WHERE p.creation_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, f.follow_date FROM users u JOIN user_follows f ON u.user_id = f.following_id WHERE f.follower_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, u.username FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id JOIN users u ON p.user_id = u.user_id WHERE u.favorite_genre = 'Rock';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT p.playlist_name, p.description, u.username FROM playlists p JOIN users u ON p.user_id = u.user_id WHERE u.registration_date <= '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, u.username FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id JOIN users u ON p.user_id = u.user_id WHERE u.favorite_genre = 'Hip-Hop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, f.follow_date FROM users u JOIN user_follows f ON u.user_id = f.follower_id WHERE f.follow_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, p.playlist_name FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id WHERE p.creation_date <= '2021-06-30';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE description LIKE '%relaxing%';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, u.username, s.title FROM playlists p JOIN users u ON p.user_id = u.user_id JOIN songs_in_playlists sp ON p.playlist_id = sp.playlist_id JOIN songs s ON sp.song_id = s.song_id WHERE s.duration >= 300;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, f.follow_date FROM users u JOIN user_follows f ON u.user_id = f.following_id WHERE f.follow_date BETWEEN '2021-01-01' AND '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, u.username FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id JOIN users u ON p.user_id = u.user_id WHERE u.favorite_genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE release_year BETWEEN 2000 AND 2010;",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, description, creation_date FROM playlists WHERE creation_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE songs (\n    song_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    artist VARCHAR(255) NOT NULL,\n    genre VARCHAR(50),\n    release_year INT,\n    duration INT\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    registration_date TIMESTAMP,\n    favorite_genre VARCHAR(50)\n);\n\nCREATE TABLE playlists (\n    playlist_id UUID PRIMARY KEY,\n    playlist_name VARCHAR(100),\n    description TEXT,\n    creation_date TIMESTAMP,\n    user_id UUID REFERENCES users(user_id)\n);\n\nCREATE TABLE songs_in_playlists (\n    playlist_id UUID REFERENCES playlists(playlist_id),\n    song_id UUID REFERENCES songs(song_id),\n    added_at TIMESTAMP,\n    PRIMARY KEY (playlist_id, song_id)\n);\n\nCREATE TABLE user_follows (\n    follower_id UUID REFERENCES users(user_id),\n    following_id UUID REFERENCES users(user_id),\n    follow_date TIMESTAMP,\n    PRIMARY KEY (follower_id, following_id)\n);\n\n### STATEMENT\n\nSELECT s.title, s.artist, u.username FROM songs s JOIN songs_in_playlists sp ON s.song_id = sp.song_id JOIN playlists p ON sp.playlist_id = p.playlist_id JOIN users u ON p.user_id = u.user_id WHERE u.favorite_genre = 'Country';"
]