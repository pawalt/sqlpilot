[
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 1', 1, 1, '2022-01-01') ON CONFLICT (episode_id) DO UPDATE SET episode_name = 'Episode 1', season_number = 1, episode_number = 1, air_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 2', 1, 2, '2022-01-08') ON CONFLICT (episode_id) DO UPDATE SET episode_name = 'Episode 2', season_number = 1, episode_number = 2, air_date = '2022-01-08';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 3', 1, 3, '2022-01-15') ON CONFLICT (episode_id) DO UPDATE SET episode_name = 'Episode 3', season_number = 1, episode_number = 3, air_date = '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 4', 1, 4, '2022-01-22') ON CONFLICT (episode_id) DO UPDATE SET episode_name = 'Episode 4', season_number = 1, episode_number = 4, air_date = '2022-01-22';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 5', 1, 5, '2022-01-29') ON CONFLICT (episode_id) DO UPDATE SET episode_name = 'Episode 5', season_number = 1, episode_number = 5, air_date = '2022-01-29';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES...",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 1', 1, 1, '2021-01-01') ON CONFLICT (episode_name) DO UPDATE SET season_number = 1, episode_number = 1, air_date = '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 2', 1, 2, '2021-01-08') ON CONFLICT (episode_name) DO UPDATE SET season_number = 1, episode_number = 2, air_date = '2021-01-08';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 3', 1, 3, '2021-01-15') ON CONFLICT (episode_name) DO UPDATE SET season_number = 1, episode_number = 3, air_date = '2021-01-15';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 4', 1, 4, '2021-01-22') ON CONFLICT (episode_name) DO UPDATE SET season_number = 1, episode_number = 4, air_date = '2021-01-22';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_number, episode_number, air_date) VALUES ('Episode 5', 1, 5, '2021-01-29') ON CONFLICT (episode_name) DO UPDATE SET season_number = 1, episode_number = 5, air_date = '2021-01-29';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n    episode_id SERIAL PRIMARY KEY,\n    episode_name VARCHAR(100),\n    season_number INT,\n    episode_number INT,\n    air_date DATE\n)\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_name, season_nu...",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (1, 'Episode 1', 1, 1, '2022-01-01') ON DUPLICATE KEY UPDATE title='Episode 1', season=1, episode_number=1, release_date='2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (2, 'Episode 2', 1, 2, '2022-01-02') ON DUPLICATE KEY UPDATE title='Episode 2', season=1, episode_number=2, release_date='2022-01-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (3, 'Episode 3', 1, 3, '2022-01-03') ON DUPLICATE KEY UPDATE title='Episode 3', season=1, episode_number=3, release_date='2022-01-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (4, 'Episode 4', 2, 1, '2022-02-01') ON DUPLICATE KEY UPDATE title='Episode 4', season=2, episode_number=1, release_date='2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (5, 'Episode 5', 2, 2, '2022-02-02') ON DUPLICATE KEY UPDATE title='Episode 5', season=2, episode_number=2, release_date='2022-02-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (6, 'Episode 6', 2, 3, '2022-02-03') ON DUPLICATE KEY UPDATE title='Episode 6', season=2, episode_number=3, release_date='2022-02-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (7, 'Episode 7', 3, 1, '2022-03-01') ON DUPLICATE KEY UPDATE title='Episode 7', season=3, episode_number=1, release_date='2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (8, 'Episode 8', 3, 2, '2022-03-02') ON DUPLICATE KEY UPDATE title='Episode 8', season=3, episode_number=2, release_date='2022-03-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (9, 'Episode 9', 3, 3, '2022-03-03') ON DUPLICATE KEY UPDATE title='Episode 9', season=3, episode_number=3, release_date='2022-03-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (10, 'Episode 10', 4, 1, '2022-04-01') ON DUPLICATE KEY UPDATE title='Episode 10', season=4, episode_number=1, release_date='2022-04-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (11, 'Episode 11', 4, 2, '2022-04-02') ON DUPLICATE KEY UPDATE title='Episode 11', season=4, episode_number=2, release_date='2022-04-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (12, 'Episode 12', 4, 3, '2022-04-03') ON DUPLICATE KEY UPDATE title='Episode 12', season=4, episode_number=3, release_date='2022-04-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (13, 'Episode 13', 5, 1, '2022-05-01') ON DUPLICATE KEY UPDATE title='Episode 13', season=5, episode_number=1, release_date='2022-05-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (14, 'Episode 14', 5, 2, '2022-05-02') ON DUPLICATE KEY UPDATE title='Episode 14', season=5, episode_number=2, release_date='2022-05-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (15, 'Episode 15', 5, 3, '2022-05-03') ON DUPLICATE KEY UPDATE title='Episode 15', season=5, episode_number=3, release_date='2022-05-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (16, 'Episode 16', 6, 1, '2022-06-01') ON DUPLICATE KEY UPDATE title='Episode 16', season=6, episode_number=1, release_date='2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (17, 'Episode 17', 6, 2, '2022-06-02') ON DUPLICATE KEY UPDATE title='Episode 17', season=6, episode_number=2, release_date='2022-06-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (18, 'Episode 18', 6, 3, '2022-06-03') ON DUPLICATE KEY UPDATE title='Episode 18', season=6, episode_number=3, release_date='2022-06-03';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (19, 'Episode 19', 7, 1, '2022-07-01') ON DUPLICATE KEY UPDATE title='Episode 19', season=7, episode_number=1, release_date='2022-07-01';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nINSERT INTO episode (id, title, season, episode_number, release_date) VALUES (20, 'Episode 20', 7, 2, '2022-07-02') ON DUPLICATE KEY UPDATE title='Episode 20', season=7, episode_number=2, release_date='2022-07-02';",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (1, 'Pilot', 1, 1, '2022-01-01') ON CONFLICT (id) DO UPDATE SET title = 'Pilot'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (2, 'The Beginning', 1, 2, '2022-01-08') ON CONFLICT (id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (3, 'The Discovery', 1, 3, '2022-01-15') ON CONFLICT (id) DO UPDATE SET season = 1",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (4, 'Secrets Revealed', 1, 4, '2022-01-22') ON CONFLICT (id) DO UPDATE SET episode_number = 4",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (5, 'The Incident', 1, 5, '2022-01-29') ON CONFLICT (id) DO UPDATE SET release_date = '2022-01-29'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (6, 'Unexpected Twist', 1, 6, '2022-02-05') ON CONFLICT (id) DO UPDATE SET title = 'Unexpected Turn'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (7, 'The Truth Unveiled', 1, 7, '2022-02-12') ON CONFLICT (id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (8, 'New Beginnings', 2, 1, '2022-02-19') ON CONFLICT (id) DO UPDATE SET season = 2",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (9, 'Mystery Continues', 2, 2, '2022-02-26') ON CONFLICT (id) DO UPDATE SET episode_number = 2",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (10, 'The Encounter', 2, 3, '2022-03-05') ON CONFLICT (id) DO UPDATE SET release_date = '2022-03-05'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (11, 'Unraveling Secrets', 2, 4, '2022-03-12') ON CONFLICT (id) DO UPDATE SET title = 'Secrets Unraveled'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (12, 'The Chase Begins', 2, 5, '2022-03-19') ON CONFLICT (id) DO UPDATE SET season = 2",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (13, 'The Capture', 2, 6, '2022-03-26') ON CONFLICT (id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (14, 'Facing Reality', 2, 7, '2022-04-02') ON CONFLICT (id) DO UPDATE SET episode_number = 7",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (15, 'The Final Showdown', 2, 8, '2022-04-09') ON CONFLICT (id) DO UPDATE SET release_date = '2022-04-09'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (16, 'Beginning of the End', 3, 1, '2022-04-16') ON CONFLICT (id) DO UPDATE SET title = 'End of the Beginning'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (17, 'Fateful Decision', 3, 2, '2022-04-23') ON CONFLICT (id) DO UPDATE SET season = 3",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (18, 'Unexpected Allies', 3, 3, '2022-04-30') ON CONFLICT (id) DO UPDATE SET episode_number = 3",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (19, 'The Final Battle', 3, 4, '2022-05-07') ON CONFLICT (id) DO UPDATE SET release_date = '2022-05-07'",
  "### TABLEDATA\n\nCREATE TABLE episode (id INT PRIMARY KEY,\n        title VARCHAR(255),\n        season INT,\n        episode_number INT,\n        release_date DATE);\n\n\nCREATE TABLE user_viewing_history (id INT PRIMARY KEY,\n        user_id INT,\n        episode_id INT,\n        view_date TIMESTAMP,\n        duration_in_seconds INT);\n\n### STATEMENT\n\nUPSERT INTO episode (id, title, season, episode_number, release_date) VALUES (20, 'The Aftermath', 3, 5, '2022-05-14') ON CONFLICT (id) DO UPDATE SET title = 'Aftermath of the Battle'",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (1, 'Episode 1', 1, 1, 30, '2022-01-01') ON CONFLICT (episode_id) DO UPDATE SET episode_title = 'Episode 1 Updated';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (2, 'Episode 2', 1, 2, 25, '2022-01-05') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (3, 'Episode 3', 1, 3, 35, '2022-01-10') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (4, 'Episode 4', 1, 4, 40, '2022-01-15') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (5, 'Episode 5', 1, 5, 45, '2022-01-20') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (6, 'Episode 6', 1, 6, 50, '2022-01-25') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (7, 'Episode 7', 1, 7, 55, '2022-01-30') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (8, 'Episode 8', 1, 8, 60, '2022-02-01') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (9, 'Episode 9', 2, 1, 30, '2022-02-05') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (10, 'Episode 10', 2, 2, 25, '2022-02-10') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (11, 'Episode 11', 2, 3, 35, '2022-02-15') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (12, 'Episode 12', 2, 4, 40, '2022-02-20') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (13, 'Episode 13', 2, 5, 45, '2022-02-25') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (14, 'Episode 14', 2, 6, 50, '2022-03-01') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (15, 'Episode 15', 2, 7, 55, '2022-03-05') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (16, 'Episode 16', 2, 8, 60, '2022-03-10') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (17, 'Episode 17', 3, 1, 30, '2022-03-15') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (18, 'Episode 18', 3, 2, 25, '2022-03-20') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (19, 'Episode 19', 3, 3, 35, '2022-03-25') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (20, 'Episode 20', 3, 4, 40, '2022-03-30') ON CONFLICT (episode_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (1, 'The Pilot', 1, 1, 30, '2022-01-10') ON CONFLICT (episode_id) DO UPDATE SET duration_minutes = EXCLUDED.duration_minutes, release_date = EXCLUDED.release_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (2, 'The Reunion', 1, 2, 25, '2022-01-15') ON CONFLICT (episode_id) DO UPDATE SET duration_minutes = EXCLUDED.duration_minutes, release_date = EXCLUDED.release_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (3, 'The Finale', 2, 10, 40, '2022-02-20') ON CONFLICT (episode_id) DO UPDATE SET duration_minutes = EXCLUDED.duration_minutes, release_date = EXCLUDED.release_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (4, 'The Return', 2, 1, 35, '2022-03-05') ON CONFLICT (episode_id) DO UPDATE SET duration_minutes = EXCLUDED.duration_minutes, release_date = EXCLUDED.release_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, episode_title, season_number, episode_number, duration_minutes, release_date) VALUES (5, 'The Betrayal', 2, 5, 45, '2022-03-10') ON CONFLICT (episode_id) DO UPDATE SET duration_minutes = EXCLUDED.duration_minutes, release_date = EXCLUDED.release_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, subscription_type, registration_date) VALUES (1, 'JohnDoe', 'johndoe@example.com', 'Premium', '2022-01-01') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, subscription_type = EXCLUDED.subscription_type, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, subscription_type, registration_date) VALUES (2, 'JaneSmith', 'janesmith@example.com', 'Basic', '2022-01-05') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, subscription_type = EXCLUDED.subscription_type, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, subscription_type, registration_date) VALUES (3, 'AliceJohnson', 'alicejohnson@example.com', 'Premium', '2022-02-01') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, subscription_type = EXCLUDED.subscription_type, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, subscription_type, registration_date) VALUES (4, 'BobWilliams', 'bobwilliams@example.com', 'Premium', '2022-02-05') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, subscription_type = EXCLUDED.subscription_type, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, subscription_type, registration_date) VALUES (5, 'EveBrown', 'evebrown@example.com', 'Basic', '2022-03-01') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, email = EXCLUDED.email, subscription_type = EXCLUDED.subscription_type, registration_date = EXCLUDED.registration_date;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, viewing_date, viewing_duration_minutes) VALUES (1, 1, 1, '2022-01-10 15:30:00', 20) ON CONFLICT (history_id) DO UPDATE SET user_id = EXCLUDED.user_id, episode_id = EXCLUDED.episode_id, viewing_date = EXCLUDED.viewing_date, viewing_duration_minutes = EXCLUDED.viewing_duration_minutes;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, viewing_date, viewing_duration_minutes) VALUES (2, 2, 2, '2022-01-15 18:00:00', 25) ON CONFLICT (history_id) DO UPDATE SET user_id = EXCLUDED.user_id, episode_id = EXCLUDED.episode_id, viewing_date = EXCLUDED.viewing_date, viewing_duration_minutes = EXCLUDED.viewing_duration_minutes;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, viewing_date, viewing_duration_minutes) VALUES (3, 1, 3, '2022-02-20 20:00:00', 35) ON CONFLICT (history_id) DO UPDATE SET user_id = EXCLUDED.user_id, episode_id = EXCLUDED.episode_id, viewing_date = EXCLUDED.viewing_date, viewing_duration_minutes = EXCLUDED.viewing_duration_minutes;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, viewing_date, viewing_duration_minutes) VALUES (4, 2, 4, '2022-03-05 22:00:00', 30) ON CONFLICT (history_id) DO UPDATE SET user_id = EXCLUDED.user_id, episode_id = EXCLUDED.episode_id, viewing_date = EXCLUDED.viewing_date, viewing_duration_minutes = EXCLUDED.viewing_duration_minutes;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\\n    episode_id INT PRIMARY KEY,\\n    episode_title TEXT,\\n    season_number INT,\\n    episode_number INT,\\n    duration_minutes INT,\\n    release_date DATE\\n);\n\nCREATE TABLE users (\\n    user_id INT PRIMARY KEY,\\n    username TEXT,\\n    email TEXT,\\n    subscription_type TEXT,\\n    registration_date DATE\\n);\n\nCREATE TABLE viewing_history (\\n    history_id INT PRIMARY KEY,\\n    user_id INT REFERENCES users(user_id),\\n    episode_id INT REFERENCES episodes(episode_id),\\n    viewing_date TIMESTAMP,\\n    viewing_duration_minutes INT\\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, viewing_date, viewing_duration_minutes) VALUES (5, 3, 5, '2022-03-10 19:45:00', 40) ON CONFLICT (history_id) DO UPDATE SET user_id = EXCLUDED.user_id, episode_id = EXCLUDED.episode_id, viewing_date = EXCLUDED.viewing_date, viewing_duration_minutes = EXCLUDED.viewing_duration_minutes;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nUPSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (1, 'Episode 1', 1, 1, 30, '2022-01-01')",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nUPSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (1, 'Series 1', 'Action', 'Description 1', 2020, 5)",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email, date_joined) VALUES (1, 'User1', 'user1@example.com', '2022-01-01')",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nUPSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (1, 1, 1, '2022-01-02', 25)",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (1, 'Pilot', 1, 1, 30, '2021-01-01') ON DUPLICATE KEY UPDATE title='Pilot', season=1, episode_number=1, duration=30, release_date='2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (1, 'Friends', 'Comedy', 'Classic sitcom about six friends living in NYC.', 1994, 10) ON DUPLICATE KEY UPDATE title='Friends', genre='Comedy', description='Classic sitcom about six friends living in NYC.', release_year=1994, total_seasons=10;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, date_joined) VALUES (1, 'john_doe', 'john.doe@example.com', '2021-01-01') ON DUPLICATE KEY UPDATE username='john_doe', email='john.doe@example.com', date_joined='2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (1, 1, 1, '2021-01-05', 30) ON DUPLICATE KEY UPDATE user_id=1, episode_id=1, date_watched='2021-01-05', duration_watched=30;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (2, 'The One With the Blackout', 1, 7, 25, '2021-01-08') ON DUPLICATE KEY UPDATE title='The One With the Blackout', season=1, episode_number=7, duration=25, release_date='2021-01-08';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (2, 'Breaking Bad', 'Drama', 'Chemistry teacher turned meth producer.', 2008, 5) ON DUPLICATE KEY UPDATE title='Breaking Bad', genre='Drama', description='Chemistry teacher turned meth producer.', release_year=2008, total_seasons=5;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, date_joined) VALUES (2, 'jane_smith', 'jane.smith@example.com', '2021-02-10') ON DUPLICATE KEY UPDATE username='jane_smith', email='jane.smith@example.com', date_joined='2021-02-10';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (2, 2, 2, '2021-02-15', 40) ON DUPLICATE KEY UPDATE user_id=2, episode_id=2, date_watched='2021-02-15', duration_watched=40;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (3, 'The One Where Monica Gets a Roommate', 1, 1, 30, '2021-02-20') ON DUPLICATE KEY UPDATE title='The One Where Monica Gets a Roommate', season=1, episode_number=1, duration=30, release_date='2021-02-20';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (3, 'Stranger Things', 'Sci-Fi', 'Supernatural occurrences in a small town.', 2016, 4) ON DUPLICATE KEY UPDATE title='Stranger Things', genre='Sci-Fi', description='Supernatural occurrences in a small town.', release_year=2016, total_seasons=4;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, date_joined) VALUES (3, 'alice_wonderland', 'alice.wonderland@example.com', '2021-03-01') ON DUPLICATE KEY UPDATE username='alice_wonderland', email='alice.wonderland@example.com', date_joined='2021-03-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (3, 3, 3, '2021-03-05', 35) ON DUPLICATE KEY UPDATE user_id=3, episode_id=3, date_watched='2021-03-05', duration_watched=35;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (4, 'Cat in the Wall', 2, 5, 20, '2021-03-10') ON DUPLICATE KEY UPDATE title='Cat in the Wall', season=2, episode_number=5, duration=20, release_date='2021-03-10';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (4, 'The Office', 'Mockumentary', 'Daily lives of office employees.', 2005, 9) ON DUPLICATE KEY UPDATE title='The Office', genre='Mockumentary', description='Daily lives of office employees.', release_year=2005, total_seasons=9;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, date_joined) VALUES (4, 'bob_smith', 'bob.smith@example.com', '2021-04-15') ON DUPLICATE KEY UPDATE username='bob_smith', email='bob.smith@example.com', date_joined='2021-04-15';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (4, 4, 4, '2021-04-20', 40) ON DUPLICATE KEY UPDATE user_id=4, episode_id=4, date_watched='2021-04-20', duration_watched=40;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO episodes (episode_id, title, season, episode_number, duration, release_date) VALUES (5, 'The One With All the Resolutions', 2, 11, 25, '2021-05-01') ON DUPLICATE KEY UPDATE title='The One With All the Resolutions', season=2, episode_number=11, duration=25, release_date='2021-05-01';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO series (series_id, title, genre, description, release_year, total_seasons) VALUES (5, 'The Crown', 'Historical Drama', 'Story of Queen Elizabeth II.', 2016, 4) ON DUPLICATE KEY UPDATE title='The Crown', genre='Historical Drama', description='Story of Queen Elizabeth II.', release_year=2016, total_seasons=4;",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, date_joined) VALUES (5, 'sally_jones', 'sally.jones@example.com', '2021-05-10') ON DUPLICATE KEY UPDATE username='sally_jones', email='sally.jones@example.com', date_joined='2021-05-10';",
  "### TABLEDATA\n\nCREATE TABLE episodes (\n  episode_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  season INT,\n  episode_number INT,\n  duration INT,\n  release_date DATE\n);\n\nCREATE TABLE series (\n  series_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(50),\n  description TEXT,\n  release_year INT,\n  total_seasons INT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255),\n  date_joined DATE\n);\n\nCREATE TABLE viewing_history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  episode_id INT,\n  date_watched DATE,\n  duration_watched INT\n);\n\n### STATEMENT\n\nINSERT INTO viewing_history (history_id, user_id, episode_id, date_watched, duration_watched) VALUES (5, 5, 5, '2021-05-15', 30) ON DUPLICATE KEY UPDATE user_id=5, episode_id=5, date_watched='2021-05-15', duration_watched=30;",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nUPSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (1, 'Game of Thrones', 'Epic fantasy series', 'Fantasy') ON DUPLICATE KEY UPDATE show_title = VALUES(show_title), show_description = VALUES(show_description), show_genre = VALUES(show_genre);",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nUPSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (2, 'Stranger Things', 'Sci-fi horror series', 'Sci-fi') ON DUPLICATE KEY UPDATE show_title = VALUES(show_title), show_description = VALUES(show_description), show_genre = VALUES(show_genre);",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nUPSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (3, 'Breaking Bad', 'Crime drama series', 'Drama') ON DUPLICATE KEY UPDATE show_title = VALUES(show_title), show_description = VALUES(show_description), show_genre = VALUES(show_genre);",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nUPSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (4, 'The Office', 'Mockumentary sitcom', 'Comedy') ON DUPLICATE KEY UPD...",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (1, 'Stranger Things', 'A suspenseful sci-fi series', 'Sci-Fi') ON DUPLICATE KEY UPDATE show_title = 'Stranger Things';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (2, 'Friends', 'A classic sitcom about friends', 'Comedy') ON DUPLICATE KEY UPDATE show_title = 'Friends';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (3, 'Breaking Bad', 'A thrilling drama about a chemistry teacher turned meth producer', 'Drama') ON DUPLICATE KEY UPDATE show_title = 'Breaking Bad';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (4, 'The Office', 'A mockumentary-style comedy series about office life', 'Comedy') ON DUPLICATE KEY UPDATE show_title = 'The Office';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (5, 'Game of Thrones', 'An epic fantasy series based on novels by George R. R. Martin', 'Fantasy') ON DUPLICATE KEY UPDATE show_title = 'Game of Thrones';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (6, 'The Crown', 'Historical drama about the reign of Queen Elizabeth II', 'Drama') ON DUPLICATE KEY UPDATE show_title = 'The Crown';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (7, 'The Mandalorian', 'Sci-fi series in the Star Wars universe', 'Sci-Fi') ON DUPLICATE KEY UPDATE show_title = 'The Mandalorian';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (8, 'Stranger Things 2', 'The second season of the hit sci-fi series', 'Sci-Fi') ON DUPLICATE KEY UPDATE show_title = 'Stranger Things 2';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (9, 'Sherlock', 'Modern-day adaptation of Sherlock Holmes stories', 'Mystery') ON DUPLICATE KEY UPDATE show_title = 'Sherlock';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (10, 'Black Mirror', 'Anthology series exploring the dark side of technology', 'Sci-Fi') ON DUPLICATE KEY UPDATE show_title = 'Black Mirror';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (11, 'Parks and Recreation', 'Mockumentary-style comedy series set in a parks department', 'Comedy') ON DUPLICATE KEY UPDATE show_title = 'Parks and Recreation';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (12, 'The Witcher', 'Fantasy series based on book series by Andrzej Sapkowski', 'Fantasy') ON DUPLICATE KEY UPDATE show_title = 'The Witcher';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (13, 'Stranger Things 3', 'The third season of the sci-fi hit series', 'Sci-Fi') ON DUPLICATE KEY UPDATE show_title = 'Stranger Things 3';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (14, 'The Sopranos', 'Crime drama series about mafia boss Tony Soprano', 'Crime') ON DUPLICATE KEY UPDATE show_title = 'The Sopranos';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (15, 'Friends Reunion', 'Special reunion episode of the classic sitcom', 'Comedy') ON DUPLICATE KEY UPDATE show_title = 'Friends Reunion';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (16, 'Money Heist', 'Spanish heist crime drama series', 'Crime') ON DUPLICATE KEY UPDATE show_title = 'Money Heist';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (17, 'The Big Bang Theory', 'Sitcom about a group of nerdy friends', 'Comedy') ON DUPLICATE KEY UPDATE show_title = 'The Big Bang Theory';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (18, 'Ozark', 'Crime drama series about a financial planner turned criminal', 'Crime') ON DUPLICATE KEY UPDATE show_title = 'Ozark';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (19, 'Grey's Anatomy', 'Medical drama series about doctors at a Seattle hospital', 'Medical Drama') ON DUPLICATE KEY UPDATE show_title = 'Grey's Anatomy';",
  "### TABLEDATA\n\nCREATE TABLE IF NOT EXISTS Shows (show_id INT PRIMARY KEY, show_title VARCHAR(255), show_description TEXT, show_genre VARCHAR(50));\n\nCREATE TABLE IF NOT EXISTS Episodes (episode_id INT PRIMARY KEY, show_id INT, episode_title VARCHAR(255), episode_number INT, episode_description TEXT, FOREIGN KEY (show_id) REFERENCES Shows(show_id));\n\nCREATE TABLE IF NOT EXISTS Users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), registration_date DATE);\n\nCREATE TABLE IF NOT EXISTS ViewingHistory (view_id INT PRIMARY KEY, user_id INT, show_id INT, episode_id INT, viewed_date TIMESTAMP, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (show_id) REFERENCES Shows(show_id), FOREIGN KEY (episode_id) REFERENCES Episodes(episode_id));\n\nCREATE TABLE IF NOT EXISTS UserPreferences (user_id INT PRIMARY KEY, preferred_genre VARCHAR(50), preferred_language VARCHAR(50), FOREIGN KEY (user_id) REFERENCES Users(user_id));\n\n### STATEMENT\n\nINSERT INTO Shows (show_id, show_title, show_description, show_genre) VALUES (20, 'The Queen''s Gambit', 'Drama miniseries about a female chess prodigy', 'Drama') ON DUPLICATE KEY UPDATE show_title = 'The Queen''s Gambit';"
]