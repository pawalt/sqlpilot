[
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE age > 18;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age BETWEEN 20 AND 30;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE age < 25 AND username LIKE '%e%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE age >= 30 AND age <= 40;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, age, movie_preferences FROM users WHERE age IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE movie_preferences @> ARRAY['comedy'];",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE movie_preferences @> ARRAY['action'];",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, age FROM users WHERE email = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE movie_preferences && ARRAY['action', 'drama'];",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'alice' OR username = 'bob';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username, age FROM users ORDER BY age ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age < 18 OR age > 60;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE movie_preferences @> ARRAY['action', 'comedy'];",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 20 AND age < 40 AND username NOT LIKE '%admin%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 30 AND username LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE age BETWEEN 25 AND 40",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age IS NOT NULL ORDER BY age DESC",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users WHERE age <= 20",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT DISTINCT username FROM users WHERE age >= 18",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe' OR email = 'john.doe@example.com'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT AVG(age) FROM users WHERE age IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, email, movie_preferences[1] FROM users WHERE array_length(movie_preferences, 1) > 3",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age IS NULL",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, ARRAY_LENGTH(movie_preferences, 1) AS num_preferences FROM users WHERE array_length(movie_preferences, 1) > 0",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE email LIKE '%@gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username IN ('alice', 'bob', 'charlie')",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT DISTINCT age FROM users ORDER BY age",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT username, array_to_string(movie_preferences, ', ') AS movie_list FROM users WHERE array_length(movie_preferences, 1) > 0",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username ILIKE '%doe%'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE age BETWEEN 30 AND 50 AND array_length(movie_preferences, 1) > 0",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT MAX(age) AS max_age, MIN(age) AS min_age FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT email) FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE age > 25 LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  age INT,\n  movie_preferences VARCHAR(255)[]\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE ARRAY['scifi', 'drama'] <@ movie_preferences",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'alice';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT title, release_year FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT title, genre FROM movies WHERE release_year < 2000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT movie_id, title FROM movies ORDER BY release_year ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM users JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT users.username, movies.title FROM users JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT users.username, movies.title FROM users INNER JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT users.username, movies.title FROM users LEFT JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT users.username, movies.title FROM users RIGHT JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT users.username, movies.title FROM users FULL JOIN movies ON users.user_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users AS u JOIN movies AS m ON u.user_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users AS u JOIN movies AS m ON u.user_id = m.movie_id WHERE m.genre = 'Comedy';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users AS u JOIN movies AS m ON u.user_id = m.movie_id ORDER BY m.release_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'A%' AND email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT user_id, username, movie_preferences -> 'genre' AS favorite_genre FROM users WHERE movie_preferences -> 'genre' = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Comedy' AND release_year > 2000;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT m.title, m.release_year, u.username FROM movies m JOIN users u ON m.title = u.movie_preferences ->> 'favorite_movie';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u LEFT JOIN movies m ON u.user_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username AS user, m.title AS movie, COUNT(m.title) AS movies_count FROM users u JOIN movies m ON u.movie_preferences ->> 'favorite_movie' = m.title GROUP BY u.username, m.title;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total FROM users u JOIN movies m ON u.movie_preferences ->> 'favorite_genre' = m.genre GROUP BY u.username HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.username FROM users u JOIN movies m ON u.movie_preferences ->> 'favorite_genre' = m.genre WHERE m.release_year > 2010 AND m.genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username AS user, AVG(m.release_year) AS avg_release_year FROM users u JOIN movies m ON u.movie_preferences ->> 'favorite_movie' = m.title GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, JSONB_ARRAY_LENGTH(u.movie_preferences -> 'genre') AS genre_count FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, JSONB_OBJECT_KEYS(u.movie_preferences) AS preferences_key FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, JSONB_ARRAY_ELEMENTS(u.movie_preferences -> 'genre') AS genres FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, JSONB_ARRAY_ELEMENTS_TEXT(u.movie_preferences -> 'genre') AS genres_text FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT JSONB_OBJECT_KEYS(u.movie_preferences) AS preferences_key FROM users u;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT username, JSONB_OBJECT_AGG(key, value) AS preferences FROM users CROSS JOIN LATERAL JSONB_EACH(movie_preferences);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u, LATERAL (SELECT title FROM movies WHERE m.genre = u.movie_preferences ->> 'favorite_genre') m;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u CROSS JOIN LATERAL (SELECT title FROM movies WHERE genre = u.movie_preferences ->> 'favorite_genre' LIMIT 1) m;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u LEFT JOIN LATERAL (SELECT title FROM movies WHERE genre = u.movie_preferences ->> 'favorite_genre' LIMIT 1) m ON TRUE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    movie_preferences JSONB\n);\n\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    release_year INT,\n    genre VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u RIGHT JOIN LATERAL (SELECT title FROM movies WHERE genre = u.movie_preferences ->> 'favorite_genre' LIMIT 1) m ON TRUE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, location FROM users WHERE location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE genre = 'Comedy';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id ORDER BY user_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id ORDER BY movie_title DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT location FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, location FROM users WHERE location = 'Los Angeles' OR location = 'San Francisco';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, release_year FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id ORDER BY release_year ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, COUNT(movie_id) AS num_movies_watched FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id GROUP BY user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, AVG(release_year) AS avg_release_year FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id GROUP BY user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_name LIKE '%Anna%' AND genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, location FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE location IN ('New York', 'Los Angeles');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, release_year, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE release_year BETWEEN 2000 AND 2010;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE genre IN ('Comedy', 'Drama');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_name = 'Alice' OR user_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_name <> 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, COUNT(movie_id) AS num_movies_watched FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id WHERE user_name = 'Alice' GROUP BY user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title, release_year FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_name = 'Bob' AND release_year > 2015;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, location FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, movie_title FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE users.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name AS name, location AS city FROM users WHERE location IN ('New York', 'Los Angeles') ORDER BY user_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, location, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE genre = 'Action' AND release_year > 2010;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Comedy' ORDER BY release_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT AVG(release_year) AS average_year FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(movie_id) AS total_movies FROM user_movie_preferences GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(movie_id) AS total_movies FROM user_movie_preferences GROUP BY user_id HAVING COUNT(movie_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(movie_id) AS total_movies FROM user_movie_preferences GROUP BY user_id ORDER BY total_movies DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id NOT IN (SELECT user_id FROM user_movie_preferences);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_preferences FROM user_movie_preferences GROUP BY user_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, movie_title, genre FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id WHERE user_id IN (SELECT user_id FROM user_movie_preferences GROUP BY user_id HAVING COUNT(*) > 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_name, location FROM users WHERE LENGTH(user_name) > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE movie_preferences LIKE '%Drama%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, user_name, COUNT(movie_id) AS total_movies FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id GROUP BY user_id, user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(release_year) AS avg_year FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT genre) AS unique_genres FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    user_name VARCHAR(50),\n    location VARCHAR(50),\n    movie_preferences TEXT\n);\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    movie_title VARCHAR(100),\n    release_year INT,\n    genre VARCHAR(50)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id INT,\n    movie_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT location, AVG(release_year) AS avg_year FROM users JOIN user_movie_preferences ON users.user_id = user_movie_preferences.user_id JOIN movies ON user_movie_preferences.movie_id = movies.movie_id GROUP BY location HAVING AVG(release_year) > 2015;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT title, director FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating FROM user_movie_preferences;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT user_id1, user_id2 FROM user_connections;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'example_user';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_movie_preferences WHERE rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM user_connections WHERE isConnected = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u JOIN user_movie_preferences up ON u.user_id = up.user_id JOIN movies m ON up.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u LEFT JOIN user_movie_preferences up ON u.user_id = up.user_id LEFT JOIN movies m ON up.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u RIGHT JOIN user_movie_preferences up ON u.user_id = up.user_id RIGHT JOIN movies m ON up.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title FROM users u JOIN user_movie_preferences up ON u.user_id = up.user_id JOIN movies m ON up.movie_id = m.movie_id WHERE up.rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT AVG(rating) FROM user_movie_preferences;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users UNION SELECT * FROM user_connections;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_year BETWEEN 2000 AND 2010;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, m.title, m.director FROM users u JOIN user_movie_preferences p ON u.user_id = p.user_id JOIN movies m ON p.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(p.movie_id) AS num_ratings FROM users u LEFT JOIN user_movie_preferences p ON u.user_id = p.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT m.title, m.director, AVG(p.rating) AS avg_rating FROM movies m JOIN user_movie_preferences p ON m.movie_id = p.movie_id GROUP BY m.title, m.director;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, p.rating FROM users u JOIN user_movie_preferences p ON u.user_id = p.user_id JOIN movies m ON p.movie_id = m.movie_id WHERE u.username = 'Alice' AND p.rating > 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u1.username AS user1, u2.username AS user2 FROM user_connections c JOIN users u1 ON c.user_id1 = u1.user_id JOIN users u2 ON c.user_id2 = u2.user_id WHERE c.isConnected = true;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(100) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies (\n    movie_id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    director VARCHAR(255),\n    release_year INT,\n    genre VARCHAR(100)\n);\n\nCREATE TABLE user_movie_preferences (\n    user_id UUID,\n    movie_id UUID,\n    rating INT,\n    PRIMARY KEY (user_id, movie_id),\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\nCREATE TABLE user_connections (\n    connection_id UUID PRIMARY KEY,\n    user_id1 UUID NOT NULL,\n    user_id2 UUID NOT NULL,\n    isConnected BOOL,\n    FOREIGN KEY (user_id1) REFERENCES users(user_id),\n    FOREIGN KEY (user_id2) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, p.rating FROM users u LEFT JOIN user_movie...",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT movie_id, movie_title FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT movie_title, release_year, genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_movie_preferences;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, movie_id FROM user_movie_preferences;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_connections;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id_1, user_id_2 FROM user_connections;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_messages;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_id, receiver_id FROM user_messages;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT message_id, sender_id, receiver_id FROM user_messages;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT message_content, message_time FROM user_messages;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, p.preference_id, m.movie_title FROM users u JOIN user_movie_preferences p ON u.user_id = p.user_id JOIN movies m ON p.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT m.movie_title, m.genre, u.username FROM users u JOIN user_movie_preferences p ON u.user_id = p.user_id JOIN movies m ON p.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, c.connection_status FROM users u JOIN user_connections c ON u.user_id = c.user_id_1;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username AS user1, uc.connection_status, u2.username AS user2 FROM users u JOIN user_connections uc ON u.user_id = uc.user_id_1 JOIN users u2 ON uc.user_id_2 = u2.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_year > 2000;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_messages WHERE message_time >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'JohnDoe';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT movie_title, release_year FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, m.movie_title FROM users u INNER JOIN user_movie_preferences up ON u.user_id = up.user_id INNER JOIN movies m ON up.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id_1, user_id_2 FROM user_connections WHERE connection_status = 'connected';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sender_id, message_content, message_time FROM user_messages WHERE receiver_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(release_year) FROM movies WHERE genre = 'Comedy';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, m.movie_title FROM users u LEFT JOIN user_movie_preferences up ON u.user_id = up.user_id LEFT JOIN movies m ON up.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(preference_id) FROM user_movie_preferences GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT a.username, b.username FROM users a CROSS JOIN users b;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_preferences FROM users u INNER JOIN user_movie_preferences up ON u.user_id = up.user_id GROUP BY u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM movies ORDER BY release_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, COUNT(message_id) AS total_messages FROM users u LEFT JOIN user_messages um ON u.user_id = um.receiver_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT connection_status FROM user_connections;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_connections FROM user_connections WHERE connection_status = 'connected';",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(release_year) FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_messages_sent FROM users u LEFT JOIN user_messages um ON u.user_id = um.sender_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE users(\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE movies(\n    movie_id UUID PRIMARY KEY,\n    movie_title VARCHAR(255) NOT NULL,\n    release_year INT NOT NULL,\n    genre VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE user_movie_preferences(\n    preference_id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    movie_id UUID NOT NULL\n);\n\nCREATE TABLE user_connections(\n    connection_id UUID PRIMARY KEY,\n    user_id_1 UUID NOT NULL,\n    user_id_2 UUID NOT NULL,\n    connection_status VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE user_messages(\n    message_id UUID PRIMARY KEY,\n    sender_id UUID NOT NULL,\n    receiver_id UUID NOT NULL,\n    message_content TEXT NOT NULL,\n    message_time TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users u INNER JOIN user_connections uc ON u.user_id = uc.user_id_1 AND u.username LIKE 'A%';"
]