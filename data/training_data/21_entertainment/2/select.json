[
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, release_date FROM movies WHERE genre = 'Comedy';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE duration > 120;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, average_rating FROM movies WHERE director = 'Steven Spielberg';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, release_date FROM movies WHERE genre = 'Action' AND duration < 150;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT director, COUNT(*) as movie_count FROM movies GROUP BY director;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies ORDER BY release_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT AVG(average_rating) as avg_rating FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, duration FROM movies WHERE release_date >= '2020-01-01' AND release_date <= '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT director, MAX(duration) as longest_movie_duration FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, genre FROM movies WHERE average_rating >= 8.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT MIN(release_date) as earliest_release_date FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE title LIKE '%Star Wars%';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, genre FROM movies WHERE director IN ('Christopher Nolan', 'Quentin Tarantino');",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director FROM movies WHERE genre = 'Drama' ORDER BY title;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) as total_movies, AVG(duration) as avg_duration FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, release_date FROM movies WHERE genre = 'Thriller' AND average_rating > 7.5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT director, SUM(duration) as total_duration FROM movies GROUP BY director;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, release_date FROM movies WHERE genre = 'Action'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE director LIKE '%Smith%' AND genre = 'Drama'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, duration, average_rating FROM movies WHERE release_date >= '2021-01-01' AND genre = 'Comedy'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Romance' ORDER BY release_date DESC",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, duration FROM movies WHERE genre = 'Thriller'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE duration > 120 AND average_rating >= 4.5",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT director, release_date FROM movies WHERE genre = 'Adventure' AND duration < 150",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE title LIKE '%Love%' AND genre = 'Romance'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, genre, average_rating FROM movies WHERE director = 'Christopher Nolan'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_date BETWEEN '2018-01-01' AND '2020-12-31'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, genre FROM movies WHERE average_rating < 4.0 AND genre = 'Horror'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE director IN ('Quentin Tarantino', 'Steven Spielberg') AND genre = 'Drama'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, release_date, average_rating FROM movies WHERE genre = 'Action' AND duration > 150",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Sci-Fi' ORDER BY release_date ASC",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, genre FROM movies WHERE release_date < '2015-01-01'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Animation' AND average_rating > 3.8",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, average_rating FROM movies WHERE director LIKE '%Cohen%' AND genre = 'Comedy'",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE genre = 'Documentary' AND average_rating >= 4.5",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT title, director, release_date FROM movies WHERE genre = 'Family' AND duration < 120",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255),\n    director VARCHAR(255),\n    release_date DATE,\n    duration INT,\n    genre VARCHAR(50),\n    average_rating FLOAT\n)\n\n### STATEMENT\n\nSELECT * FROM movies WHERE duration < 90 AND genre = 'Mystery' ORDER BY release_date DESC",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year, genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, title, description, release_year, genre, runtime_minutes FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(runtime_minutes) FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movie_id, user_id, rating FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movie_id, user_id, rating, timestamp FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(rating) FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, movies.genre, user_ratings.rating FROM movies INNER JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies LEFT JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies RIGHT JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id WHERE user_ratings.rating > 4;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating, user_ratings.review FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title AS movie_title, user_ratings.rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS average_rating FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id ORDER BY user_ratings.rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movies.title, user_ratings.rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_year > 2000 AND genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year FROM movies WHERE genre = 'Comedy' ORDER BY release_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, description FROM movies WHERE genre LIKE '%Thriller%';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM movies WHERE genre = 'Drama';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, review FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating, genre FROM user_ratings JOIN movies ON user_ratings.movie_id = movies.id GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_year BETWEEN 2010 AND 2020;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, runtime_minutes FROM movies WHERE runtime_minutes > 120 ORDER BY title ASC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year, genre FROM movies WHERE genre = 'Horror' AND release_year < 2000;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, rating FROM user_ratings JOIN movies ON user_ratings.movie_id = movies.id WHERE rating > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(rating) AS max_rating, movie_id FROM user_ratings GROUP BY movie_id ORDER BY max_rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, review FROM movies LEFT JOIN user_ratings ON movies.id = user_ratings.movie_id WHERE rating IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id WHERE user_ratings.timestamp > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, AVG(rating) AS avg_rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id GROUP BY title HAVING avg_rating > 3.5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre FROM movies WHERE description IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT genre) FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year, genre FROM movies WHERE genre IN ('Comedy', 'Drama', 'Romance');",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year, rating FROM movies JOIN user_ratings ON movies.id = user_ratings.movie_id WHERE rating >= 4.0 GROUP BY title, release_year, rating HAVING COUNT(rating) > 5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(50),\n    runtime_minutes INT\n);\n\nCREATE TABLE user_ratings (\n    id SERIAL PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating FLOAT,\n    review TEXT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_year, SUM(runtime_minutes) AS total_runtime FROM movies GROUP BY title, release_year ORDER BY total_runtime DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, release_date FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies WHERE release_date > '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE registration_date < '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, rating FROM user_ratings WHERE movie_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(rating) FROM user_ratings;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(rating) FROM user_ratings GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre, rating FROM movies ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre, release_date FROM movies WHERE genre = 'Comedy' AND rating > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT username, email, registration_date FROM users WHERE registration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movie_id, AVG(rating) FROM user_ratings GROUP BY movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id) FROM user_ratings WHERE rating > 4.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre, rating FROM movies WHERE genre = 'Drama' OR genre = 'Romance';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(rating) AS total_ratings FROM user_ratings GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre, release_date, rating FROM movies WHERE release_date <= '2019-12-31' ORDER BY release_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT genre) FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, genre, release_date FROM movies WHERE genre='Action';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_date BETWEEN '2020-01-01' AND '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT movie_id, title FROM movies WHERE rating > 8.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE title LIKE '%Star Wars%';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies WHERE rating BETWEEN 7.5 AND 9.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE registration_date < '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating, timestamp FROM user_ratings WHERE user_id = 123 AND rating > 4.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id IN (SELECT user_id FROM user_ratings WHERE movie_id=456);",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_movies FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT title, AVG(rating) AS avg_rating FROM movies GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, ur.rating FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id JOIN movies m ON ur.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT genre, COUNT(*) AS total_movies FROM movies GROUP BY genre ORDER BY total_movies DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT m.title, u.username, ur.rating FROM movies m JOIN user_ratings ur ON m.movie_id = ur.movie_id JOIN users u ON ur.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.rating) AS total_ratings FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id GROUP BY u.username ORDER BY total_ratings DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.rating) AS total_ratings FROM users u LEFT JOIN user_ratings ur ON u.user_id = ur.user_id GROUP BY u.username ORDER BY total_ratings DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n  movie_id INT PRIMARY KEY,\n  title VARCHAR(255),\n  genre VARCHAR(100),\n  release_date DATE,\n  rating FLOAT\n);\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date DATE\n);\n\nCREATE TABLE user_ratings (\n  rating_id INT PRIMARY KEY,\n  user_id INT,\n  movie_id INT,\n  rating FLOAT,\n  timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT title FROM movies WHERE genre='Comedy' AND release_date < '2019-01-01';",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT * FROM MovieMetadata;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, release_year FROM MovieMetadata;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, rating FROM MovieMetadata;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT * FROM UserRatings;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT movie_id, rating FROM UserRatings;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, rating, timestamp FROM UserRatings;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT * FROM UserAccounts;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, join_date FROM UserAccounts;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT * FROM Watchlist;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id FROM Watchlist;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT watchlist_id, added_date FROM Watchlist;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, release_year, duration_minutes, rating FROM MovieMetadata WHERE release_year = 2021;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, rating FROM MovieMetadata WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, join_date FROM UserAccounts WHERE join_date > '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id FROM Watchlist WHERE user_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, added_date FROM Watchlist WHERE added_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, rating FROM MovieMetadata WHERE rating >= 8.0;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, last_login FROM UserAccounts WHERE last_login < '2023-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, duration_minutes FROM MovieMetadata ORDER BY duration_minutes DESC;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating FROM UserRatings ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, release_year FROM MovieMetadata WHERE release_year > 2010",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, join_date FROM UserAccounts WHERE last_login > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, duration_minutes FROM MovieMetadata WHERE rating > 8.0",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating FROM UserRatings WHERE rating > 4.5",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email FROM UserAccounts WHERE join_date < '2020-01-01' AND last_login < '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, release_year, rating FROM MovieMetadata WHERE genre = 'Action'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, added_date FROM Watchlist WHERE added_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, rating FROM MovieMetadata WHERE release_year BETWEEN 1990 AND 2000",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, last_login FROM UserAccounts WHERE email LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, release_year, duration_minutes FROM MovieMetadata WHERE genre = 'Comedy' AND rating > 7.5",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating FROM UserRatings ORDER BY rating DESC",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, duration_minutes FROM MovieMetadata ORDER BY duration_minutes ASC",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, join_date FROM UserAccounts ORDER BY join_date DESC",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, added_date FROM Watchlist ORDER BY added_date ASC",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, rating FROM MovieMetadata LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT username, email, last_login FROM UserAccounts LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, release_year, rating FROM MovieMetadata WHERE title LIKE '%Harry Potter%'",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT user_id, movie_id, rating FROM UserRatings WHERE user_id = 101",
  "### TABLEDATA\n\nCREATE TABLE MovieMetadata (movie_id INT PRIMARY KEY, title VARCHAR(100) NOT NULL, genre VARCHAR(50) NOT NULL, release_year INT, duration_minutes INT, rating FLOAT)\n\nCREATE TABLE UserRatings (user_id INT PRIMARY KEY, movie_id INT, rating FLOAT, timestamp TIMESTAMP)\n\nCREATE TABLE UserAccounts (user_id INT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, join_date DATE, last_login TIMESTAMP)\n\nCREATE TABLE Watchlist (watchlist_id INT PRIMARY KEY, user_id INT, movie_id INT, added_date DATE)\n\n### STATEMENT\n\nSELECT title, genre, release_year FROM MovieMetadata WHERE genre IN ('Adventure', 'Sci-Fi')",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, release_year FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, genre, release_year FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies WHERE rating >= 7.5;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE birth_date > '1990-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT movie_id, user_id, rating FROM user_ratings WHERE rating >= 8.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT movie_id, user_id, timestamp FROM user_ratings ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT genre_name FROM genres;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT genre_name FROM genres WHERE genre_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT director_name, birth_date FROM directors;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT director_name FROM directors WHERE birth_date < '1970-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, release_year, rating FROM movies WHERE genre = 'Comedy' ORDER BY release_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(rating) AS avg_rating FROM user_ratings GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT m.title, u.username FROM movies m JOIN user_ratings ur ON m.movie_id = ur.movie_id JOIN users u ON ur.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT d.director_name, COUNT(*) AS movies_directed FROM movies m JOIN directors d ON m.director_id = d.director_id GROUP BY d.director_name;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT genre_name, COUNT(*) AS movies_in_genre FROM movies m JOIN genres g ON m.genre = g.genre_name GROUP BY genre_name;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies WHERE release_year = 2000 AND rating >= 8.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(ur.rating) AS avg_rating FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id GROUP BY u.username HAVING avg_rating > 7.0;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE release_year > 2000;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, genre, release_year FROM movies WHERE genre = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM movies WHERE rating >= 8;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, genre, rating FROM movies WHERE genre IN ('Comedy', 'Drama');",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, rating FROM movies WHERE title LIKE 'The%';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, ur.rating FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id JOIN movies m ON ur.movie_id = m.movie_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT m.title, g.genre_name, d.director_name FROM movies m JOIN genres g ON m.genre = g.genre_name JOIN directors d ON m.director_id = d.director_id;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, ur.rating, ur.timestamp FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id JOIN movies m ON ur.movie_id = m.movie_id WHERE ur.rating >= 7;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT genre, COUNT(*) AS total_movies FROM movies GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT director_name, COUNT(*) AS total_movies_directed FROM directors d JOIN movies m ON d.director_id = m.director_id GROUP BY director_name;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(rating) AS avg_rating FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(rating) AS max_rating FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT MIN(rating) AS min_rating FROM movies;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT director_name, MAX(release_year) AS latest_movie_year FROM directors d JOIN movies m ON d.director_id = m.director_id GROUP BY director_name;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE birth_date > '1990-01-01';",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(ur.rating_id) AS total_ratings FROM users u JOIN user_ratings ur ON u.user_id = ur.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT title, genre, release_year, rating FROM movies WHERE release_year > 2010 ORDER BY rating DESC;",
  "### TABLEDATA\n\nCREATE TABLE movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100),\n    release_year INT,\n    rating DECIMAL(3,1)\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    birth_date DATE\n);\n\nCREATE TABLE user_ratings (\n    rating_id INT PRIMARY KEY,\n    movie_id INT,\n    user_id INT,\n    rating DECIMAL(2,1),\n    timestamp TIMESTAMP\n);\n\nCREATE TABLE genres (\n    genre_id INT PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE directors (\n    director_id INT PRIMARY KEY,\n    director_name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n\n### STATEMENT\n\nSELECT director_name, AVG(rating) AS avg_rating FROM directors d JOIN movies m ON d.director_id = m.director_id GROUP BY director_name HAVING AVG(rating) > 7;"
]