[
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM user_profiles WHERE subscription_type = 'Free';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM user_profiles WHERE account_created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_type = 'Premium' AND account_created_at < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT subscription_type FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM user_profiles WHERE user_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, subscription_type FROM user_profiles WHERE subscription_type IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(account_created_at) FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(account_created_at) FROM user_profiles WHERE subscription_type = 'Free';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(YEAR FROM account_created_at)) FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, subscription_type FROM user_profiles ORDER BY account_created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_type <> 'Basic';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username, subscription_type FROM user_profiles WHERE subscription_type IN ('Free', 'Paid');",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE email NOT LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_type = 'Basic' OR subscription_type = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE subscription_type = 'premium';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE username LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, subscription_type FROM user_profiles WHERE account_created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT(subscription_type) FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, subscription_type FROM user_profiles ORDER BY account_created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE user_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(account_created_at) AS latest_account_created FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_type IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, DATE(account_created_at) AS account_created_date FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT AVG(user_id) AS avg_userid FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscriber_type = 'basic' OR subscriber_type = 'trial';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE username = 'john_doe' AND email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE username = 'alice_smith' AND email = 'alice.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, subscription_type FROM user_profiles WHERE account_created_at BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT(username) FROM user_profiles WHERE subscription_type IN ('basic', 'trial');",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_subscribers FROM user_profiles WHERE subscription_type IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    subscription_type VARCHAR(20),\n    account_created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(account_created_at) AS earliest_account_created FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE age > 18;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, subscription_status FROM user_profiles WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_preferences.genre_preference FROM user_profiles INNER JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_profiles.age < 30;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_status = true;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_preferences.language_preference FROM user_profiles LEFT JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE username LIKE '%smith%';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE age BETWEEN 25 AND 35;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_preferences WHERE notification_enabled = true;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_profiles.age, user_preferences.genre_preference FROM user_profiles INNER JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_profiles.subscription_status = false;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_profiles.email, user_preferences.language_preference FROM user_profiles FULL JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_profiles.age > 40;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE user_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_profiles.email, user_preferences.notification_enabled FROM user_profiles LEFT JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_preferences.notification_enabled = false;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE email = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_preferences.genre_preference FROM user_profiles INNER JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_preferences.language_preference = 'English';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_profiles.username, user_profiles.email, user_preferences.notification_enabled FROM user_profiles LEFT JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE user_preferences.genre_preference = 'Action';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE subscription_status = false ORDER BY age ASC;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE age > 30 AND subscription_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, genre_preference FROM user_profiles JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE age < 40;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles WHERE age BETWEEN 25 AND 35;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email FROM user_profiles WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre_preference FROM user_preferences;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, notification_enabled FROM user_preferences WHERE genre_preference = 'Action' AND language_preference = 'English';",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, age FROM user_profiles WHERE subscription_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM user_profiles ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(age) AS total_age FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT email FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_preferences FROM user_preferences GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, genre_preference FROM user_profiles JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id AND user_profiles.age > 30;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, CASE WHEN age < 18 THEN 'Minor' ELSE 'Adult' END AS user_category FROM user_profiles;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email, genre_preference FROM user_profiles JOIN user_preferences ON user_profiles.user_id = user_preferences.user_id WHERE genre_preference IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_preferences FROM user_preferences GROUP BY user_id HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    age INT,\n    subscription_status BOOLEAN\n);\n\n\nCREATE TABLE user_preferences (\n    user_id INT PRIMARY KEY,\n    genre_preference VARCHAR(50),\n    language_preference VARCHAR(50),\n    notification_enabled BOOLEAN\n);\n\n### STATEMENT\n\nSELECT username, email, age FROM user_profiles WHERE subscription_status = TRUE AND (age < 25 OR age > 50);",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT username, email FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, date_of_birth FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM UserPreferences;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT theme_preference, language_preference FROM UserPreferences;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, watch_date FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT watch_id, video_id FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, duration_minutes FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT username, email, date_of_birth FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT theme_preference, language_preference, autoplay_enabled FROM UserPreferences;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, video_id, watch_date FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, subscription_type FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT theme_preference, language_preference, autoplay_enabled FROM UserPreferences;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT watch_id, user_id, video_id, watch_date, duration_minutes FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT username, email, subscription_type FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT theme_preference, language_preference, autoplay_enabled FROM UserPreferences;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, video_id, watch_date, duration_minutes FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM UserProfiles WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM UserPreferences WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT * FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT user_id, username, subscription_type FROM UserProfiles WHERE subscription_type = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, w.video_id FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, p.theme_preference, p.language_preference FROM UserProfiles u JOIN UserPreferences p ON u.user_id = p.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, w.watch_date, w.duration_minutes FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id WHERE u.subscription_type = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, u.date_of_birth, p.language_preference FROM UserProfiles u JOIN UserPreferences p ON u.user_id = p.user_id WHERE YEAR(u.date_of_birth) < 1990;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.username, p.theme_preference FROM UserProfiles u JOIN UserPreferences p ON u.user_id = p.user_id ORDER BY p.theme_preference DESC;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.username, w.video_id FROM UserProfiles u LEFT JOIN WatchHistory w ON u.user_id = w.user_id WHERE w.video_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM UserProfiles;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_videos_watched FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT MIN(duration_minutes) AS min_duration, MAX(duration_minutes) AS max_duration FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT AVG(duration_minutes) AS avg_duration FROM WatchHistory;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_videos_watched FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT subscription_type, COUNT(*) AS total_users FROM UserProfiles GROUP BY subscription_type;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT MONTH(w.watch_date) AS month, COUNT(*) AS total_watches FROM WatchHistory w GROUP BY month;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_watches FROM UserProfiles u LEFT JOIN WatchHistory w ON u.user_id = w.user_id GROUP BY u.username HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT subscription_type, AVG(duration_minutes) AS avg_duration FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id GROUP BY subscription_type;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(duration_minutes) AS avg_duration FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id WHERE w.watch_date >= '2022-01-01' GROUP BY u.username HAVING AVG(duration_minutes) > 20;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_videos_watched FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id GROUP BY u.username HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE UserProfiles (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  subscription_type VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE UserPreferences (\n  user_id INT PRIMARY KEY,\n  theme_preference VARCHAR(20),\n  language_preference VARCHAR(20),\n  autoplay_enabled BOOLEAN\n);\n\nCREATE TABLE WatchHistory (\n  watch_id INT PRIMARY KEY,\n  user_id INT,\n  video_id INT,\n  watch_date TIMESTAMP,\n  duration_minutes INT\n);\n\n### STATEMENT\n\nSELECT u.username, w.video_id, COUNT(*) AS watch_count FROM UserProfiles u JOIN WatchHistory w ON u.user_id = w.user_id GROUP BY u.username, w.video_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT pref_id, theme FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Movies;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT movie_id, title FROM Movies;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM UserMovieHistory;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT history_id, user_id, movie_id FROM UserMovieHistory;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT title, genre FROM Movies;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, theme FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT movie_id, release_date FROM Movies;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, date_of_birth FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT pref_id, user_id, autoplay FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, movie_id, date_watched FROM UserMovieHistory;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT username, date_of_birth FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT title, release_date FROM Movies;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT theme, autoplay FROM Preferences;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT user_id, movie_id, date_watched FROM UserMovieHistory ORDER BY date_watched DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT title, genre FROM Movies WHERE release_date > '2020-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE date_of_birth BETWEEN '1990-01-01' AND '1995-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, p.theme FROM Users u JOIN Preferences p ON u.user_id = p.user_id WHERE p.theme = 'Dark';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, p.autoplay FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id JOIN Preferences p ON u.user_id = p.user_id WHERE h.date_watched >= '2022-01-01' AND p.autoplay = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.username, h.date_watched FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id WHERE u.username LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, m.genre FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id WHERE m.genre IN ('Action', 'Comedy');",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT m.title, COUNT(*) AS total_watches FROM Movies m JOIN UserMovieHistory h ON m.movie_id = h.movie_id GROUP BY m.title ORDER BY total_watches DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_watches FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id GROUP BY u.username HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT MAX(date_of_birth) AS oldest_user_dob FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_watches FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id GROUP BY u.username HAVING MAX(h.date_watched) >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(TO_NUMBER(EXTRACT(EPOCH FROM AGE(date_of_birth))) / 31536000) AS avg_age FROM Users u GROUP BY u.username ORDER BY avg_age DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, EXTRACT(MONTH FROM h.date_watched) AS watch_month FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id WHERE EXTRACT(YEAR FROM h.date_watched) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) FILTER (WHERE EXTRACT(YEAR FROM h.date_watched) = 2022) AS watches_2022, COUNT(*) FILTER (WHERE EXTRACT(YEAR FROM h.date_watched) = 2023) AS watches_2023 FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, MAX(h.date_watched) - MIN(h.date_watched) AS time_between_first_last_watch FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id GROUP BY u.username, m.title;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT m.genre) AS unique_genres_watched FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id GROUP BY u.username ORDER BY unique_genres_watched DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, p.theme, SUM(CASE WHEN m.genre = 'Action' THEN 1 ELSE 0 END) AS action_watches FROM Users u JOIN Preferences p ON u.user_id = p.user_id JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id GROUP BY u.username, p.theme;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, m.title, COUNT(*) AS total_watches FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id GROUP BY u.username, m.title HAVING COUNT(*) >= 3;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_watches FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id GROUP BY u.username HAVING AVG(TO_NUMBER(EXTRACT(EPOCH FROM AGE(date_of_birth))) / 31536000) < 30;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, AVG(DATE_PART('year', CURRENT_DATE) - DATE_PART('year', date_of_birth)) AS avg_age FROM Users u GROUP BY u.username ORDER BY avg_age;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_watches FROM Users u LEFT JOIN UserMovieHistory h ON u.user_id = h.user_id GROUP BY u.username HAVING COUNT(h.movie_id) = 0;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    date_of_birth DATE\n);\n\n\nCREATE TABLE Preferences (\n    pref_id INT PRIMARY KEY,\n    user_id INT,\n    theme VARCHAR(20),\n    autoplay BOOLEAN,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Movies (\n    movie_id INT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_date DATE\n);\n\n\nCREATE TABLE UserMovieHistory (\n    history_id INT PRIMARY KEY,\n    user_id INT,\n    movie_id INT,\n    date_watched DATE,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT m.genre) AS unique_genres_watched FROM Users u JOIN UserMovieHistory h ON u.user_id = h.user_id JOIN Movies m ON h.movie_id = m.movie_id WHERE DATE_PART('year', h.date_watched) = DATE_PART('year', CURRENT_DATE) GROUP BY u.username ORDER BY unique_genres_watched DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE date_of_birth < '2000-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT playlist_id, playlist_name FROM playlists WHERE user_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT song_name, artist FROM songs WHERE genre = 'Rock';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM history WHERE user_id = 2001 AND song_id = 5001;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT genre, COUNT(*) AS num_songs FROM songs GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM preferences WHERE genre = 'Pop' AND language = 'English';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE date_of_birth BETWEEN '1990-01-01' AND '1999-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM playlists WHERE user_id = 3002 AND created_at > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_playlists FROM playlists WHERE user_id = 4003;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT song_name, duration FROM songs WHERE playlist_id = 6001;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_songs_played FROM history WHERE played_at > '2022-01-01' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(played_at) AS last_played FROM history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM songs WHERE artist = 'Taylor Swift';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, playlist_name FROM playlists ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) AS num_users FROM history;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT genre, AVG(duration) AS avg_duration FROM songs GROUP BY genre;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT song_name, artist, duration FROM songs ORDER BY duration DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE date_of_birth < '1990-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email, created_at FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users JOIN preferences ON users.user_id = preferences.user_id WHERE genre = 'Rock' and language = 'English';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, created_at FROM playlists ORDER BY created_at DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT song_name, artist FROM songs WHERE playlist_id = 1 AND genre = 'Pop';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, song_name FROM history JOIN songs ON history.song_id = songs.song_id WHERE played_at BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(song_id) AS total_played FROM history GROUP BY user_id HAVING total_played > 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT genre FROM songs;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_playlists FROM playlists GROUP BY user_id ORDER BY total_playlists DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, COUNT(song_id) AS total_songs FROM playlists JOIN songs ON playlists.playlist_id = songs.playlist_id GROUP BY playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id IN (SELECT user_id FROM preferences WHERE genre = 'Pop');",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(duration) AS max_duration FROM songs GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT playlist_name, AVG(duration) AS avg_duration FROM playlists JOIN songs ON playlists.playlist_id = songs.playlist_id GROUP BY playlist_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT playlist_name FROM playlists WHERE user_id = 1 ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email, COUNT(song_id) AS total_played FROM users JOIN history ON users.user_id = history.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT song_id) AS unique_songs FROM history GROUP BY user_id HAVING unique_songs > 20;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT username, email, playlist_name FROM users JOIN playlists ON users.user_id = playlists.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(date_of_birth) AS latest_dob FROM users GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(played_at) AS latest_played FROM history GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) UNIQUE,\n  email VARCHAR(100) UNIQUE,\n  date_of_birth DATE,\n  created_at TIMESTAMP\n);\n\nCREATE TABLE preferences (\n  pref_id INT PRIMARY KEY,\n  user_id INT,\n  genre VARCHAR(50),\n  language VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE playlists (\n  playlist_id INT PRIMARY KEY,\n  user_id INT,\n  playlist_name VARCHAR(100),\n  created_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE songs (\n  song_id INT PRIMARY KEY,\n  playlist_id INT,\n  song_name VARCHAR(100),\n  artist VARCHAR(50),\n  genre VARCHAR(50),\n  duration INT,\n  FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id)\n);\n\nCREATE TABLE history (\n  history_id INT PRIMARY KEY,\n  user_id INT,\n  song_id INT,\n  played_at TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(user_id),\n  FOREIGN KEY (song_id) REFERENCES songs(song_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT genre) AS unique_genres FROM preferences GROUP BY user_id HAVING unique_genres > 2;"
]