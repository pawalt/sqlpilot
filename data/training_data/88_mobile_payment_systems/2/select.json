[
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, product_description FROM inventory_info WHERE quantity = 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity FROM inventory_info WHERE product_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE quantity <= 5 ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE quantity >= 15 AND price > 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM inventory_info WHERE price = 25.99;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT MIN(price) AS min_price FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price*quantity AS total_price FROM inventory_info;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price*quantity AS total_price FROM inventory_info WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price, price*quantity AS total_price FROM inventory_info WHERE product_id > 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info ORDER BY price ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity FROM inventory_info ORDER BY quantity DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity FROM inventory_info ORDER BY product_name ASC, quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE quantity > 0",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT COUNT(product_id) AS total_products FROM inventory_info",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info ORDER BY product_name ASC",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory_info GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE product_description LIKE '%black%'",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, product_description FROM inventory_info WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE quantity < 10 ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM inventory_info",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price FROM inventory_info WHERE price > AVG(price)",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE product_name LIKE 'A%' OR product_name LIKE 'B%'",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price * quantity AS total_price FROM inventory_info",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT product_id) AS total_distinct_products FROM inventory_info",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE price > (SELECT AVG(price) FROM inventory_info)",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, quantity, (price * quantity) AS total_value FROM inventory_info ORDER BY total_value DESC",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE product_id IN (1, 2, 3, 4)",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE quantity > (SELECT MAX(quantity) / 2 FROM inventory_info)",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_info WHERE price = (SELECT MAX(price) FROM inventory_info)",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT product_name, product_description FROM inventory_info WHERE LENGTH(product_name) < 6",
  "### TABLEDATA\n\nCREATE TABLE inventory_info (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    product_description TEXT,\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_info WHERE quantity = (SELECT MIN(quantity) FROM inventory_info)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, description FROM products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM purchases;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, user_id, quantity FROM purchases WHERE purchase_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(price) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE description LIKE '%organic%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(quantity) AS total_quantity FROM purchases GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(*) AS purchase_count FROM purchases GROUP BY product_id HAVING purchase_count > 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price, purchase_date FROM products JOIN purchases ON products.product_id = purchases.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, description FROM products WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price * quantity AS total_price FROM products JOIN purchases ON products.product_id = purchases.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(quantity) AS max_quantity FROM purchases GROUP BY user_id ORDER BY max_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, user_id, SUM(quantity) AS total_quantity FROM purchases GROUP BY product_id, user_id HAVING total_quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, description FROM products WHERE product_name LIKE '%chair%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT purchase_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_purchases FROM purchases GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity_sold FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(price) AS avg_price_purchased FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id HAVING AVG(price) > 200;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products INNER JOIN purchases ON products.product_id = purchases.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT p.product_name, SUM(quantity) AS total_quantity FROM products AS p LEFT JOIN purchases AS pur ON p.product_id = pur.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, AVG(price) AS average_price FROM products GROUP BY product_id HAVING AVG(price) < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(price) AS max_price FROM products GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_purchases, AVG(price) AS avg_price FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity * price) AS revenue FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(price) AS max_price_purchased FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id HAVING MAX(price) > 500;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_purchases, MAX(price) AS most_expensive_purchase FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products WHERE product_id IN (SELECT product_id FROM purchases);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id WHERE user_id = 123 ORDER BY purchase_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_sales FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY product_name HAVING total_sales > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(price * quantity) AS total_spent FROM purchases JOIN products ON purchases.product_id = products.product_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2),\n    description TEXT\n);\n\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    quantity INT,\n    purchase_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT user_id, product_name, purchase_date FROM purchases JOIN products ON purchases.product_id = products.product_id WHERE purchase_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT order_id, total_price, payment_status FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_id, phone_number FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_id, quantity FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_id, SUM(quantity) AS total_quantity FROM orders GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(order_id) AS total_orders FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_id, AVG(price) AS avg_price FROM products GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(total_price) AS max_total_price FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE payment_status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_price BETWEEN 100 AND 500;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity > 0 AND quantity < 20",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_price > 500",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE quantity >= 5 AND quantity <= 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE phone_number LIKE '%123%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products INNER JOIN orders ON products.product_id = orders.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM customers LEFT JOIN orders ON customers.customer_id = orders.order_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM orders GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_orders FROM orders INNER JOIN customers ON orders.order_id = customers.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE 'A%' OR product_name LIKE 'B%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS average_price FROM products GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_price > 200)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_orders FROM orders INNER JOIN customers ON orders.order_id = customers.customer_id GROUP BY customer_name HAVING total_orders > 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price = (SELECT MAX(price) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = (SELECT MAX(customer_id) FROM customers)",
  "### TABLEDATA\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL(10, 2),\n  quantity INT\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10, 2),\n  payment_status VARCHAR(50)\n);\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  phone_number VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_id IN (SELECT product_id FROM orders WHERE quantity > 5)",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM Products WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM Customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT payment_id, amount FROM Payments WHERE amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity FROM Products WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM Customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE customer_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM Products ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM Customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE product_name LIKE '%shirt%';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT payment_id, status FROM Payments WHERE status = 'paid';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, COUNT(order_id) AS num_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name, email;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(amount) AS total_paid FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Payments ON Orders.order_id = Payments.order_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE quantity > 0 ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id WHERE quantity > 0 ORDER BY customer_name, quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, order_date, payment_date FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Payments ON Orders.order_id = Payments.order_id WHERE payment_date >= '2022-01-01' AND payment_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT customer_name) AS unique_customers FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM Products GROUP BY product_name HAVING AVG(price) > 50;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(quantity) AS max_quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING max_quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(DISTINCT product_name) AS num_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING num_products >= 2;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(price * quantity) AS total_spent FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Payments WHERE status = 'pending' AND payment_date < '2022-07-31';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, product_name, quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id WHERE price BETWEEN 50 AND 200 ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(DISTINCT Orders.order_id) AS num_orders, MAX(price) AS highest_price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING highest_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS num_orders FROM Products JOIN Orders ON Products.product_id = Orders.product_id GROUP BY product_name HAVING num_orders < 5;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(amount) AS avg_payment FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Payments ON Orders.order_id = Payments.order_id GROUP BY customer_name HAVING AVG(amount) > 100;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS num_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_name HAVING num_orders >= 3;",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name TEXT,\n    price DECIMAL,\n    quantity INT\n);\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Payments (\n    payment_id INT PRIMARY KEY,\n    order_id INT,\n    amount DECIMAL,\n    payment_date DATE,\n    status TEXT,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MIN(price) AS min_price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY customer_name HAVING min_price < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name FROM categories WHERE category_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM purchases WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity > 0 AND price < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(*) FROM categories GROUP BY category_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM purchases WHERE total_cost > 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) FROM purchases WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE customer_id = 2 AND purchase_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(price) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_id, SUM(quantity) FROM purchases GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM purchases WHERE purchase_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_id, AVG(price) FROM products GROUP BY category_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_date FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(total_cost) FROM purchases;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE '%T-shirt%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity > 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, category_name FROM products p JOIN categories c ON p.product_id = c.category_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, category_name FROM products p, categories c WHERE p.product_id = c.category_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM purchases GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE customer_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(transaction_id) AS total_transactions FROM transactions GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(price) AS avg_price FROM products p JOIN categories c ON p.category_id = c.category_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(total_cost) AS total_spent FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM purchases WHERE purchase_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, count(*) AS total_purchases FROM customers c, transactions t WHERE c.customer_id = t.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.transaction_date, c.customer_name FROM transactions t JOIN customers c ON t.customer_id = c.customer_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.product_name, SUM(quantity) AS total_quantity FROM purchases p JOIN products pr ON p.product_id = pr.product_id GROUP BY p.product_id HAVING SUM(quantity) > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.product_name, c.category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price < 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.product_name, c.category_name, SUM(quantity) AS total_quantity FROM products p JOIN categories c ON p.category_id = c.category_id JOIN purchases pur ON p.product_id = pur.product_id GROUP BY p.product_id ORDER BY total_quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(total_cost) AS avg_purchase_cost FROM customers c JOIN transactions t ON c.customer_id = t.customer_id GROUP BY customer_name HAVING AVG(total_cost) > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.product_name, SUM(quantity) AS total_quantity FROM products p JOIN purchases pur ON p.product_id = pur.product_id GROUP BY p.product_id HAVING SUM(quantity) > 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE purchases (\n    purchase_id INT PRIMARY KEY,\n    product_id INT NOT NULL,\n    purchase_date DATE NOT NULL,\n    quantity INT NOT NULL,\n    total_cost DECIMAL(10, 2) NOT NULL\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    purchase_id INT NOT NULL,\n    customer_id INT NOT NULL,\n    transaction_date TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.category_name, COUNT(p.product_id) AS total_products FROM categories c LEFT JOIN products p ON c.category_id = p.category_id GROUP BY c.category_name HAVING COUNT(p.product_id) > 2"
]