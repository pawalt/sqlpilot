[
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (1, 'john_doe', 'password123', 'credit_card_1234');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (2, 'jane_smith', 'passw0rd456', 'paypal_janesmith');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (3, 'bob_jackson', 'b0bpass', 'venmo_bobj');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (4, 'sara_parker', 'saraPass789', 'mastercard_sara789');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (5, 'alex_cole', 'qwerty', 'visa_alex123');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (6, 'emily_williams', 'emilyPass', 'paypal_emily');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (7, 'chris_waterman', 'chrisPass456', 'applepay_chris');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (8, 'lisa_smith', 'lisaPassword', 'paypal_lisa123');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (9, 'mike_johnson', 'mikePass789', 'amex_mike789');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (10, 'amy_patterson', 'amyPass123', 'paypal_amy');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (11, 'ryan_harris', 'ryanPass', 'visa_ryan457');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (12, 'grace_kelly', 'gracePassword', 'mastercard_grace');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (13, 'kevin_miller', 'kevinPass', 'paypal_kevin');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (14, 'natalie_carter', 'nataliePass', 'venmo_natalie');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (15, 'peter_robinson', 'petePass456', 'applepay_pete');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (16, 'olivia_jones', 'olivia123', 'amex_olivia');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (17, 'jack_cook', 'jackPass', 'paypal_jack');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (18, 'sophia_brown', 'sophiaPass', 'visa_sophia');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (19, 'david_white', 'davidPassword', 'mastercard_david');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nUPSERT INTO user_account (id, username, password, payment_details) VALUES (20, 'lily_taylor', 'lilyPass789', 'venmo_lily789');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (1, 'john_doe', 'password1', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (2, 'jane_smith', 'password2', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (3, 'michael_jackson', 'password3', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (4, 'sarah_connor', 'password4', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (5, 'peter_parker', 'password5', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (6, 'mary_johnson', 'password6', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (7, 'david_miller', 'password7', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (8, 'lisa_simpson', 'password8', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (9, 'kevin_adams', 'password9', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (10, 'samantha_smith', 'password10', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (11, 'steve_rogers', 'password11', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (12, 'natalie_clark', 'password12', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (13, 'alex_jones', 'password13', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (14, 'emily_brown', 'password14', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (15, 'ryan_garcia', 'password15', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (16, 'julie_white', 'password16', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (17, 'charlie_adams', 'password17', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (18, 'lily_johnson', 'password18', 'stripe');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (19, 'matt_smith', 'password19', 'credit card');",
  "### TABLEDATA\n\nCREATE TABLE user_account (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), payment_details VARCHAR(100));\n\n### STATEMENT\n\nINSERT INTO user_account (id, username, password, payment_details) VALUES (20, 'olivia_white', 'password20', 'paypal');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (1, 'john_doe', 'password123', 'john_doe@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (2, 'jane_smith', 'qwerty321', 'jane_smith@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (3, 'mike_jackson', 'pass123', 'mike_jackson@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (4, 'sarah_brown', 'sarah123', 'sarah_brown@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (5, 'alex_wilson', 'alex543', 'alex_wilson@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (6, 'emily_jones', 'emily456', 'emily_jones@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (7, 'david_smith', 'david789', 'david_smith@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (8, 'lisa_baker', 'lisa111', 'lisa_baker@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (9, 'chris_miller', 'chris999', 'chris_miller@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (10, 'jessica_hall', 'jessica567', 'jessica_hall@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (11, 'mark_wright', 'mark456', 'mark_wright@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (12, 'sophia_davis', 'sophia123', 'sophia_davis@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (13, 'matt_taylor', 'matt789', 'matt_taylor@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (14, 'olivia_clark', 'olivia345', 'olivia_clark@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (15, 'jacob_lee', 'jacob222', 'jacob_lee@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (16, 'amy_brown', 'amy789', 'amy_brown@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (17, 'peter_white', 'peter123', 'peter_white@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (18, 'laura_miller', 'laura567', 'laura_miller@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (19, 'kevin_jackson', 'kevin999', 'kevin_jackson@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (20, 'natalie_wilson', 'natalie123', 'natalie_wilson@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, email = excluded.email, payment_method = excluded.payment_method;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (1, 'john_doe', 'pass123', 'john.doe@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET username='john_doe_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (2, 'jane_smith', 'pass456', 'jane.smith@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET payment_method='paypal_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (3, 'alice_wonderland', 'pass789', 'alice@wonderland.com', 'credit_card') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (4, 'bob_marley', 'pass321', 'bob.marley@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET payment_method='paypal_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (5, 'charlie_chaplin', 'pass654', 'charlie.chaplin@example.com', 'credit_card') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (6, 'david_guetta', 'pass987', 'david.guetta@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username='david_guetta_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (7, 'emily_dickinson', 'pass135', 'emily.dickinson@example.com', 'credit_card') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (8, 'frank_sinatra', 'pass246', 'frank.sinatra@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET email='frank.sinatra_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (9, 'george_orwell', 'pass357', 'george.orwell@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET payment_method='credit_card_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (10, 'harry_potter', 'pass468', 'harry.potter@example.com', 'paypal') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (11, 'isabel_allende', 'pass579', 'isabel.allende@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET payment_method='credit_card_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (12, 'jack_london', 'pass681', 'jack.london@example.com', 'paypal') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (13, 'kate_middleton', 'pass792', 'kate.middleton@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET email='kate.middleton_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (14, 'leonardo_da Vinci', 'pass813', 'leonardo.da Vinci@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET payment_method='paypal_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (15, 'mary_shelley', 'pass924', 'mary.shelley@example.com', 'credit_card') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (16, 'nina_simone', 'pass235', 'nina.simone@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET username='nina_simone_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (17, 'oscar_wilde', 'pass346', 'oscar.wilde@example.com', 'credit_card') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (18, 'pablo_picasso', 'pass457', 'pablo.picasso@example.com', 'paypal') ON CONFLICT (user_id) DO UPDATE SET email='pablo.picasso_updated@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (19, 'queen_elizabeth', 'pass568', 'queen.elizabeth@example.com', 'credit_card') ON CONFLICT (user_id) DO UPDATE SET payment_method='credit_card_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    payment_method VARCHAR(50)\n);\n\nCREATE TABLE payments (\n    payment_id INT PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    payment_date DATE,\n    amount DECIMAL(10, 2),\n    payment_status VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, email, payment_method) VALUES (20, 'rembrandt_van Gogh', 'pass679', 'rembrandt.van Gogh@example.com', 'paypal') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('1bb16c57-6c79-4aa9-bc9f-4b72f0f2cfe9', 'user1', 'pass123', 'user1@example.com', '2022-01-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user1_up', password = 'newpass123'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('30b8dc21-0261-4101-9d29-40f25ee3b980', 'user2', 'password456', 'user2@example.com', '2022-02-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user2_up', password = 'newpass456'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('186b063b-4d8b-4307-8432-33fa1315c01f', 'user3', 'securepass', 'user3@example.com', '2022-03-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user3_up', password = 'newsecurepass'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('88e20f48-9ff3-4f46-b179-122ff77d6636', 'user4', 'pass789', 'user4@example.com', '2022-04-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user4_up', password = 'newpass789'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('e91e3e3e-05df-4e97-8587-2f2f5af5c066', 'user5', 'password999', 'user5@example.com', '2022-05-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user5_up', password = 'newpass999'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('944e34f9-9faa-4b0a-9277-54107b018709', 'user6', 'mypass', 'user6@example.com', '2022-06-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user6_up', password = 'newmypass'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('e704f9dd-9f5a-4cf2-8bc6-c868cb4a88c7', 'user7', 'securepwd', 'user7@example.com', '2022-07-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user7_up', password = 'newsecurepwd'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('caf944a1-7d57-41f4-9902-08b265477916', 'user8', 'mypassword', 'user8@example.com', '2022-08-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user8_up', password = 'newmypassword'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('ac632418-662b-4630-872e-f7749649f073', 'user9', 'mypwd', 'user9@example.com', '2022-09-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user9_up', password = 'newmypwd'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('ccd02d91-0e5d-4f45-ba8c-f194c557a1f5', 'user10', 'mypassword1', 'user10@example.com', '2022-10-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user10_up', password = 'newmypassword1'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('e6faa4a3-f9aa-4cd3-85a9-742892f54299', 'user11', 'pass1234', 'user11@example.com', '2022-11-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user11_up', password = 'newpass1234'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('b47833d6-4390-423d-846a-eebe4a8e6560', 'user12', 'password123', 'user12@example.com', '2022-12-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user12_up', password = 'newpassword123'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('94f3e3d1-030a-4470-9a52-63ec2e8ef85c', 'user13', 'pass7890', 'user13@example.com', '2023-01-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user13_up', password = 'newpass7890'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('1cbf54f2-af7f-418c-b3fa-53b6b3306d5a', 'user14', 'securepass1', 'user14@example.com', '2023-02-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user14_up', password = 'newsecurepass1'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('a006b84d-dd87-4840-a80f-1b2dc16e51e6', 'user15', 'mypassword2', 'user15@example.com', '2023-03-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user15_up', password = 'newmypassword2'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('ad6bd091-ee67-4da4-a0cd-61e20f717f14', 'user16', 'password9999', 'user16@example.com', '2023-04-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user16_up', password = 'newpass9999'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('716d9fc8-398d-44d9-a0e5-6a5f9ef8b055', 'user17', 'securepwd1', 'user17@example.com', '2023-05-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user17_up', password = 'newsecurepwd1'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('aa1fad8c-ebe5-4e1e-9a63-96109e998859', 'user18', 'mypassword3', 'user18@example.com', '2023-06-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user18_up', password = 'newmypassword3'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('0431027f-3da0-40dc-9aab-0fd7995c92d6', 'user19', 'mypwd1', 'user19@example.com', '2023-07-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user19_up', password = 'newmypwd1'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('9fd54457-144f-4f10-8493-df39dd98ad7a', 'user20', 'mypassword4', 'user20@example.com', '2023-08-01 00:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'user20_up', password = 'newmypassword4'",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('11111111-1111-1111-1111-111111111111', 'john_doe', 'password123', 'john.doe@example.com', '2022-01-01 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (1, '11111111-1111-1111-1111-111111111111', 'hash123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (1, '11111111-1111-1111-1111-111111111111', '1234567890123456', '2024-01-01', '123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('22222222-2222-2222-2222-222222222222', 'jane_smith', 'pass321word', 'jane.smith@example.com', '2022-02-02 12:00:00') ON CONFLICT (user_id) DO UPDATE SET email = 'jane.smith@newexample.com';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (2, '22222222-2222-2222-2222-222222222222', 'newhash456') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updatedhash456';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (2, '22222222-2222-2222-2222-222222222222', '9876543210987654', '2024-02-02', '456') ON CONFLICT (user_id) DO UPDATE SET cvv = 'updatedcvv';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('33333333-3333-3333-3333-333333333333', 'mark_wills', 'passpass123', 'mark.wills@example.com', '2022-03-03 12:00:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (3, '33333333-3333-3333-3333-333333333333', 'passpass123hash') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'newhashpasspass123';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (3, '33333333-3333-3333-3333-333333333333', '1111222233334444', '2024-03-03', '789') ON CONFLICT (user_id) DO UPDATE SET card_number = 'updated1111222233334444';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('44444444-4444-4444-4444-444444444444', 'sarah_jones', 'passwordsarah', 'sarah.jones@example.com', '2022-04-04 12:00:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (4, '44444444-4444-4444-4444-444444444444', 'hashsarah123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (4, '44444444-4444-4444-4444-444444444444', '5555666677778888', '2024-04-04', '147') ON CONFLICT (user_id) DO UPDATE SET expiry_date = '2024-05-05';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('55555555-5555-5555-5555-555555555555', 'alice_brown', 'browns123', 'alice.brown@example.com', '2022-05-05 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'brown_alice';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (5, '55555555-5555-5555-5555-555555555555', 'newbrowns456') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (5, '55555555-5555-5555-5555-555555555555', '9999000011112222', '2024-05-05', '258') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('66666666-6666-6666-6666-666666666666', 'michael_green', 'greenpass', 'michael.green@example.com', '2022-06-06 12:00:00') ON CONFLICT (user_id) DO UPDATE SET email = 'green.michael@newexample.com';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (6, '66666666-6666-6666-6666-666666666666', 'passgreen123') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updatedpassgreen';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (6, '66666666-6666-6666-6666-666666666666', '3333222211114444', '2024-06-06', '369') ON CONFLICT (user_id) DO UPDATE SET cvv = 'updated369';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('77777777-7777-7777-7777-777777777777', 'anna_taylor', 'annapass', 'anna.taylor@example.com', '2022-07-07 12:00:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO passwords (password_id, user_id, password_hash) VALUES (7, '77777777-7777-7777-7777-777777777777', 'annapass123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO payment_details (payment_id, user_id, card_number, expiry_date, cvv) VALUES (7, '77777777-7777-7777-7777-777777777777', '1231123212331234', '2024-07-07', '123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id UUID PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    password VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_at TIMESTAMP NOT NULL \n);\n\nCREATE TABLE passwords ( \n    password_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    password_hash VARCHAR(100) NOT NULL \n);\n\nCREATE TABLE payment_details ( \n    payment_id SERIAL PRIMARY KEY, \n    user_id UUID REFERENCES users(user_id), \n    card_number VARCHAR(16) NOT NULL, \n    expiry_date DATE NOT NULL, \n    cvv VARCHAR(3) NOT NULL \n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, email, created_at) VALUES ('88888888-8888-8888-8888-888888888888', 'peter_adams', 'adams123', 'peter.adams@example.com', '2022-08-08 12:00:00') ON CONFLICT (user_id) DO UPDATE SET username = 'adams_peter';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'password123', 'john_doe@email.com') ON CONFLICT (username) DO UPDATE SET password = 'new_password123', email = 'new_email@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'pass321word', 'jane_smith@email.com') ON CONFLICT (email) DO UPDATE SET username = 'new_jane_smith', password = 'new_pass321word';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (1, 'securepass123') ON CONFLICT (user_id) DO UPDATE SET password = 'updated_securepass123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (2, 'strong123pass') ON CONFLICT (user_id) DO UPDATE SET password = 'new_strong123pass';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (1, '1234567890123456', '2023-12-01', 123) ON CONFLICT (user_id) DO UPDATE SET card_number = '6543210987654321';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (2, '9876543210123456', '2024-06-01', 456) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (1, '123 Main St', 'Anytown', 'CA', '90210') ON CONFLICT (user_id) DO UPDATE SET street_address = '456 Elm St', city = 'Othercity', state = 'NY', zip_code = '10001';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (2, '789 Oak Ave', 'Anothercity', 'TX', '77001') ON CONFLICT (user_id) DO UPDATE SET street_address = '321 Pine Ln', city = 'Newcity';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('new_user', 'new_pass', 'new_user@email.com') ON CONFLICT (email) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) SELECT 'user'||g, 'pass'||g, 'user'||g||'@example.com' FROM generate_series(101, 110) g ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'password123', 'john.doe@example.com') ON CONFLICT (username) DO UPDATE SET password = 'new_password123', email = 'new_john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'pass123', 'jane.smith@example.com') ON CONFLICT (username) DO UPDATE SET password = 'new_pass123', email = 'new_jane.smith@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('alexander_p', 'securepass', 'alexander.p@example.com') ON CONFLICT (username) DO UPDATE SET password = 'new_securepass', email = 'new_alexander.p@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('sara_jones', 'sara_pass', 'sara.jones@example.com') ON CONFLICT (username) DO UPDATE SET password = 'new_sara_pass', email = 'new_sara.jones@example.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (1, 'new_password123') ON CONFLICT (user_id) DO UPDATE SET password = 'updated_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (2, 'new_pass123') ON CONFLICT (user_id) DO UPDATE SET password = 'updated_pass123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (3, 'new_securepass') ON CONFLICT (user_id) DO UPDATE SET password = 'updated_securepass';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO passwords (user_id, password) VALUES (4, 'new_sara_pass') ON CONFLICT (user_id) DO UPDATE SET password = 'updated_sara_pass';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (1, '1234567890123456', '2025-12-01', 123) ON CONFLICT (user_id) DO UPDATE SET card_number = 'updated_card_number1234', exp_date = '2026-12-01', cvv = 456;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (2, '9876543210987654', '2024-10-01', 456) ON CONFLICT (user_id) DO UPDATE SET card_number = 'updated_card_number5678', exp_date = '2025-10-01', cvv = 789;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (3, '1111222233334444', '2023-08-01', 789) ON CONFLICT (user_id) DO UPDATE SET card_number = 'updated_card_number9999', exp_date = '2024-08-01', cvv = 111;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO payment_details (user_id, card_number, exp_date, cvv) VALUES (4, '5555666677778888', '2022-06-01', 222) ON CONFLICT (user_id) DO UPDATE SET card_number = 'updated_card_number0000', exp_date = '2023-06-01', cvv = 333;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (1, '123 Main St', 'Sunnyvale', 'CA', '94086') ON CONFLICT (user_id) DO UPDATE SET street_address = '456 Elm St', city = 'Mountain View', state = 'CA', zip_code = '94040';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (2, '789 Oak St', 'San Francisco', 'CA', '94102') ON CONFLICT (user_id) DO UPDATE SET street_address = '321 Pine St', city = 'Oakland', state = 'CA', zip_code = '94601';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (3, '456 Elm St', 'Mountain View', 'CA', '94040') ON CONFLICT (user_id) DO UPDATE SET street_address = '789 Oak St', city = 'San Francisco', state = 'CA', zip_code = '94102';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE passwords (\n    password_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    password VARCHAR(100)\n);\n\n\nCREATE TABLE payment_details (\n    payment_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    card_number VARCHAR(16),\n    exp_date DATE,\n    cvv INTEGER\n);\n\n\nCREATE TABLE address (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(user_id),\n    street_address VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10)\n);\n\n### STATEMENT\n\nINSERT INTO address (user_id, street_address, city, state, zip_code) VALUES (4, '321 Pine St', 'Oakland', 'CA', '94601') ON CONFLICT (user_id) DO UPDATE SET street_address = '123 Main St', city = 'Sunnyvale', state = 'CA', zip_code = '94086';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'password123', 'john@example.com') ON CONFLICT (username) DO UPDATE SET password = 'new_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO addresses (user_id, street_address, city, state, zipcode) VALUES (1, '123 Main St', 'Springfield', 'IL', '62701') ON CONFLICT (user_id) DO UPDATE SET street_address = '456 Elm St';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO cards (user_id, card_number, card_expiry, cvv) VALUES (1, '1234567890123456', '2025-12-01', '123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transactions (user_id, amount, timestamp) VALUES (1, 100.00, '2022-06-15 08:30:00') ON CONFLICT (user_id) DO UPDATE SET amount = 150.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, session_token, expiration_timestamp) VALUES (1, 'token123', '2022-06-30 23:59:59') ON CONFLICT (user_id) DO UPDATE SET session_token = 'updated_token123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'pass456', 'jane@example.com') ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO addresses (user_id, street_address, city, state, zipcode) VALUES (2, '789 Elm St', 'Riverside', 'CA', '92507') ON CONFLICT (user_id) DO UPDATE SET city = 'Los Angeles';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO cards (user_id, card_number, card_expiry, cvv) VALUES (2, '9876543210987654', '2024-10-01', '456') ON CONFLICT (user_id) DO UPDATE SET card_expiry = '2026-03-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transactions (user_id, amount, timestamp) VALUES (2, 50.00, '2022-05-20 15:45:00') ON CONFLICT (user_id) DO UPDATE SET amount = 75.00;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, session_token, expiration_timestamp) VALUES (2, 'token456', '2022-06-25 23:59:59') ON CONFLICT (user_id) DO UPDATE SET expiration_timestamp = '2022-07-15 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('alice_wonderland', 'alicepwd', 'alice@example.com') ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO addresses (user_id, street_address, city, state, zipcode) VALUES (3, '456 Oak St', 'Austin', 'TX', '78701') ON CONFLICT (user_id) DO UPDATE SET state = 'Texas';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO cards (user_id, card_number, card_expiry, cvv) VALUES (3, '1112223334445555', '2023-08-01', '789') ON CONFLICT (user_id) DO UPDATE SET cvv = '456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transactions (user_id, amount, timestamp) VALUES (3, 75.00, '2022-07-10 10:15:00') ON CONFLICT (user_id) DO UPDATE SET timestamp = '2022-07-15 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, session_token, expiration_timestamp) VALUES (3, 'token789', '2022-06-20 23:59:59') ON CONFLICT (user_id) DO UPDATE SET expiration_timestamp = '2022-07-10 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('john_doe', 'jd123', 'john.doe@example.com') ON CONFLICT (username) DO UPDATE SET password = 'jd456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO users (username, password, email) VALUES ('jane_smith', 'js987', 'jane.smith@example.com') ON CONFLICT (username) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO addresses (user_id, street_address, city, state, zipcode) VALUES (1, '123 Main St', 'Anytown', 'CA', '12345') ON CONFLICT (user_id) DO UPDATE SET street_address = '456 Elm St';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO addresses (user_id, street_address, city, state, zipcode) VALUES (2, '789 Oak Ave', 'Sometown', 'NY', '54321') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO cards (user_id, card_number, card_expiry, cvv) VALUES (1, '1234567812345678', '2023-12-01', '123') ON CONFLICT (user_id) DO UPDATE SET card_number = '8765432187654321';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO cards (user_id, card_number, card_expiry, cvv) VALUES (2, '9876543298765432', '2022-11-01', '456') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transactions (user_id, amount, timestamp) VALUES (1, 100.50, '2023-01-15 09:30:00') ON CONFLICT (user_id) DO UPDATE SET amount = 200.75;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO transactions (user_id, amount, timestamp) VALUES (2, 50.25, '2022-11-30 18:45:00') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, session_token, expiration_timestamp) VALUES (1, 'session_token_123', '2023-01-20 15:00:00') ON CONFLICT (user_id) DO UPDATE SET session_token = 'updated_session_token';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE addresses (\n    address_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    street_address VARCHAR(100) NOT NULL,\n    city VARCHAR(50) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    zipcode VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE cards (\n    card_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    card_number VARCHAR(16) NOT NULL,\n    card_expiry DATE NOT NULL,\n    cvv VARCHAR(3) NOT NULL\n);\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    amount DECIMAL(10, 2) NOT NULL,\n    timestamp TIMESTAMP NOT NULL\n);\n\nCREATE TABLE sessions (\n    session_id SERIAL PRIMARY KEY,\n    user_id INT NOT NULL,\n    session_token VARCHAR(100) NOT NULL,\n    expiration_timestamp TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO sessions (user_id, session_token, expiration_timestamp) VALUES (2, 'session_token_456', '2022-12-15 11:00:00') ON CONFLICT (user_id) DO NOTHING;"
]