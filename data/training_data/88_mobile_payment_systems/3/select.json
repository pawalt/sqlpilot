[
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT activity_timestamp FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE user_id = '123e4567-e89b-12d3-a456-426614174000'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type FROM user_activity WHERE activity_type = 'login'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_timestamp BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity ORDER BY activity_timestamp DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM user_activity GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT AVG(TIMESTAMPDIFF(MINUTE, activity_timestamp, NOW())) AS minutes_since_activity FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, JSON_EXTRACT(activity_details, '$.location') AS location FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE JSON_CONTAINS(activity_details, JSON_OBJECT('status', 'active'))",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(activity_timestamp) AS last_activity FROM user_activity GROUP BY user_id",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT activity_type, COUNT(*) FROM user_activity GROUP BY activity_type HAVING COUNT(*) > 1",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT DISTINCT activity_type FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_details->'$.duration' > '30'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE user_id = '123e4567-e89b-12d3-a456-426614174000' AND activity_type = 'logout'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_timestamp >= '2022-01-01T00:00:00' AND activity_timestamp <= '2022-01-31T23:59:59'",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id HAVING activity_count > 5",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT JSON_KEYS(activity_details) AS keys FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_timestamp >= DATE_ADD(NOW(), INTERVAL -7 DAY)",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE EXTRACT(MONTH FROM activity_timestamp) = 1 ORDER BY activity_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id, activity_type HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'location') AS location FROM user_activity WHERE json_extract_path_text(activity_details, 'status') = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type LIKE 'login%' AND activity_timestamp >= '2023-01-01' AND activity_timestamp < '2024-01-01';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_array_elements_text(activity_details->'tags') AS tag FROM user_activity WHERE json_array_length(activity_details->'tags') > 3;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'category') AS category FROM user_activity WHERE activity_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type = 'purchase' AND date_trunc('day', activity_timestamp) = CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'reference_id') AS reference_id FROM user_activity WHERE json_extract_path_text(activity_details, 'category') = 'payment';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type IN ('login', 'logout') AND EXTRACT(YEAR FROM activity_timestamp) = 2023;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'email') AS email FROM user_activity WHERE json_extract_path_text(activity_details, 'status') = 'active';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type = 'login' AND activity_timestamp BETWEEN '2023-01-01' AND '2023-03-31';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'category') AS category FROM user_activity WHERE json_extract_path_text(activity_details, 'status') = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type = 'logout' AND EXTRACT(MONTH FROM activity_timestamp) = 12;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'location') AS location FROM user_activity WHERE json_extract_path_text(activity_details, 'status') = 'failed';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type LIKE 'purchase%' AND activity_timestamp >= '2023-01-01' AND activity_timestamp < '2023-02-01';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'category') AS category FROM user_activity WHERE activity_type = 'login' AND EXTRACT(DOW FROM activity_timestamp) = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type = 'logout' AND activity_timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'reference_id') AS reference_id FROM user_activity WHERE activity_type = 'purchase' AND json_extract_path_text(activity_details, 'status') = 'success';",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM user_activity WHERE activity_type = 'login' AND date_trunc('month', activity_timestamp) = date_trunc('month', CURRENT_DATE);",
  "### TABLEDATA\n\nCREATE TABLE user_activity (\n  user_id UUID PRIMARY KEY,\n  activity_type VARCHAR(255),\n  activity_timestamp TIMESTAMP,\n  activity_details JSON\n)\n\n### STATEMENT\n\nSELECT user_id, activity_type, json_extract_path_text(activity_details, 'email') AS email FROM user_activity WHERE activity_type = 'registration';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT username, email FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT user_id, registration_date FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT activity_type, activity_timestamp FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT user_id, activity_type, activity_timestamp FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT Users.user_id, Users.username, UserActivity.activity_type FROM Users JOIN UserActivity ON Users.user_id = UserActivity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT Users.*, UserActivity.activity_type FROM Users JOIN UserActivity ON Users.user_id = UserActivity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT Users.username, Users.email, UserActivity.activity_timestamp FROM Users INNER JOIN UserActivity ON Users.user_id = UserActivity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT Users.username AS name, Users.email AS mail, UserActivity.activity_timestamp AS timestamp FROM Users JOIN UserActivity ON Users.user_id = UserActivity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM Users WHERE registration_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM Users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM Users WHERE username = 'John';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT * FROM UserActivity WHERE activity_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT Users.username, UserActivity.activity_type FROM Users JOIN UserActivity ON Users.user_id = UserActivity.user_id WHERE UserActivity.activity_type = 'Login';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_activities FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT AVG(EXTRACT(EPOCH FROM activity_timestamp)) AS avg_activity_time FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS total_activities FROM Users JOIN UserActivity ON Users.user_id = UserActivity.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT activity_type, COUNT(*) AS total_occurrences FROM UserActivity GROUP BY activity_type;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT DISTINCT activity_type FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, u.email, ua.activity_type FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id WHERE ua.activity_timestamp >= NOW() - INTERVAL '1 day'",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, COUNT(ua.activity_id) as num_activities FROM Users u LEFT JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username HAVING num_activities > 5",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, u.email, ua.activity_type FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id WHERE ua.activity_type = 'Login' AND u.username LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, MAX(ua.activity_timestamp) as last_activity FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username ORDER BY last_activity DESC",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, COUNT(ua.activity_type) as total_activities FROM Users u LEFT JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username ORDER BY total_activities DESC",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, MIN(ua.activity_timestamp) as first_activity FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, u.email, COUNT(DISTINCT ua.activity_type) as unique_activities FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, AVG(EXTRACT(EPOCH FROM ua.activity_timestamp)) as avg_activity_duration FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, ua.activity_type, COUNT(ua.activity_type) as num_occurrences FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username, ua.activity_type ORDER BY num_occurrences DESC",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, ua.activity_type, COUNT(ua.activity_type) as num_occurrences FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id WHERE ua.activity_timestamp >= '2022-01-01' GROUP BY u.username, ua.activity_type ORDER BY num_occurrences DESC",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, MAX(ua.activity_timestamp) - MIN(ua.activity_timestamp) as activity_duration FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, u.email, ua.activity_type, COUNT(ua.activity_id) as num_activities FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username, u.email, ua.activity_type HAVING num_activities > 10",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, EXTRACT(DAY FROM ua.activity_timestamp) as activity_day FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id ORDER BY activity_day ASC",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id UUID PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100),\n  registration_date TIMESTAMP)\n\nCREATE TABLE UserActivity (activity_id SERIAL PRIMARY KEY,\n  user_id UUID,\n  activity_type VARCHAR(50),\n  activity_timestamp TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES Users(user_id))\n\n### STATEMENT\n\nSELECT u.username, ua.activity_type, AVG(EXTRACT(EPOCH FROM ua.activity_timestamp)) as avg_duration FROM Users u JOIN UserActivity ua ON u.user_id = ua.user_id GROUP BY u.username, ua.activity_type HAVING AVG(EXTRACT(EPOCH FROM ua.activity_timestamp)) > 600",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, age FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM user_activity;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, activity_type, timestamp FROM user_activity;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, product_id FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, recommendation_type FROM recommendations;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE username LIKE '%john%';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, age FROM users WHERE age BETWEEN 20 AND 30;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_activity.user_id, user_activity.activity_type, recommendations.recommendation_type FROM user_activity INNER JOIN recommendations ON user_activity.user_id = recommendations.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_activity.user_id, user_activity.activity_type, recommendations.recommendation_type FROM user_activity LEFT JOIN recommendations ON user_activity.user_id = recommendations.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_activities FROM user_activity GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(age) AS max_age FROM users GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(age) AS average_age FROM users GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_recommendations FROM recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(product_id) AS max_product_id FROM recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(product_id) AS average_product_id FROM recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, timestamp FROM user_activity ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE age < 25;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email, timestamp FROM users JOIN user_activity ON users.user_id = user_activity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, COUNT(*) FROM users JOIN user_activity ON users.user_id = user_activity.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, ua.activity_type FROM users u JOIN user_activity ua ON u.user_id = ua.user_id WHERE ua.timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT r.recommendation_id, u.username, u.email, r.recommendation_type FROM recommendations r JOIN users u ON r.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id IN (SELECT user_id FROM recommendations WHERE recommendation_type = 'New');",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT u.username, u.email, r.product_id FROM users u JOIN recommendations r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT r.*, u.username, u.age FROM recommendations r JOIN users u ON r.user_id = u.user_id WHERE u.age BETWEEN 20 AND 30;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE age > (SELECT AVG(age) FROM users);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, COUNT(activity_id) FROM users LEFT JOIN user_activity ON users.user_id = user_activity.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(age) AS max_age FROM users GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, 2022 - age AS birth_year FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, activity_type, timestamp FROM users LEFT JOIN user_activity ON users.user_id = user_activity.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(recommendation_id) AS num_recommendations FROM users LEFT JOIN recommendations ON users.user_id = recommendations.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT recommendation_type, COUNT(*) FROM recommendations GROUP BY recommendation_type HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email, recommendation_type FROM users JOIN recommendations ON users.user_id = recommendations.user_id ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id NOT IN (SELECT user_id FROM user_activity);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, email, MAX(age) FROM users GROUP BY username, email;",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE EXISTS (SELECT 1 FROM recommendations WHERE recommendations.user_id = users.user_id);",
  "### TABLEDATA\n\nCREATE TABLE users ( \n    user_id INT PRIMARY KEY, \n    username VARCHAR(50) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    age INT\n);\n\nCREATE TABLE user_activity ( \n    activity_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    activity_type VARCHAR(50) NOT NULL, \n    timestamp TIMESTAMP\n);\n\nCREATE TABLE recommendations ( \n    recommendation_id SERIAL PRIMARY KEY, \n    user_id INT REFERENCES users(user_id), \n    product_id INT NOT NULL, \n    recommendation_type VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, u.email, COUNT(r.recommendation_id) AS num_recommendations FROM users u LEFT JOIN recommendations r ON u.user_id = r.user_id GROUP BY u.user_id HAVING COUNT(r.recommendation_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT username, email FROM Users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, gender FROM Users WHERE location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT activity_type, activity_details FROM UserActivity WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM Offers;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT offer_name, offer_discount FROM Offers WHERE offer_type = 'discount';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM Recommendations;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, recommendation_type FROM Recommendations WHERE recommendation_type = 'discount';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, recommended_item_id FROM Recommendations WHERE recommendation_type = 'item';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, recommendation_type, recommended_item_id FROM Recommendations WHERE recommendation_type IN ('discount', 'item');",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, recommendation_type, recommended_item_id, timestamp FROM Recommendations WHERE timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, recommendation_type, recommended_item_id FROM Recommendations ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_recommendations FROM Recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, AVG(recommended_item_id) AS avg_item_id FROM Recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, MIN(recommended_item_id) AS min_item_id FROM Recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, MAX(recommended_item_id) AS max_item_id FROM Recommendations GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, SUM(offer_discount) AS total_discount FROM Offers JOIN Recommendations ON Offers.offer_id = Recommendations.recommended_item_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, SUM(offer_discount) AS total_discount FROM Offers INNER JOIN Recommendations ON Offers.offer_id = Recommendations.recommended_item_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT Users.username, Recommendations.recommendation_type FROM Users LEFT JOIN Recommendations ON Users.user_id = Recommendations.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM Users WHERE age > 30;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM Users WHERE gender = 'Male';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username, location FROM Users WHERE age BETWEEN 25 AND 35;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM Users WHERE age >= 18 AND age <= 30;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, u.email, a.timestamp, a.activity_type FROM Users u JOIN UserActivity a ON u.user_id = a.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, r.recommendation_type, o.offer_name, o.offer_discount FROM Users u JOIN Recommendations r ON u.user_id = r.user_id JOIN Offers o ON r.recommended_item_id = o.offer_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, COUNT(activity_id) AS num_activities FROM UserActivity GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) AS num_users FROM UserActivity;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, MAX(age) AS max_age FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT DISTINCT location FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT recommendation_type, COUNT(*) AS num_recommendations FROM Recommendations GROUP BY recommendation_type;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, AVG(age) AS avg_age FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, COUNT(r.recommendation_id) AS num_recommendations FROM Users u LEFT JOIN Recommendations r ON u.user_id = r.user_id GROUP BY u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, SUM(offer_discount) AS total_discount FROM Recommendations r JOIN Offers o ON r.recommended_item_id = o.offer_id WHERE offer_type = 'Discount';",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, AVG(offer_discount) AS avg_discount FROM Recommendations r JOIN Offers o ON r.recommended_item_id = o.offer_id WHERE offer_type = 'Discount' GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, r.recommendation_type, o.offer_type, o.offer_discount FROM Users u JOIN Recommendations r ON u.user_id = r.user_id JOIN Offers o ON r.recommended_item_id = o.offer_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT u.username, r.recommendation_type, a.activity_type, a.timestamp FROM Users u JOIN Recommendations r ON u.user_id = r.user_id JOIN UserActivity a ON u.user_id = a.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (user_id INT PRIMARY KEY,\n              username TEXT,\n              email TEXT,\n              age INT,\n              gender TEXT,\n              location TEXT);\n\nCREATE TABLE UserActivity (activity_id INT PRIMARY KEY,\n              user_id INT,\n              timestamp TIMESTAMP,\n              activity_type TEXT,\n              activity_details TEXT);\n\nCREATE TABLE Offers (offer_id INT PRIMARY KEY,\n              offer_name TEXT,\n              offer_description TEXT,\n              offer_type TEXT,\n              offer_discount FLOAT);\n\nCREATE TABLE Recommendations (recommendation_id INT PRIMARY KEY,\n              user_id INT,\n              recommendation_type TEXT,\n              recommended_item_id INT,\n              timestamp TIMESTAMP);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_recommendations FROM Recommendations GROUP BY user_id ORDER BY num_recommendations DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT activity_id, user_id, activity_type FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT activity_id, activity_timestamp FROM user_activity",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_preferences",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT preference_id, user_id, preference_name FROM user_preferences",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT preference_id, preference_name FROM user_preferences",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM offers",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT offer_id, offer_type FROM offers",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT offer_id, offer_description FROM offers",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM recommendations",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT recommendation_id, user_id, recommendation_type FROM recommendations",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT recommendation_id, recommendation_type FROM recommendations",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT users.user_id, recommendations.user_id FROM users INNER JOIN recommendations ON users.user_id = recommendations.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT users.username, recommendations.recommendation_description FROM users INNER JOIN recommendations ON users.user_id = recommendations.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'JohnDoe'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_timestamp >= '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_activity WHERE activity_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, preference_name FROM user_preferences WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM offers WHERE offer_type = 'discount';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT username, email FROM users JOIN user_preferences ON users.user_id = user_preferences.user_id WHERE preference_name = 'notification';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, recommendation_description FROM recommendations WHERE recommendation_type IN ('movie', 'book');",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE '%smith%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, count(*) FROM user_activity GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_preferences WHERE preference_name LIKE 'theme%' AND user_id IN (SELECT user_id FROM users WHERE username = 'alice');",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT username, count(activity_id) FROM users JOIN user_activity ON users.user_id = user_activity.user_id GROUP BY username HAVING count(activity_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM offers WHERE offer_description LIKE '%limited time%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, recommendation_description FROM recommendations WHERE recommendation_type = 'music' ORDER BY recommendation_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT distinct(user_id) FROM user_preferences;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM user_activity WHERE activity_type = 'login' GROUP BY user_id HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT username, recommendation_description FROM users JOIN recommendations ON users.user_id = recommendations.user_id WHERE recommendation_type = 'book';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, AVG(activity_timestamp) FROM user_activity GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT activity_type) FROM user_activity GROUP BY user_id HAVING COUNT(DISTINCT activity_type) > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM user_preferences WHERE user_id NOT IN (SELECT user_id FROM user_activity);",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM recommendations WHERE user_id IN (SELECT user_id FROM users WHERE username = 'jane') AND recommendation_type = 'restaurant';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL\n)\n\nCREATE TABLE user_activity (\n  activity_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  activity_type VARCHAR(50) NOT NULL,\n  activity_timestamp TIMESTAMP NOT NULL\n)\n\nCREATE TABLE user_preferences (\n  preference_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  preference_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE offers (\n  offer_id UUID PRIMARY KEY,\n  offer_type VARCHAR(50) NOT NULL,\n  offer_description TEXT\n)\n\nCREATE TABLE recommendations (\n  recommendation_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id),\n  recommendation_type VARCHAR(50) NOT NULL,\n  recommendation_description TEXT\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(activity_timestamp) FROM user_activity GROUP BY user_id;"
]