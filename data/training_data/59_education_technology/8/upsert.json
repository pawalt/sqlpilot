[
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (1, 'John Doe', 'john.doe@example.com', 'password123', '2022-01-01 12:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (2, 'Jane Smith', 'jane.smith@example.com', 'securepass', '2022-01-02 10:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (3, 'Alice Johnson', 'alice.johnson@example.com', 'pass1234', '2022-01-03 08:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (4, 'Bob Brown', 'bob.brown@example.com', 'password567', '2022-01-04 14:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (5, 'Emily Davis', 'emily.davis@example.com', 'secure123', '2022-01-05 16:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (6, 'Michael Wilson', 'michael.wilson@example.com', 'password999', '2022-01-06 18:00:00')",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_account...",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (1, 'Alice Smith', 'alice@example.com', 'password123', '2022-01-01 10:00:00') ON DUPLICATE KEY UPDATE full_name = 'Alice Smith', password = 'updated_password123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (2, 'Bob Johnson', 'bob@example.com', 'securepassword', '2022-01-02 11:00:00') ON DUPLICATE KEY UPDATE full_name = 'Bob Johnson', account_created_at = '2022-01-02 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (3, 'Charlie Brown', 'charlie@example.com', 'charlie_password', '2022-01-03 13:00:00') ON DUPLICATE KEY UPDATE password = 'new_password123', account_created_at = '2022-01-03 14:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (4, 'David Lee', 'david@example.com', 'davidpass', '2022-01-04 15:00:00') ON DUPLICATE KEY UPDATE account_created_at = '2022-01-04 16:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (5, 'Eve White', 'eve@example.com', 'evepass123', '2022-01-05 17:00:00') ON DUPLICATE KEY UPDATE full_name = 'Eve White', password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (6, 'Frank Wilson', 'frank@example.com', 'frankPassword', '2022-01-06 18:00:00') ON DUPLICATE KEY UPDATE full_name = 'Frank Wilson', email = 'newfrank@example.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (7, 'Grace Miller', 'grace@example.com', 'gracepass', '2022-01-07 19:00:00') ON DUPLICATE KEY UPDATE email = 'newgrace@example.com', account_created_at = '2022-01-07 20:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (8, 'Henry Chen', 'henry@example.com', 'secure123', '2022-01-08 21:00:00') ON DUPLICATE KEY UPDATE full_name = 'Henry Chen', password = 'updated_secure123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (9, 'Ivy Brown', 'ivy@example.com', 'ivy_password123', '2022-01-09 22:00:00') ON DUPLICATE KEY UPDATE full_name = 'Ivy Brown', email = 'newivy@example.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (10, 'Jacob Kim', 'jacob@example.com', 'jacobpass', '2022-01-10 23:00:00') ON DUPLICATE KEY UPDATE email = 'newjacob@example.com', account_created_at = '2022-01-10 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (11, 'Karen Wong', 'karen@example.com', 'karenpassword', '2022-01-11 01:00:00') ON DUPLICATE KEY UPDATE full_name = 'Karen Wong', password = 'newpassword321';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (12, 'Liam Adams', 'liam@example.com', 'liampass123', '2022-01-12 02:00:00') ON DUPLICATE KEY UPDATE email = 'newliam@example.com', account_created_at = '2022-01-12 03:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (13, 'Mia Baker', 'mia@example.com', 'miapassword', '2022-01-13 04:00:00') ON DUPLICATE KEY UPDATE full_name = 'Mia Baker', password = 'updated_miapassword';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (14, 'Noah Clark', 'noah@example.com', 'noahpass', '2022-01-14 05:00:00') ON DUPLICATE KEY UPDATE full_name = 'Noah Clark', account_created_at = '2022-01-14 06:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (15, 'Olivia Davis', 'olivia@example.com', 'oliviapassword123', '2022-01-15 07:00:00') ON DUPLICATE KEY UPDATE password = 'newoliviapassword123', account_created_at = '2022-01-15 08:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (16, 'Peter Evans', 'peter@example.com', 'peterpass', '2022-01-16 09:00:00') ON DUPLICATE KEY UPDATE full_name = 'Peter Evans', email = 'newpeter@example.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (17, 'Quinn Foster', 'quinn@example.com', 'quinnpass', '2022-01-17 10:00:00') ON DUPLICATE KEY UPDATE email = 'newquinn@example.com', account_created_at = '2022-01-17 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (18, 'Rachel Green', 'rachel@example.com', 'rachelpassword', '2022-01-18 12:00:00') ON DUPLICATE KEY UPDATE full_name = 'Rachel Green', password = 'updated_rachelpassword';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (19, 'Sam Harris', 'sam@example.com', 'sampass', '2022-01-19 13:00:00') ON DUPLICATE KEY UPDATE full_name = 'Sam Harris', account_created_at = '2022-01-19 14:00:00';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO student_accounts (student_id, full_name, email, password, account_created_at) VALUES (20, 'Tina Jackson', 'tina@example.com', 'tinapassword', '2022-01-20 15:00:00') ON DUPLICATE KEY UPDATE email = 'newtina@example.com', account_created_at = '2022-01-20 16:00:00';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (1, 'Alice', 'alice@example.com', 'password123') ON DUPLICATE KEY UPDATE student_name = 'Alice', student_email = 'alice@example.com', student_password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (2, 'Bob', 'bob@example.com', 'test321') ON DUPLICATE KEY UPDATE student_name = 'Bob', student_email = 'bob@example.com', student_password = 'test321';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (3, 'Charlie', 'charlie@example.com', 'securepwd') ON DUPLICATE KEY UPDATE student_name = 'Charlie', student_email = 'charlie@example.com', student_password = 'securepwd';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (4, 'David', 'david@example.com', 'pass1234') ON DUPLICATE KEY UPDATE student_name = 'David', student_email = 'david@example.com', student_password = 'pass1234';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (5, 'Eve', 'eve@example.com', 'hello123') ON DUPLICATE KEY UPDATE student_name = 'Eve', student_email = 'eve@example.com', student_password = 'hello123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (6, 'Frank', 'frank@example.com', 'testing321') ON DUPLICATE KEY UPDATE student_name = 'Frank', student_email = 'frank@example.com', student_password = 'testing321';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (7, 'Grace', 'grace@example.com', 'gracepass') ON DUPLICATE KEY UPDATE student_name = 'Grace', student_email = 'grace@example.com', student_password = 'gracepass';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (8, 'Henry', 'henry@example.com', 'helloworld') ON DUPLICATE KEY UPDATE student_name = 'Henry', student_email = 'henry@example.com', student_password = 'helloworld';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (9, 'Ivy', 'ivy@example.com', 'securepwd123') ON DUPLICATE KEY UPDATE student_name = 'Ivy', student_email = 'ivy@example.com', student_password = 'securepwd123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (10, 'Jack', 'jack@example.com', 'password1234') ON DUPLICATE KEY UPDATE student_name = 'Jack', student_email = 'jack@example.com', student_password = 'password1234';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (11, 'Kate', 'kate@example.com', 'testtest') ON DUPLICATE KEY UPDATE student_name = 'Kate', student_email = 'kate@example.com', student_password = 'testtest';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (12, 'Liam', 'liam@example.com', 'passpass') ON DUPLICATE KEY UPDATE student_name = 'Liam', student_email = 'liam@example.com', student_password = 'passpass';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (13, 'Mia', 'mia@example.com', 'hellohello') ON DUPLICATE KEY UPDATE student_name = 'Mia', student_email = 'mia@example.com', student_password = 'hellohello';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (14, 'Nick', 'nick@example.com', 'testpass') ON DUPLICATE KEY UPDATE student_name = 'Nick', student_email = 'nick@example.com', student_password = 'testpass';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (15, 'Olivia', 'olivia@example.com', 'securetesting') ON DUPLICATE KEY UPDATE student_name = 'Olivia', student_email = 'olivia@example.com', student_password = 'securetesting';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (16, 'Peter', 'peter@example.com', 'peter123') ON DUPLICATE KEY UPDATE student_name = 'Peter', student_email = 'peter@example.com', student_password = 'peter123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (17, 'Quinn', 'quinn@example.com', 'quinnpass') ON DUPLICATE KEY UPDATE student_name = 'Quinn', student_email = 'quinn@example.com', student_password = 'quinnpass';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (18, 'Rose', 'rose@example.com', 'rose123') ON DUPLICATE KEY UPDATE student_name = 'Rose', student_email = 'rose@example.com', student_password = 'rose123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (19, 'Sam', 'sam@example.com', 'samtesting') ON DUPLICATE KEY UPDATE student_name = 'Sam', student_email = 'sam@example.com', student_password = 'samtesting';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_email, student_password) VALUES (20, 'Tom', 'tom@example.com', 'tom1234') ON DUPLICATE KEY UPDATE student_name = 'Tom', student_email = 'tom@example.com', student_password = 'tom1234';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (1, 'Alice', 'alice@example.com', 'pass123') ON DUPLICATE KEY UPDATE student_name = 'Alice_updated', student_password = 'updatedpass123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (2, 'Bob', 'bob@example.com', 'pass456') ON DUPLICATE KEY UPDATE student_name = 'Bob_updated', student_password = 'updatedpass456';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (3, 'Charlie', 'charlie@example.com', 'pass789') ON DUPLICATE KEY UPDATE student_name = 'Charlie_updated', student_password = 'updatedpass789';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (4, 'David', 'david@example.com', 'pass321') ON DUPLICATE KEY UPDATE student_name = 'David_updated', student_password = 'updatedpass321';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (5, 'Eve', 'eve@example.com', 'pass654') ON DUPLICATE KEY UPDATE student_name = 'Eve_updated', student_password = 'updatedpass654';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (6, 'Frank', 'frank@example.com', 'pass987') ON DUPLICATE KEY UPDATE student_name = 'Frank_updated', student_password = 'updatedpass987';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (7, 'Grace', 'grace@example.com', 'pass159') ON DUPLICATE KEY UPDATE student_name = 'Grace_updated', student_password = 'updatedpass159';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (8, 'Henry', 'henry@example.com', 'pass753') ON DUPLICATE KEY UPDATE student_name = 'Henry_updated', student_password = 'updatedpass753';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (9, 'Ivy', 'ivy@example.com', 'pass426') ON DUPLICATE KEY UPDATE student_name = 'Ivy_updated', student_password = 'updatedpass426';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (10, 'Jack', 'jack@example.com', 'pass819') ON DUPLICATE KEY UPDATE student_name = 'Jack_updated', student_password = 'updatedpass819';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (11, 'Kate', 'kate@example.com', 'pass537') ON DUPLICATE KEY UPDATE student_name = 'Kate_updated', student_password = 'updatedpass537';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (12, 'Leo', 'leo@example.com', 'pass624') ON DUPLICATE KEY UPDATE student_name = 'Leo_updated', student_password = 'updatedpass624';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (13, 'Mia', 'mia@example.com', 'pass948') ON DUPLICATE KEY UPDATE student_name = 'Mia_updated', student_password = 'updatedpass948';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (14, 'Nina', 'nina@example.com', 'pass753') ON DUPLICATE KEY UPDATE student_name = 'Nina_updated', student_password = 'updatedpass753';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (15, 'Oscar', 'oscar@example.com', 'pass426') ON DUPLICATE KEY UPDATE student_name = 'Oscar_updated', student_password = 'updatedpass426';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (16, 'Peter', 'peter@example.com', 'pass819') ON DUPLICATE KEY UPDATE student_name = 'Peter_updated', student_password = 'updatedpass819';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (17, 'Queen', 'queen@example.com', 'pass537') ON DUPLICATE KEY UPDATE student_name = 'Queen_updated', student_password = 'updatedpass537';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (18, 'Rose', 'rose@example.com', 'pass624') ON DUPLICATE KEY UPDATE student_name = 'Rose_updated', student_password = 'updatedpass624';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (19, 'Sam', 'sam@example.com', 'pass948') ON DUPLICATE KEY UPDATE student_name = 'Sam_updated', student_password = 'updatedpass948';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_email, student_password) VALUES (20, 'Tom', 'tom@example.com', 'pass753') ON DUPLICATE KEY UPDATE student_name = 'Tom_updated', student_password = 'updatedpass753';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (101, 'Alice', 'Computer Science', 2020) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', department = 'Computer Science', enrollment_year = 2020;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (102, 'Bob', 'Engineering', 2019) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob', department = 'Engineering', enrollment_year = 2019;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (103, 'Charlie', 'Mathematics', 2021) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Charlie', department = 'Mathematics', enrollment_year = 2021;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (104, 'David', 'Physics', 2018) ON CONFLICT (student_id) DO UPDATE SET student_name = 'David', department = 'Physics', enrollment_year = 2018;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (105, 'Eve', 'Biology', 2017) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Eve', department = 'Biology', enrollment_year = 2017;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (106, 'Frank', 'Chemistry', 2016) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Frank', department = 'Chemistry', enrollment_year = 2016;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (107, 'Grace', 'History', 2015) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Grace', department = 'History', enrollment_year = 2015;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (108, 'Henry', 'Geography', 2014) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Henry', department = 'Geography', enrollment_year = 2014;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (109, 'Ivy', 'Economics', 2013) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Ivy', department = 'Economics', enrollment_year = 2013;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (110, 'Jack', 'Political Science', 2012) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Jack', department = 'Political Science', enrollment_year = 2012;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (111, 'Kate', 'Sociology', 2011) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Kate', department = 'Sociology', enrollment_year = 2011;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (112, 'Leo', 'Linguistics', 2010) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Leo', department = 'Linguistics', enrollment_year = 2010;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (113, 'Maria', 'Psychology', 2009) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Maria', department = 'Psychology', enrollment_year = 2009;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (114, 'Noah', 'Public Health', 2008) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Noah', department = 'Public Health', enrollment_year = 2008;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (115, 'Olivia', 'Music', 2007) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Olivia', department = 'Music', enrollment_year = 2007;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (116, 'Peter', 'Dance', 2006) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Peter', department = 'Dance', enrollment_year = 2006;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (117, 'Rachel', 'Art', 2005) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Rachel', department = 'Art', enrollment_year = 2005;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (118, 'Sam', 'Theater', 2004) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Sam', department = 'Theater', enrollment_year = 2004;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (119, 'Tom', 'Fashion', 2003) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Tom', department = 'Fashion', enrollment_year = 2003;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (120, 'Uma', 'Film', 2002) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Uma', department = 'Film', enrollment_year = 2002;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (101, 'John Doe', 'Computer Science', 2020) ON CONFLICT (student_id) DO UPDATE SET student_name = 'John Doe', department = 'Computer Science', enrollment_year = 2020;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (201, 101, 'jdoe101', 'password123') ON CONFLICT (login_id) DO UPDATE SET student_id = 101, username = 'jdoe101', password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (301, 201, 'admin') ON CONFLICT (permission_id) DO UPDATE SET login_id = 201, permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (102, 'Alice Smith', 'Engineering', 2019) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice Smith', department = 'Engineering', enrollment_year = 2019;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (202, 102, 'asmith202', 'securepass') ON CONFLICT (login_id) DO UPDATE SET student_id = 102, username = 'asmith202', password = 'securepass';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (302, 202, 'user') ON CONFLICT (permission_id) DO UPDATE SET login_id = 202, permission_type = 'user';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (103, 'Bob Johnson', 'Mathematics', 2021) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob Johnson', department = 'Mathematics', enrollment_year = 2021;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (203, 103, 'bjohn203', 'math1234') ON CONFLICT (login_id) DO UPDATE SET student_id = 103, username = 'bjohn203', password = 'math1234';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (303, 203, 'user') ON CONFLICT (permission_id) DO UPDATE SET login_id = 203, permission_type = 'user';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (104, 'Emily Brown', 'Physics', 2020) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Emily Brown', department = 'Physics', enrollment_year = 2020;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (204, 104, 'ebrown204', 'physics123') ON CONFLICT (login_id) DO UPDATE SET student_id = 104, username = 'ebrown204', password = 'physics123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (304, 204, 'guest') ON CONFLICT (permission_id) DO UPDATE SET login_id = 204, permission_type = 'guest';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (105, 'Michael Lee', 'Chemistry', 2019) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Michael Lee', department = 'Chemistry', enrollment_year = 2019;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (205, 105, 'mlee205', 'chemistry') ON CONFLICT (login_id) DO UPDATE SET student_id = 105, username = 'mlee205', password = 'chemistry';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (305, 205, 'admin') ON CONFLICT (permission_id) DO UPDATE SET login_id = 205, permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (106, 'Sarah Wilson', 'Biology', 2021) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Sarah Wilson', department = 'Biology', enrollment_year = 2021;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (206, 106, 'swilson206', 'biology123') ON CONFLICT (login_id) DO UPDATE SET student_id = 106, username = 'swilson206', password = 'biology123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (306, 206, 'guest') ON CONFLICT (permission_id) DO UPDATE SET login_id = 206, permission_type = 'guest';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student_accounts (student_id, student_name, department, enrollment_year) VALUES (107, 'David Miller', 'Psychology', 2020) ON CONFLICT (student_id) DO UPDATE SET student_name = 'David Miller', department = 'Psychology', enrollment_year = 2020;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO login_credentials (login_id, student_id, username, password) VALUES (207, 107, 'dmiller207', 'psychology123') ON CONFLICT (login_id) DO UPDATE SET student_id = 107, username = 'dmiller207', password = 'psychology123';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO access_permissions (permission_id, login_id, permission_type) VALUES (307, 207, 'user') ON CONFLICT (permission_id) DO UPDATE SET login_id = 207, permission_type = 'user';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (1, 'Alice', 'alice@example.com', 'Math') ON DUPLICATE KEY UPDATE student_name='Alice', student_email='alice@example.com', student_course='Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (2, 'Bob', 'bob@example.com', 'Science') ON DUPLICATE KEY UPDATE student_name='Bob', student_email='bob@example.com', student_course='Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (101, 'Savings', 1000.00, 1) ON DUPLICATE KEY UPDATE account_type='Savings', account_balance=1000.00, student_id=1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (102, 'Checking', 500.00, 2) ON DUPLICATE KEY UPDATE account_type='Checking', account_balance=500.00, student_id=2;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (201, 'alice123', 'pass123', 101) ON DUPLICATE KEY UPDATE username='alice123', password='pass123', account_id=101;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (202, 'bob456', 'pass456', 102) ON DUPLICATE KEY UPDATE username='bob456', password='pass456', account_id=102;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (301, 'Read', 101) ON DUPLICATE KEY UPDATE permission_name='Read', account_id=101;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (302, 'Write', 102) ON DUPLICATE KEY UPDATE permission_name='Write', account_id=102;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (1, 'Alice', 'alice@example.com', 'Math') ON DUPLICATE KEY UPDATE student_name = 'Alice', student_email = 'alice@example.com', student_course = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (101, 'Savings', 5000.00, 1) ON DUPLICATE KEY UPDATE account_type = 'Savings', account_balance = 5000.00, student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (201, 'alice', 'password123', 101) ON DUPLICATE KEY UPDATE username = 'alice', password = 'password123', account_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (301, 'read_only', 101) ON DUPLICATE KEY UPDATE permission_name = 'read_only', account_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (2, 'Bob', 'bob@example.com', 'Science') ON DUPLICATE KEY UPDATE student_name = 'Bob', student_email = 'bob@example.com', student_course = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (102, 'Checking', 3000.00, 2) ON DUPLICATE KEY UPDATE account_type = 'Checking', account_balance = 3000.00, student_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (202, 'bob', 'secret456', 102) ON DUPLICATE KEY UPDATE username = 'bob', password = 'secret456', account_id = 102;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (302, 'write_access', 102) ON DUPLICATE KEY UPDATE permission_name = 'write_access', account_id = 102;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (3, 'Charlie', 'charlie@example.com', 'History') ON DUPLICATE KEY UPDATE student_name = 'Charlie', student_email = 'charlie@example.com', student_course = 'History';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (103, 'Investment', 10000.00, 3) ON DUPLICATE KEY UPDATE account_type = 'Investment', account_balance = 10000.00, student_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (203, 'charlie', 'topsecret789', 103) ON DUPLICATE KEY UPDATE username = 'charlie', password = 'topsecret789', account_id = 103;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (303, 'admin', 103) ON DUPLICATE KEY UPDATE permission_name = 'admin', account_id = 103;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (4, 'David', 'david@example.com', 'Computer Science') ON DUPLICATE KEY UPDATE student_name = 'David', student_email = 'david@example.com', student_course = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (104, 'Credit Card', 500.00, 4) ON DUPLICATE KEY UPDATE account_type = 'Credit Card', account_balance = 500.00, student_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (204, 'david', 'password321', 104) ON DUPLICATE KEY UPDATE username = 'david', password = 'password321', account_id = 104;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (304, 'read_write', 104) ON DUPLICATE KEY UPDATE permission_name = 'read_write', account_id = 104;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Students (student_id, student_name, student_email, student_course) VALUES (5, 'Eve', 'eve@example.com', 'Arts') ON DUPLICATE KEY UPDATE student_name = 'Eve', student_email = 'eve@example.com', student_course = 'Arts';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Accounts (account_id, account_type, account_balance, student_id) VALUES (105, 'Loan', 2000.00, 5) ON DUPLICATE KEY UPDATE account_type = 'Loan', account_balance = 2000.00, student_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO LoginCredentials (credential_id, username, password, account_id) VALUES (205, 'eve', 'passphrase123', 105) ON DUPLICATE KEY UPDATE username = 'eve', password = 'passphrase123', account_id = 105;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, account_id) VALUES (305, 'read_only', 105) ON DUPLICATE KEY UPDATE permission_name = 'read_only', account_id = 105;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'Alice', 18, 12) ON DUPLICATE KEY UPDATE student_name='Alice', age=18, grade_level=12;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO accounts (account_id, student_id, username, password) VALUES (1, 1, 'alice1', 'password123') ON DUPLICATE KEY UPDATE student_id=1, username='alice1', password='password123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, student_id, permission_type) VALUES (1, 1, 'admin') ON DUPLICATE KEY UPDATE student_id=1, permission_type='admin';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor_id) VALUES (1, 'Math', 1) ON DUPLICATE KEY UPDATE course_name='Math', instructor_id=1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO instructors (instructor_id, instructor_name, department) VALUES (1, 'John Doe', 'Mathematics') ON DUPLICATE KEY UPDATE instructor_name='John Doe', department='Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, age, grade_level) VALUES (2, 'Bob', 19, 11) ON DUPLICATE KEY UPDATE student_name='Bob', age=19, grade_level=11;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO accounts (account_id, student_id, username, password) VALUES (2,2, 'bob2', 'secured123') ON DUPLICATE KEY UPDATE student_id=2, username='bob2', password='secured123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, student_id, permission_type) VALUES (2, 2, 'user') ON DUPLICATE KEY UPDATE student_id=2, permission_type='user';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor_id) VALUES (2, 'English', 2) ON DUPLICATE KEY UPDATE course_name='English', instructor_id=2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO instructors (instructor_id, instructor_name, department) VALUES (2, 'Jane Smith', 'English') ON DUPLICATE KEY UPDATE instructor_name='Jane Smith', department='English';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, age, grade_level) VALUES (3, 'Charlie', 20, 10) ON DUPLICATE KEY UPDATE student_name='Charlie', age=20, grade_level=10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO accounts (account_id, student_id, username, password) VALUES (3, 3, 'charlie3', 'pass123') ON DUPLICATE KEY UPDATE student_id=3, username='charlie3', password='pass123';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, student_id, permission_type) VALUES (3, 3, 'user') ON DUPLICATE KEY UPDATE student_id=3, permission_type='user';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor_id) VALUES (3, 'Science', 3) ON DUPLICATE KEY UPDATE course_name='Science', instructor_id=3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO instructors (instructor_id, instructor_name, department) VALUES (3, 'Alice Johnson', 'Science') ON DUPLICATE KEY UPDATE instructor_name='Alice Johnson', department='Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, age, grade_level) VALUES (4, 'David', 21, 9) ON DUPLICATE KEY UPDATE student_name='David', age=21, grade_level=9;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO accounts (account_id, student_id, username, password) VALUES (4, 4, 'david4', 'davidpass') ON DUPLICATE KEY UPDATE student_id=4, username='david4', password='davidpass';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, student_id, permission_type) VALUES (4, 4, 'user') ON DUPLICATE KEY UPDATE student_id=4, permission_type='user';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor_id) VALUES (4, 'History', 4) ON DUPLICATE KEY UPDATE course_name='History', instructor_id=4;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO instructors (instructor_id, instructor_name, department) VALUES (4, 'Mark Thompson', 'History') ON DUPLICATE KEY UPDATE instructor_name='Mark Thompson', department='History';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 18, 12) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 18, grade_level = 12",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nUPSERT INTO accounts (account_id, student_id, username, password) VALUES (101, 1, 'johndoe101', 'password123') ON DUPLICATE KEY UPDATE student_id = 1, username = 'johndoe101', password = 'password123'",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, student_id, permission_type) VALUES (201, 1, 'read-write') ON DUPLICATE KEY UPDATE student_id = 1, permission_type = 'read-write'",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nUPSERT INTO courses (course_id, course_name, instructor_id) VALUES (301, 'Mathematics', 501) ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor_id = 501",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nUPSERT INTO instructors (instructor_id, instructor_name, department) VALUES (501, 'Professor Smith', 'Math') ON DUPLICATE KEY UPDATE instructor_name = 'Professor Smith', department = 'Math'"
]