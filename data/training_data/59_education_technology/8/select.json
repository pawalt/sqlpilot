[
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, full_name FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT email FROM student_accounts WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE email = 'example@example.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE account_created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM student_accounts WHERE full_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE password = 'securepassword';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(student_id) FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(account_created_at) FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT full_name FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts ORDER BY full_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts ORDER BY account_created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE student_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE student_id BETWEEN 1 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE account_created_at BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, email FROM student_accounts WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email, account_created_at FROM student_accounts WHERE account_created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts ORDER BY full_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE student_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM student_accounts WHERE email LIKE '%@domain.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT full_name) AS total_students FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE full_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) AS avg_student_id FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM student_accounts WHERE account_created_at > '2022-01-01' AND email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, COUNT(email) AS total_emails FROM student_accounts GROUP BY full_name;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_accounts, DATE(account_created_at) AS creation_date FROM student_accounts GROUP BY creation_date;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(student_id) AS max_student_id, MIN(student_id) AS min_student_id FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE account_created_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM student_accounts ORDER BY account_created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) AS avg_student_id, COUNT(*) AS total_students FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, email FROM student_accounts WHERE email NOT LIKE '%@test.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT full_name, DATE(account_created_at) AS creation_date FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    full_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    account_created_at TIMESTAMP NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE full_name LIKE '%son%' OR full_name LIKE '%ley%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, student_email FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT permission_name FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT permission_name, permission_level FROM permissions WHERE permission_level > 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, student_email FROM students WHERE student_email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY student_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM permissions ORDER BY permission_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(student_id) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(permission_level) FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(permission_level) FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(permission_level) FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT permission_level FROM permissions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT student_name) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_email='example@email.com';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, student_email FROM students WHERE student_id = 1001;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, student_email FROM students WHERE student_id <> 1001;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_id BETWEEN 1001 AND 1010;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE '%son';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, student_email FROM students WHERE student_email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name = 'John' AND student_email = 'john@example.com';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name = 'Mary' OR student_email LIKE '%@yahoo.com';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, student_email FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id WHERE permissions.permission_level = 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, permission_name FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id WHERE student_name = 'Alice' OR permission_name = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id IN (SELECT permission_id FROM permissions WHERE permission_level = 3);",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id NOT IN (SELECT permission_id FROM permissions WHERE permission_level = 1);",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS permission_count FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(permission_level) AS avg_permission_level FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id GROUP BY student_name HAVING AVG(permission_level) > 1.5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(permission_level) AS max_permission_level FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(permission_level) AS min_permission_level FROM students INNER JOIN permissions ON students.student_id = permissions.permission_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS student_count FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  student_email VARCHAR(50) UNIQUE,\n  student_password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL,\n  permission_level INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT permission_name, SUM(permission_level) AS total_permission_level FROM permissions GROUP BY permission_name HAVING SUM(permission_level) > 10;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name AS name, department AS dept FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM login_credentials;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, username FROM login_credentials;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, student_id, username FROM login_credentials;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM access_permissions;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, permission_type FROM access_permissions;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, permission_type AS access_type FROM access_permissions;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts WHERE enrollment_year = 2021;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts WHERE department = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM login_credentials WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, username FROM login_credentials WHERE student_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM access_permissions WHERE permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, enrollment_year FROM student_accounts WHERE department LIKE '%ngineering%';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, enrollment_year FROM student_accounts ORDER BY enrollment_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE enrollment_year >= 2019 AND enrollment_year <= 2021;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, enrollment_year FROM student_accounts WHERE department IN ('Computer Science', 'Electrical Engineering');",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM login_credentials WHERE username IN ('john_doe', 'jane_smith');",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM student_accounts WHERE enrollment_year > 2018;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts WHERE department = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_year FROM student_accounts WHERE department = 'Engineering' ORDER BY enrollment_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, department FROM student_accounts WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_year FROM student_accounts WHERE enrollment_year BETWEEN 2015 AND 2017;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_accounts;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts ORDER BY student_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, department, enrollment_year FROM student_accounts WHERE department IN ('Mathematics', 'Physics');",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_year FROM student_accounts WHERE student_name NOT LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department FROM student_accounts WHERE LENGTH(department) > 10;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, username FROM login_credentials WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT login_id, username FROM login_credentials WHERE username LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT permission_id, permission_type FROM access_permissions WHERE permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, username, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id WHERE permission_type = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id LEFT JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id RIGHT JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id INNER JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id;",
  "### TABLEDATA\n\nCREATE TABLE student_accounts (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    department VARCHAR(50),\n    enrollment_year INT\n);\n\nCREATE TABLE login_credentials (\n    login_id INT PRIMARY KEY,\n    student_id INT REFERENCES student_accounts(student_id),\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE access_permissions (\n    permission_id INT PRIMARY KEY,\n    login_id INT REFERENCES login_credentials(login_id),\n    permission_type VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, department, permission_type FROM student_accounts JOIN login_credentials ON student_accounts.student_id = login_credentials.student_id FULL JOIN access_permissions ON login_credentials.login_id = access_permissions.login_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_email, student_course FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT account_type FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT account_balance FROM Accounts;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM LoginCredentials;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT username FROM LoginCredentials;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT permission_name FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_balance FROM Students INNER JOIN Accounts ON Students.student_id = Accounts.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, username FROM Students INNER JOIN Accounts ON Students.student_id = Accounts.student_id INNER JOIN LoginCredentials ON Accounts.account_id = LoginCredentials.account_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, permission_name FROM Students INNER JOIN Accounts ON Students.student_id = Accounts.student_id INNER JOIN Permissions ON Accounts.account_id = Permissions.account_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_type, permission_name FROM Students INNER JOIN Accounts ON Students.student_id = Accounts.student_id INNER JOIN Permissions ON Accounts.account_id = Permissions.account_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE student_course = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name FROM Students WHERE student_email LIKE '%@gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT account_balance FROM Accounts WHERE account_type = 'Savings';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT username FROM LoginCredentials WHERE password = 'password123';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT permission_name FROM Permissions WHERE account_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_balance FROM Students INNER JOIN Accounts ON Students.student_id = Accounts.student_id WHERE account_balance > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, student_email FROM Students WHERE student_course = 'Computer Science'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE student_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_type, account_balance FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, username, permission_name FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id JOIN LoginCredentials ON Accounts.account_id = LoginCredentials.account_id JOIN Permissions ON Accounts.account_id = Permissions.account_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_id, account_type, account_balance FROM Accounts WHERE account_balance > 1000",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT account_id, permission_name FROM Accounts JOIN Permissions ON Accounts.account_id = Permissions.account_id",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, username FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id JOIN LoginCredentials ON Accounts.account_id = LoginCredentials.account_id WHERE username = 'admin'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, student_email FROM Students WHERE student_id IN (SELECT student_id FROM Accounts WHERE account_balance > 5000)",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_type, account_balance FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id ORDER BY account_balance DESC",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT AVG(account_balance) AS average_balance FROM Accounts WHERE account_type = 'Savings' GROUP BY account_type",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(student_id) AS total_students FROM Students",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT MAX(account_balance) AS highest_balance FROM Accounts",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT MIN(account_balance) AS lowest_balance FROM Accounts",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT(account_type) FROM Accounts",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_balance FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id WHERE account_balance BETWEEN 1000 AND 5000",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT AVG(account_balance) AS average_balance, account_type FROM Accounts GROUP BY account_type HAVING AVG(account_balance) > 2000",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, permission_name FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id JOIN Permissions ON Accounts.account_id = Permissions.account_id WHERE permission_name = 'Admin'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, account_balance FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id WHERE account_type = 'Checking'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT student_name, username, password FROM Students JOIN Accounts ON Students.student_id = Accounts.student_id JOIN LoginCredentials ON Accounts.account_id = LoginCredentials.account_id WHERE username = 'user123' AND password = 'password123'",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(account_id) AS total_accounts, account_type FROM Accounts GROUP BY account_type ORDER BY total_accounts DESC LIMIT 3",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    student_email VARCHAR(255),\n    student_course VARCHAR(100)\n);\n\n\nCREATE TABLE Accounts (\n    account_id INT PRIMARY KEY,\n    account_type VARCHAR(50),\n    account_balance DECIMAL(10, 2),\n    student_id INT,\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);\n\n\nCREATE TABLE LoginCredentials (\n    credential_id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(255),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(100),\n    account_id INT,\n    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)\n);\n\n### STATEMENT\n\nSELECT SUM(account_balance) AS total_balance FROM Accounts",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, age FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, grade_level FROM students WHERE age > 18;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM accounts;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT username FROM accounts WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, permission_type FROM students JOIN permissions ON students.student_id = permissions.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT course_name, instructor_name FROM courses JOIN instructors ON courses.instructor_id = instructors.instructor_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM students WHERE age BETWEEN 18 AND 21;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT course_name FROM courses WHERE instructor_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, instructor_name FROM students JOIN courses ON students.student_id = courses.instructor_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT account_id, student_id, username FROM accounts WHERE password != 'admin';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY age DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, age FROM students WHERE grade_level = 12;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM instructors WHERE department = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT MAX(age) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) FROM permissions GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT AVG(age) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT course_name, student_name FROM courses JOIN students ON courses.instructor_id = students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM students WHERE grade_level = 10",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, age FROM students WHERE age > 18",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM accounts JOIN students ON accounts.student_id = students.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students JOIN courses ON students.student_id = courses.instructor_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, department FROM students JOIN instructors ON students.instructor_id = instructors.instructor_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM permissions WHERE permission_type = 'admin'",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT account_id, student_name FROM accounts JOIN students ON accounts.student_id = students.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_id, account_id FROM students LEFT JOIN accounts ON students.student_id = accounts.student_id LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM courses WHERE instructor_id IN (SELECT instructor_id FROM instructors WHERE department = 'Math')",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(255) NOT NULL,\n  age INT,\n  grade_level INT\n)\n\nCREATE TABLE accounts (\n  account_id INT PRIMARY KEY,\n  student_id INT,\n  username VARCHAR(50) UNIQUE,\n  password VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE permissions (\n  permission_id INT PRIMARY KEY,\n  student_id INT,\n  permission_type VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(255) NOT NULL,\n  instructor_id INT\n)\n\nCREATE TABLE instructors (\n  instructor_id INT PRIMARY KEY,\n  instructor_name VARCHAR(255) NOT NULL,\n  department VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students LEFT JOIN courses ON students.student_id = courses.instructor_id"
]