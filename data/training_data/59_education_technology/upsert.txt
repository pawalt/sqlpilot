<t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>UPSERT INTO students (student_id, student_name, grade_level, subjects) VALUES (1, 'Alice', 10, ['Math', 'Science'])</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>upsert into students (student_id, student_name, grade_level, subjects) values (1, 'alice', 10, ['math', 'science'])</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>UPSERT INTO students (student_id, student_name, grade_level, subjects) VALUES (2, 'Bob', 11, ['History', 'English'])</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>upsert into students (student_id, student_name, grade_level, subjects) values (2, 'bob', 11, ['history', 'english'])</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>UPSERT INTO students (student_id, student_name, grade_level, subjects) VALUES (3, 'Charlie', 9, ['Art', 'Music'])</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT, subjects ARRAY<STRING> );</t><stat>upsert into students (student_id, student_name, grade_level, subjects) values (3, 'charlie', 9, ['art', 'music'])</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>UPSERT INTO students (student_id, student_name, grade_level) VALUES (1, 'Alice', 10) ON DUPLICATE KEY UPDATE student_name='Alice', grade_level=10;</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>upsert into students (student_id, student_name, grade_level) values (1, 'alice', 10) on duplicate key update student_name='alice', grade_level=10;</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>UPSERT INTO students (student_id, student_name, grade_level) VALUES (1, 'Alice', 10) ON DUPLICATE KEY UPDATE student_name='Alice', grade_level=10;</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>upsert into students (student_id, student_name, grade_level) values (1, 'alice', 10) on duplicate key update student_name='alice', grade_level=10;</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>UPSERT INTO courses (course_id, course_name, course_description) VALUES (101, 'Mathematics', 'Introduction to Algebra') ON DUPLICATE KEY UPDATE course_name='Mathematics', course_description='Introduction to Algebra';</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>upsert into courses (course_id, course_name, course_description) values (101, 'mathematics', 'introduction to algebra') on duplicate key update course_name='mathematics', course_description='introduction to algebra';</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>UPSERT INTO courses (course_id, course_name, course_description) VALUES (101, 'Mathematics', 'Introduction to Algebra') ON DUPLICATE KEY UPDATE course_name='Mathematics', course_description='Introduction to Algebra';</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>upsert into courses (course_id, course_name, course_description) values (101, 'mathematics', 'introduction to algebra') on duplicate key update course_name='mathematics', course_description='introduction to algebra';</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>UPSERT INTO students (student_id, student_name, grade_level) VALUES (2, 'Bob', 11) ON DUPLICATE KEY UPDATE student_name='Bob', grade_level=11;</stat><divider><t>CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);

CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));</t><stat>upsert into students (student_id, student_name, grade_level) values (2, 'bob', 11) on duplicate key update student_name='bob', grade_level=11;</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>UPSERT INTO students (student_id, student_name, grade_level) VALUES (2, 'Bob', 11) ON DUPLICATE KEY UPDATE student_name='Bob', grade_level=11;</stat><divider><t>CREATE TABLE IF NOT EXISTS courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), course_description VARCHAR(255));

CREATE TABLE IF NOT EXISTS students (student_id INT PRIMARY KEY, student_name VARCHAR(50), grade_level INT);</t><stat>upsert into students (student_id, student_name, grade_level) values (2, 'bob', 11) on duplicate key update student_name='bob', grade_level=11;</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO students (student_id, student_name, age, grade_level) VALUES (1, 'John Doe', 20, 'Sophomore') ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, grade_level = 'Sophomore';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into students (student_id, student_name, age, grade_level) values (1, 'john doe', 20, 'sophomore') on duplicate key update student_name = 'john doe', age = 20, grade_level = 'sophomore';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO courses (course_id, course_name, instructor, schedule_time) VALUES (101, 'Mathematics', 'Prof. Smith', '09:00:00') ON DUPLICATE KEY UPDATE course_name = 'Mathematics', instructor = 'Prof. Smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into courses (course_id, course_name, instructor, schedule_time) values (101, 'mathematics', 'prof. smith', '09:00:00') on duplicate key update course_name = 'mathematics', instructor = 'prof. smith', schedule_time = '09:00:00';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (501, 1, 101, '2022-09-15') ON DUPLICATE KEY UPDATE student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), instructor VARCHAR(50), schedule_time TIME)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(50), age INT, grade_level VARCHAR(10))</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (501, 1, 101, '2022-09-15') on duplicate key update student_id = 1, course_id = 101, enrollment_date = '2022-09-15';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO students (student_id, student_name, student_age, student_grade) VALUES (1, 'Alice', 20, 'A') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_age = 20, student_grade = 'A';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into students (student_id, student_name, student_age, student_grade) values (1, 'alice', 20, 'a') on conflict (student_id) do update set student_name = 'alice', student_age = 20, student_grade = 'a';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO courses (course_id, course_name, course_description, course_enrollment_limit) VALUES (1, 'Math', 'Mathematics Course', 30) ON CONFLICT (course_id) DO UPDATE SET course_name = 'Math', course_description = 'Mathematics Course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into courses (course_id, course_name, course_description, course_enrollment_limit) values (1, 'math', 'mathematics course', 30) on conflict (course_id) do update set course_name = 'math', course_description = 'mathematics course', course_enrollment_limit = 30;</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>UPSERT INTO enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (1, 1, 1, '2022-10-01') ON CONFLICT (enrollment_id) DO UPDATE SET student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE assignments ( assignment_id INT PRIMARY KEY, course_id INT, assignment_name STRING NOT NULL, assignment_deadline DATE, assignment_max_score INT, FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TIMESTAMP, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id) );

CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name STRING NOT NULL, course_description STRING, course_enrollment_limit INT );

CREATE TABLE students ( student_id INT PRIMARY KEY, student_name STRING NOT NULL, student_age INT, student_grade STRING );</t><stat>upsert into enrollments (enrollment_id, student_id, course_id, enrollment_date) values (1, 1, 1, '2022-10-01') on conflict (enrollment_id) do update set student_id = 1, course_id = 1, enrollment_date = '2022-10-01';</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO students (student_id, student_name, age, school_id) VALUES (1, 'John Doe', 20, 1) ON DUPLICATE KEY UPDATE student_name = 'John Doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into students (student_id, student_name, age, school_id) values (1, 'john doe', 20, 1) on duplicate key update student_name = 'john doe', age = 20, school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO teachers (teacher_id, teacher_name, subject, school_id) VALUES (1, 'Jane Smith', 'Mathematics', 1) ON DUPLICATE KEY UPDATE teacher_name = 'Jane Smith', subject = 'Mathematics', school_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into teachers (teacher_id, teacher_name, subject, school_id) values (1, 'jane smith', 'mathematics', 1) on duplicate key update teacher_name = 'jane smith', subject = 'mathematics', school_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) </t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>INSERT INTO courses (course_id, course_name, credit_hours, teacher_id) VALUES (1, 'Algebra 101', 3, 1) ON DUPLICATE KEY UPDATE course_name = 'Algebra 101', credit_hours = 3, teacher_id = 1</stat><divider><t>CREATE TABLE attendance (attendance_id INT PRIMARY KEY, student_id INT, course_id INT, date DATE)

CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255)) 

CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), credit_hours INT, teacher_id INT) 

CREATE TABLE teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255), school_id INT) 

CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), age INT, school_id INT)</t><stat>insert into courses (course_id, course_name, credit_hours, teacher_id) values (1, 'algebra 101', 3, 1) on duplicate key update course_name = 'algebra 101', credit_hours = 3, teacher_id = 1</stat>