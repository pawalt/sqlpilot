[
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT engagement_score FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT behavior_type, engagement_score FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE behavior_type = 'Positive';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE engagement_score > 80;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE student_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(engagement_score) FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(engagement_score) FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(engagement_score) FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM StudentBehaviorMonitoring;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT behavior_type, COUNT(*) FROM StudentBehaviorMonitoring GROUP BY behavior_type;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT behavior_type, AVG(engagement_score) FROM StudentBehaviorMonitoring GROUP BY behavior_type;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring ORDER BY engagement_score DESC;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring ORDER BY engagement_score ASC;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score > 80;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE student_id = 456 AND intervention_needed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id = 789 AND behavior_type = 'Disruptive';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score < 60;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type LIKE '%Positive%';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE behavior_type IN ('Positive Attitude', 'Negative Attitude');",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE intervention_needed = TRUE AND behavior_type = 'Disruptive';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id = 234 OR behavior_type = 'Absenteeism';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score < 70 AND behavior_type = 'Disruptive';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE engagement_score BETWEEN 70 AND 90;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score >= 80 AND intervention_needed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type = 'Positive Attitude' OR intervention_needed = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id IN (567, 890);",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, engagement_score FROM StudentBehaviorMonitoring WHERE behavior_type NOT LIKE '%Negative%';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score > 50 AND behavior_type = 'Positive Attitude';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM StudentBehaviorMonitoring WHERE student_id = 123 AND intervention_needed = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type FROM StudentBehaviorMonitoring WHERE engagement_score < 70 OR behavior_type = 'Absenteeism';",
  "### TABLEDATA\n\nCREATE TABLE StudentBehaviorMonitoring (\n    student_id INT,\n    behavior_type VARCHAR(50),\n    engagement_score INT,\n    intervention_needed BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, intervention_needed FROM StudentBehaviorMonitoring WHERE engagement_score BETWEEN 60 AND 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, enrollment_date, engagement_score FROM students WHERE engagement_score > 50;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT behavior_id, student_id, behavior_type FROM student_behavior;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT behavior_id, behavior_date, description FROM student_behavior WHERE behavior_type='positive';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, behavior_type, behavior_date FROM student_behavior WHERE student_id=5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM students ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT behavior_type, COUNT(*) FROM student_behavior GROUP BY behavior_type;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(engagement_score) FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(engagement_score) FROM students GROUP BY student_id HAVING SUM(engagement_score) > 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type, COUNT(*) FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name, behavior_type;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_date > '2022-01-01' AND enrollment_date < '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_behavior WHERE description ILIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(engagement_score) AS avg_score FROM students GROUP BY student_id HAVING AVG(engagement_score) > 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(engagement_score) AS max_score FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(engagement_score) AS min_score FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'A%' ORDER BY enrollment_date DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type = 'positive'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(engagement_score) AS avg_score FROM students GROUP BY student_id HAVING COUNT(*) > 3",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(behavior_id) AS behavior_count FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name HAVING COUNT(behavior_id) > 2",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-06-30'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(engagement_score) AS avg_score FROM students WHERE engagement_score > 50 GROUP BY student_name ORDER BY avg_score DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_date > '2022-07-01'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type, description FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE description ILIKE '%excited%'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(engagement_score) AS max_score FROM students GROUP BY student_name ORDER BY max_score DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type IN ('positive', 'neutral')",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type, behavior_date FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE behavior_type = 'negative' AND behavior_date >= '2022-09-01'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(behavior_id) AS behavior_count FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name ORDER BY behavior_count DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(engagement_score) AS avg_score FROM students WHERE enrollment_date < '2022-04-01' GROUP BY student_name HAVING AVG(engagement_score) < 60",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(engagement_score) AS min_score FROM students WHERE engagement_score IS NOT NULL GROUP BY student_name ORDER BY min_score ASC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, behavior_type, behavior_date FROM students LEFT JOIN student_behavior ON students.student_id = student_behavior.student_id WHERE student_behavior.student_id IS NULL",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(engagement_score) AS max_score FROM students WHERE enrollment_date < '2022-08-01' GROUP BY student_name ORDER BY max_score DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(engagement_score) AS average_score FROM students WHERE student_id NOT IN (SELECT student_id FROM student_behavior)",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(engagement_score) AS max_score FROM students WHERE student_id IN (SELECT student_id FROM student_behavior WHERE behavior_type = 'negative')",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM students WHERE student_id IN (SELECT student_id FROM student_behavior WHERE behavior_date > '2022-10-01')",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE NOT NULL,\n    engagement_score FLOAT\n);\n\n\nCREATE TABLE student_behavior (\n    behavior_id SERIAL PRIMARY KEY,\n    student_id INT REFERENCES students(student_id),\n    behavior_type VARCHAR(20) NOT NULL,\n    behavior_date TIMESTAMP NOT NULL,\n    description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(DISTINCT behavior_type) AS unique_behaviors FROM students JOIN student_behavior ON students.student_id = student_behavior.student_id GROUP BY student_name ORDER BY unique_behaviors DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, student_email FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT interaction_id, student_id, interaction_type FROM interactions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM interventions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT intervention_id, student_id, intervention_type FROM interventions;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, class_id FROM students WHERE class_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, class_id, enrollment_date FROM students ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_date, interaction_type, interaction_notes FROM students JOIN interactions ON students.student_id = interactions.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_date, intervention_type, intervention_description FROM students JOIN interventions ON students.student_id = interventions.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_type, intervention_type FROM students JOIN interactions ON students.student_id = interactions.student_id JOIN interventions ON students.student_id = interventions.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_date, intervention_date FROM students JOIN interactions ON students.student_id = interactions.student_id JOIN interventions ON students.student_id = interventions.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_type, intervention_description FROM students JOIN interventions ON students.student_id = interventions.student_id WHERE intervention_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(interaction_id) AS num_interactions FROM interactions GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(interaction_id) AS avg_interaction_id FROM interactions GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(interaction_date) AS latest_interaction_date FROM interactions GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, interaction_type, COUNT(*) AS num_interactions FROM interactions GROUP BY student_id, interaction_type;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT intervention_type, COUNT(*) AS num_interventions FROM interventions GROUP BY intervention_type;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_type, intervention_date FROM students JOIN interventions ON students.student_id = interventions.student_id WHERE intervention_type = 'Counseling';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE class_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM students WHERE student_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_date, interaction_type, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(class_id) AS average_class_id FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(enrollment_date) AS latest_enrollment_date FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_type, intervention_type FROM students s JOIN interactions i ON s.student_id = i.student_id JOIN interventions v ON s.student_id = v.student_id WHERE s.class_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_interactions FROM interactions GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_type FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE intervention_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_type, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id WHERE interaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_type, intervention_type FROM students s JOIN interactions i ON s.student_id = i.student_id JOIN interventions v ON s.student_id = v.student_id WHERE interaction_date < intervention_date;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name AS name, class_id AS class_number FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, intervention_date, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS total_interventions FROM students s JOIN interventions v ON s.student_id = v.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, interaction_date, interaction_notes FROM interactions WHERE interaction_type = 'Meeting';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_type, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE student_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT intervention_type, COUNT(*) AS total FROM interventions GROUP BY intervention_type HAVING COUNT(*) > 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, intervention_date, intervention_description FROM students s JOIN interventions v ON s.student_id = v.student_id WHERE s.class_id = 2 ORDER BY intervention_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_email VARCHAR(100),\n    class_id INT,\n    enrollment_date DATE\n);\n\nCREATE TABLE interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    interaction_date TIMESTAMP,\n    interaction_type VARCHAR(50),\n    interaction_notes TEXT\n);\n\nCREATE TABLE interventions (\n    intervention_id INT PRIMARY KEY,\n    student_id INT,\n    intervention_date DATE,\n    intervention_type VARCHAR(50),\n    intervention_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, interaction_notes FROM students s JOIN interactions i ON s.student_id = i.student_id WHERE student_id NOT IN (SELECT student_id FROM interventions);",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, student_age FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM Students WHERE student_age > 20;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, course_teacher FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT assignment_title, assignment_due_date FROM Assignments WHERE course_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM BehaviorLogs;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT behavior_type, behavior_description FROM BehaviorLogs WHERE student_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, behavior_type FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, assignment_title FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, Assignments.assignment_title FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, MAX(assignment_score) AS max_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, AVG(assignment_score) AS avg_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT course_id) AS num_courses FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, COUNT(assignment_id) AS num_assignments FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT behavior_type, COUNT(*) AS num_logs FROM BehaviorLogs GROUP BY behavior_type;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, SUM(assignment_score) AS total_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id GROUP BY Students.student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, MIN(assignment_score) AS min_score FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM Students WHERE student_age > 18;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, course_teacher FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_score >= 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, Courses.course_name, assignment_title FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE assignment_score < 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, behavior_type, behavior_description FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE behavior_type = 'positive';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Assignments.assignment_title, Assignments.assignment_due_date FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Students.student_age > 20;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, BehaviorLogs.behavior_type, BehaviorLogs.behavior_description, BehaviorLogs.log_timestamp FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE Students.student_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, course_description, course_teacher FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM Students WHERE student_age < 18;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_due_date < CURRENT_DATE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Courses.course_teacher = 'Mr. Smith';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, behavior_type, behavior_description FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE behavior_type = 'negative';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Assignments.assignment_title, Assignments.assignment_due_date FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE Students.student_age < 25;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT Students.student_name, BehaviorLogs.behavior_type, BehaviorLogs.behavior_description, BehaviorLogs.log_timestamp FROM Students JOIN BehaviorLogs ON Students.student_id = BehaviorLogs.student_id WHERE Students.student_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT course_name, course_description, course_teacher FROM Courses WHERE course_teacher = 'Ms. Johnson';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM Students WHERE student_grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT assignment_title, assignment_due_date, assignment_score FROM Assignments WHERE assignment_score BETWEEN 80 AND 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_age INT,\n    student_grade VARCHAR(10)\n)\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_teacher VARCHAR(50)\n)\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    student_id INT,\n    assignment_title VARCHAR(100),\n    assignment_due_date DATE,\n    assignment_score INT\n)\n\nCREATE TABLE BehaviorLogs (\n    log_id INT PRIMARY KEY,\n    student_id INT,\n    behavior_type VARCHAR(20),\n    behavior_description TEXT,\n    log_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, assignment_title, assignment_score FROM Students JOIN Assignments ON Students.student_id = Assignments.student_id JOIN Courses ON Assignments.course_id = Courses.course_id WHERE assignment_score > 95;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, student_grade FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assignment_id, course_id, assignment_name FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, assignment_id, grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, interaction_type FROM Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, last_login FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, course_start_date FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assignment_name, assignment_due_date FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT grade, submission_date FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT interaction_id, interaction_date FROM Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, last_login FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, course_description, course_start_date, course_end_date FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assignment_name, assignment_due_date, total_points FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, assignment_id, grade, submission_date FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT interaction_id, student_id, course_id, interaction_type, interaction_date FROM Interactions;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade FROM Students WHERE student_grade > 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, course_start_date, course_end_date FROM Courses WHERE course_start_date < '2022-01-01' AND course_end_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT assignment_name, total_points FROM Assignments WHERE course_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, assignment_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id WHERE grade < 60;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(total_points) AS max_points FROM Assignments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, MAX(grade) AS highest_grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS total_assignments FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(grade) AS average_grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(total_points) AS total_points FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade, course_name FROM Grades JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY course_name HAVING average_grade > 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, COUNT(assignment_id) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, MAX(total_points) AS highest_points FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Assignments ON Grades.assignment_id = Assignments.assignment_id GROUP BY student_name, course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade, COUNT(*) AS total_grades FROM Grades GROUP BY average_grade;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, AVG(grade) AS average_grade, COUNT(*) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT course_name, MAX(total_points) AS max_points, AVG(grade) AS average_grade FROM Courses JOIN Assignments ON Courses.course_id = Assignments.course_id JOIN Grades ON Assignments.assignment_id = Grades.assignment_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    student_grade INT,\n    last_login TIMESTAMP\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description TEXT,\n    course_start_date DATE,\n    course_end_date DATE\n);\n\n\nCREATE TABLE Assignments (\n    assignment_id INT PRIMARY KEY,\n    course_id INT,\n    assignment_name VARCHAR(50),\n    assignment_due_date DATE,\n    total_points INT\n);\n\n\nCREATE TABLE Grades (\n    student_id INT,\n    course_id INT,\n    assignment_id INT,\n    grade INT,\n    submission_date DATE,\n    PRIMARY KEY (student_id, course_id, assignment_id)\n);\n\n\nCREATE TABLE Interactions (\n    interaction_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    interaction_type VARCHAR(50),\n    interaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, MAX(grade) AS highest_grade, COUNT(assignment_id) AS total_assignments FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id GROUP BY student_name, course_name;"
]