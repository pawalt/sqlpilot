[
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (1, '2022-01-01', 95) ON CONFLICT (student_id) DO UPDATE SET assessment_date = '2022-01-01', assessment_score = 95;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (2, '2022-01-02', 85) ON CONFLICT (student_id) DO UPDATE SET assessment_date = '2022-01-02', assessment_score = 85;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (3, '2022-01-03', 90) ON CONFLICT (student_id) DO UPDATE SET assessment_date = '2022-01-03', assessment_score = 90;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (4, '2022-01-04', 88) ON CONFLICT (student_id) DO UPDATE SET assessment_date = '2022-01-04', assessment_score = 88;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (5, '2022-01-05', 92) ON CONFLICT (student_id) DO UPDATE SET assessment_date = '2022-01-05', assessment_score = 92;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data ...",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (1, '2022-01-01', 85.5) ON DUPLICATE KEY UPDATE assessment_score = 85.5;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (2, '2022-01-02', 78.6) ON DUPLICATE KEY UPDATE assessment_score = 78.6;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (3, '2022-01-03', 92.3) ON DUPLICATE KEY UPDATE assessment_score = 92.3;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (4, '2022-01-04', 67.8) ON DUPLICATE KEY UPDATE assessment_score = 67.8;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (5, '2022-01-05', 88.9) ON DUPLICATE KEY UPDATE assessment_score = 88.9;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (6, '2022-01-06', 75.4) ON DUPLICATE KEY UPDATE assessment_score = 75.4;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (7, '2022-01-07', 90.1) ON DUPLICATE KEY UPDATE assessment_score = 90.1;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (8, '2022-01-08', 82.2) ON DUPLICATE KEY UPDATE assessment_score = 82.2;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (9, '2022-01-09', 79.5) ON DUPLICATE KEY UPDATE assessment_score = 79.5;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (10, '2022-01-10', 86.7) ON DUPLICATE KEY UPDATE assessment_score = 86.7;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (11, '2022-01-11', 94.3) ON DUPLICATE KEY UPDATE assessment_score = 94.3;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (12, '2022-01-12', 71.8) ON DUPLICATE KEY UPDATE assessment_score = 71.8;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (13, '2022-01-13', 83.6) ON DUPLICATE KEY UPDATE assessment_score = 83.6;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (14, '2022-01-14', 89.2) ON DUPLICATE KEY UPDATE assessment_score = 89.2;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (15, '2022-01-15', 76.4) ON DUPLICATE KEY UPDATE assessment_score = 76.4;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (16, '2022-01-16', 91.8) ON DUPLICATE KEY UPDATE assessment_score = 91.8;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (17, '2022-01-17', 77.9) ON DUPLICATE KEY UPDATE assessment_score = 77.9;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (18, '2022-01-18', 84.5) ON DUPLICATE KEY UPDATE assessment_score = 84.5;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (19, '2022-01-19', 73.7) ON DUPLICATE KEY UPDATE assessment_score = 73.7;",
  "### TABLEDATA\n\nCREATE TABLE student_assessment_data (\n  student_id INT PRIMARY KEY,\n  assessment_date DATE,\n  assessment_score FLOAT\n);\n\n### STATEMENT\n\nINSERT INTO student_assessment_data (student_id, assessment_date, assessment_score) VALUES (20, '2022-01-20', 87.1) ON DUPLICATE KEY UPDATE assessment_score = 87.1;",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('989e6246-6ff8-4e6a-bfe5-229f0b4d3d6d', 'John Doe', '2022-03-15', 'Computer Science') ON CONFLICT (student_id) DO UPDATE SET student_name = 'John Doe', enrollment_date = '2022-03-15', major = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('a84ecf13-32d1-4b7c-91b1-51db6c4f6269', '989e6246-6ff8-4e6a-bfe5-229f0b4d3d6d', 95, '2022-05-20', 'Math') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '989e6246-6ff8-4e6a-bfe5-229f0b4d3d6d', score = 95, assessment_date = '2022-05-20', subject = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('0b0e56e5-0f39-45a6-9e70-97a644f04e0d', 'Jane Smith', '2022-04-10', 'Biology') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Jane Smith', enrollment_date = '2022-04-10', major = 'Biology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('488f27f6-f5e1-4742-8eb5-0d0b883ab33e', '0b0e56e5-0f39-45a6-9e70-97a644f04e0d', 88, '2022-06-15', 'Science') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '0b0e56e5-0f39-45a6-9e70-97a644f04e0d', score = 88, assessment_date = '2022-06-15', subject = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nUPSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('5a6e31a3-4c06-428f-bbd8-6821c52e9409', 'Alice Johnson', '2022-03-25', 'Physics') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice Johnson', enrollment_date = '2022-03-25', major = 'P...",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('123e4567-e89b-12d3-a456-426614174000', 'Alice Smith', '2022-01-15', 'Computer Science') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice Smith', enrollment_date = '2022-01-15', major = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('223e4567-e89b-12d3-a456-426614174001', '123e4567-e89b-12d3-a456-426614174000', 85, '2022-02-20', 'Math') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '123e4567-e89b-12d3-a456-426614174000', score = 85, assessment_date = '2022-02-20', subject = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('323e4567-e89b-12d3-a456-426614174002', 'Bob Johnson', '2021-12-10', 'Physics') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob Johnson', enrollment_date = '2021-12-10', major = 'Physics';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('423e4567-e89b-12d3-a456-426614174003', '323e4567-e89b-12d3-a456-426614174002', 78, '2022-03-05', 'Physics') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '323e4567-e89b-12d3-a456-426614174002', score = 78, assessment_date = '2022-03-05', subject = 'Physics';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('523e4567-e89b-12d3-a456-426614174004', 'Eve Brown', '2022-02-05', 'Biology') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Eve Brown', enrollment_date = '2022-02-05', major = 'Biology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('623e4567-e89b-12d3-a456-426614174005', '523e4567-e89b-12d3-a456-426614174004', 92, '2022-01-10', 'Chemistry') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '523e4567-e89b-12d3-a456-426614174004', score = 92, assessment_date = '2022-01-10', subject = 'Chemistry';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('723e4567-e89b-12d3-a456-426614174006', 'Charlie Green', '2021-11-25', 'History') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Charlie Green', enrollment_date = '2021-11-25', major = 'History';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('823e4567-e89b-12d3-a456-426614174007', '723e4567-e89b-12d3-a456-426614174006', 80, '2022-02-15', 'History') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '723e4567-e89b-12d3-a456-426614174006', score = 80, assessment_date = '2022-02-15', subject = 'History';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('923e4567-e89b-12d3-a456-426614174008', 'David White', '2021-10-20', 'Economics') ON CONFLICT (student_id) DO UPDATE SET student_name = 'David White', enrollment_date = '2021-10-20', major = 'Economics';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('a23e4567-e89b-12d3-a456-426614174009', '923e4567-e89b-12d3-a456-426614174008', 88, '2022-01-25', 'Economics') ON CONFLICT (assessment_id) DO UPDATE SET student_id = '923e4567-e89b-12d3-a456-426614174008', score = 88, assessment_date = '2022-01-25', subject = 'Economics';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('b23e4567-e89b-12d3-a456-426614174010', 'Frank Davis', '2021-09-15', 'Sociology') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Frank Davis', enrollment_date = '2021-09-15', major = 'Sociology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('c23e4567-e89b-12d3-a456-426614174011', 'b23e4567-e89b-12d3-a456-426614174010', 76, '2022-03-10', 'Sociology') ON CONFLICT (assessment_id) DO UPDATE SET student_id = 'b23e4567-e89b-12d3-a456-426614174010', score = 76, assessment_date = '2022-03-10', subject = 'Sociology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('d23e4567-e89b-12d3-a456-426614174012', 'Grace Lee', '2022-03-01', 'Psychology') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Grace Lee', enrollment_date = '2022-03-01', major = 'Psychology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('e23e4567-e89b-12d3-a456-426614174013', 'd23e4567-e89b-12d3-a456-426614174012', 90, '2022-02-05', 'Psychology') ON CONFLICT (assessment_id) DO UPDATE SET student_id = 'd23e4567-e89b-12d3-a456-426614174012', score = 90, assessment_date = '2022-02-05', subject = 'Psychology';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('f23e4567-e89b-12d3-a456-426614174014', 'Hannah Taylor', '2021-12-05', 'English') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Hannah Taylor', enrollment_date = '2021-12-05', major = 'English';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('g23e4567-e89b-12d3-a456-426614174015', 'f23e4567-e89b-12d3-a456-426614174014', 82, '2022-01-15', 'Literature') ON CONFLICT (assessment_id) DO UPDATE SET student_id = 'f23e4567-e89b-12d3-a456-426614174014', score = 82, assessment_date = '2022-01-15', subject = 'Literature';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('h23e4567-e89b-12d3-a456-426614174016', 'Ivy Wilson', '2021-11-10', 'Art') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Ivy Wilson', enrollment_date = '2021-11-10', major = 'Art';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('i23e4567-e89b-12d3-a456-426614174017', 'h23e4567-e89b-12d3-a456-426614174016', 95, '2022-03-25', 'Painting') ON CONFLICT (assessment_id) DO UPDATE SET student_id = 'h23e4567-e89b-12d3-a456-426614174016', score = 95, assessment_date = '2022-03-25', subject = 'Painting';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO student (student_id, student_name, enrollment_date, major) VALUES ('j23e4567-e89b-12d3-a456-426614174018', 'Jack Brown', '2021-10-15', 'Music') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Jack Brown', enrollment_date = '2021-10-15', major = 'Music';",
  "### TABLEDATA\n\nCREATE TABLE student (\n    student_id UUID PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    enrollment_date DATE,\n    major VARCHAR(50)\n);\n\nCREATE TABLE assessment (\n    assessment_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student(student_id),\n    score INT NOT NULL,\n    assessment_date DATE,\n    subject VARCHAR(50)\n);\n\n### STATEMENT\n\nINSERT INTO assessment (assessment_id, student_id, score, assessment_date, subject) VALUES ('k23e4567-e89b-12d3-a456-426614174019', 'j23e4567-e89b-12d3-a456-426614174018', 87, '2022-02-10', 'Music Theory') ON CONFLICT (assessment_id) DO UPDATE SET student_id = 'j23e4567-e89b-12d3-a456-426614174018', score = 87, assessment_date = '2022-02-10', subject = 'Music Theory';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (1, 'Alice', '2022-01-01') ON DUPLICATE KEY UPDATE student_name = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (2, 'Bob', '2022-01-15') ON DUPLICATE KEY UPDATE student_name = 'Bob';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (3, 'Charlie', '2022-02-01') ON DUPLICATE KEY UPDATE student_name = 'Charlie';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (4, 'David', '2022-02-15') ON DUPLICATE KEY UPDATE student_name = 'David';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (5, 'Eve', '2022-03-01') ON DUPLICATE KEY UPDATE student_name = 'Eve';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (6, 'Frank', '2022-03-15') ON DUPLICATE KEY UPDATE student_name = 'Frank';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (7, 'Grace', '2022-04-01') ON DUPLICATE KEY UPDATE student_name = 'Grace';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (8, 'Henry', '2022-04-15') ON DUPLICATE KEY UPDATE student_name = 'Henry';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (9, 'Ivy', '2022-05-01') ON DUPLICATE KEY UPDATE student_name = 'Ivy';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (10, 'Jack', '2022-05-15') ON DUPLICATE KEY UPDATE student_name = 'Jack';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (11, 'Kate', '2022-06-01') ON DUPLICATE KEY UPDATE student_name = 'Kate';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (12, 'Liam', '2022-06-15') ON DUPLICATE KEY UPDATE student_name = 'Liam';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (13, 'Mia', '2022-07-01') ON DUPLICATE KEY UPDATE student_name = 'Mia';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (14, 'Nick', '2022-07-15') ON DUPLICATE KEY UPDATE student_name = 'Nick';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (15, 'Olivia', '2022-08-01') ON DUPLICATE KEY UPDATE student_name = 'Olivia';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (16, 'Peter', '2022-08-15') ON DUPLICATE KEY UPDATE student_name = 'Peter';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (17, 'Quinn', '2022-09-01') ON DUPLICATE KEY UPDATE student_name = 'Quinn';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (18, 'Rose', '2022-09-15') ON DUPLICATE KEY UPDATE student_name = 'Rose';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (19, 'Sam', '2022-10-01') ON DUPLICATE KEY UPDATE student_name = 'Sam';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (20, 'Tom', '2022-10-15') ON DUPLICATE KEY UPDATE student_name = 'Tom';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (1, 'Alice', '2021-01-10') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, student_id, assessment_date, score) VALUES (1, 1, '2021-02-15', 90) ON CONFLICT (assessment_id) DO UPDATE SET assessment_date = '2021-02-15', score = 90",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, course_description) VALUES (1, 'Mathematics', 'Basic Math Concepts') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Mathematics', course_description = 'Basic Math Concepts'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (2, 'Bob', '2021-02-05') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, student_id, assessment_date, score) VALUES (2, 2, '2021-03-20', 85) ON CONFLICT (assessment_id) DO UPDATE SET assessment_date = '2021-03-20', score = 85",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, course_description) VALUES (2, 'Science', 'Introduction to Physics') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Science', course_description = 'Introduction to Physics'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (3, 'Charlie', '2021-03-15') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Charlie'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, student_id, assessment_date, score) VALUES (3, 3, '2021-04-25', 95) ON CONFLICT (assessment_id) DO UPDATE SET assessment_date = '2021-04-25', score = 95",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, course_description) VALUES (3, 'History', 'World History') ON CONFLICT (course_id) DO UPDATE SET course_name = 'History', course_description = 'World History'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (4, 'David', '2021-04-20') ON CONFLICT (student_id) DO UPDATE SET student_name = 'David'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, student_id, assessment_date, score) VALUES (4, 4, '2021-05-10', 88) ON CONFLICT (assessment_id) DO UPDATE SET assessment_date = '2021-05-10', score = 88",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, course_description) VALUES (4, 'English', 'Literature and Grammar') ON CONFLICT (course_id) DO UPDATE SET course_name = 'English', course_description = 'Literature and Grammar'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, enrollment_date) VALUES (5, 'Emily', '2021-05-01') ON CONFLICT (student_id) DO UPDATE SET student_name = 'Emily'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, student_id, assessment_date, score) VALUES (5, 5, '2021-06-15', 92) ON CONFLICT (assessment_id) DO UPDATE SET assessment_date = '2021-06-15', score = 92",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    student_id INT,\n    assessment_date DATE,\n    score INT\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    course_description VARCHAR(255)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, course_description) VALUES (5, 'Music', 'Introduction to Music Theory') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Music', course_description = 'Introduction to Music Theory'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (1, 'John', 'Doe', '1995-08-15') ON CONFLICT (student_id) DO UPDATE SET first_name = 'John', last_name = 'Doe', date_of_birth = '1995-08-15';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor, department) VALUES (101, 'Mathematics', 'Prof. Smith', 'Math') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Mathematics', instructor = 'Prof. Smith', department = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (201, 'Midterm Exam', 101, 100) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Midterm Exam', course_id = 101, max_score = 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (1, 201, 85, '2022-03-10') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = 85, date_taken = '2022-03-10';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (2, 'Jane', 'Smith', '1998-05-20') ON CONFLICT (student_id) DO UPDATE SET first_name = 'Jane', last_name = 'Smith', date_of_birth = '1998-05-20';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor, department) VALUES (102, 'History', 'Prof. Johnson', 'History') ON CONFLICT (course_id) DO UPDATE SET course_name = 'History', instructor = 'Prof. Johnson', department = 'History';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (202, 'Final Exam', 102, 120) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Final Exam', course_id = 102, max_score = 120;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (2, 202, 95, '2022-05-15') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = 95, date_taken = '2022-05-15';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (3, 'Michael', 'Brown', '1997-10-25') ON CONFLICT (student_id) DO UPDATE SET first_name = 'Michael', last_name = 'Brown', date_of_birth = '1997-10-25';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor, department) VALUES (103, 'Science', 'Prof. Adams', 'Science') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Science', instructor = 'Prof. Adams', department = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (203, 'Lab Experiment', 103, 50) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Lab Experiment', course_id = 103, max_score = 50;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (3, 203, 45, '2022-04-20') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = 45, date_taken = '2022-04-20';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (4, 'Emily', 'Johnson', '1999-03-18') ON CONFLICT (student_id) DO UPDATE SET first_name = 'Emily', last_name = 'Johnson', date_of_birth = '1999-03-18';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor, department) VALUES (104, 'English', 'Prof. Miller', 'English') ON CONFLICT (course_id) DO UPDATE SET course_name = 'English', instructor = 'Prof. Miller', department = 'English';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (204, 'Essay Writing', 104, 80) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Essay Writing', course_id = 104, max_score = 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (4, 204, 75, '2022-06-05') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = 75, date_taken = '2022-06-05';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (5, 'Andrew', 'Davis', '1996-12-10') ON CONFLICT (student_id) DO UPDATE SET first_name = 'Andrew', last_name = 'Davis', date_of_birth = '1996-12-10';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO courses (course_id, course_name, instructor, department) VALUES (105, 'Physics', 'Prof. Clark', 'Physics') ON CONFLICT (course_id) DO UPDATE SET course_name = 'Physics', instructor = 'Prof. Clark', department = 'Physics';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (205, 'Physics Experiment', 105, 95) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Physics Experiment', course_id = 105, max_score = 95;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (5, 205, 90, '2022-03-25') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = 90, date_taken = '2022-03-25';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (1, 'John', 'Doe', '2000-05-15') ON CONFLICT (student_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, date_of_birth = excluded.date_of_birth;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, first_name, last_name, date_of_birth) VALUES (2, 'Jane', 'Smith', '1998-10-20') ON CONFLICT (student_id) DO UPDATE SET first_name = excluded.first_name, last_name = excluded.last_name, date_of_birth = excluded.date_of_birth;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO courses (course_id, course_name, instructor, department) VALUES (1, 'Mathematics', 'Prof. Johnson', 'Mathematics') ON CONFLICT (course_id) DO UPDATE SET course_name = excluded.course_name, instructor = excluded.instructor, department = excluded.department;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO courses (course_id, course_name, instructor, department) VALUES (2, 'Physics', 'Prof. Smith', 'Physics') ON CONFLICT (course_id) DO UPDATE SET course_name = excluded.course_name, instructor = excluded.instructor, department = excluded.department;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (1, 'Midterm Exam', 1, 100) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = excluded.assessment_name, course_id = excluded.course_id, max_score = excluded.max_score;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, course_id, max_score) VALUES (2, 'Final Exam', 1, 200) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = excluded.assessment_name, course_id = excluded.course_id, max_score = excluded.max_score;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (1, 1, 90, '2022-03-15') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = excluded.score, date_taken = excluded.date_taken;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (2, 1, 85, '2022-03-15') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = excluded.score, date_taken = excluded.date_taken;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (1, 2, 180, '2022-06-20') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = excluded.score, date_taken = excluded.date_taken;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    date_of_birth DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    instructor VARCHAR(50),\n    department VARCHAR(50)\n);\n\nCREATE TABLE assessments (\n    assessment_id INT PRIMARY KEY,\n    assessment_name VARCHAR(100),\n    course_id INT REFERENCES courses(course_id),\n    max_score INT\n);\n\nCREATE TABLE student_scores (\n    student_id INT REFERENCES students(student_id),\n    assessment_id INT REFERENCES assessments(assessment_id),\n    score INT,\n    date_taken DATE,\n    PRIMARY KEY (student_id, assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_scores (student_id, assessment_id, score, date_taken) VALUES (2, 2, 195, '2022-06-20') ON CONFLICT (student_id, assessment_id) DO UPDATE SET score = excluded.score, date_taken = excluded.date_taken;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_grade) VALUES (1, 'Alice', 10) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_grade = 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_grade) VALUES (2, 'Bob', 11) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob', student_grade = 11;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_grade) VALUES (3, 'Charlie', 9) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Charlie', student_grade = 9;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_grade) VALUES (4, 'David', 12) ON CONFLICT (student_id) DO UPDATE SET student_name = 'David', student_grade = 12;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO students (student_id, student_name, student_grade) VALUES (5, 'Eve', 8) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Eve', student_grade = 8;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (1, 'Quiz 1', '2022-01-15', 50) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Quiz 1', assessment_date = '2022-01-15', total_marks = 50;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (2, 'Quiz 2', '2022-02-15', 60) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Quiz 2', assessment_date = '2022-02-15', total_marks = 60;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (3, 'Midterm', '2022-03-15', 100) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Midterm', assessment_date = '2022-03-15', total_marks = 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (4, 'Final Exam', '2022-05-15', 200) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Final Exam', assessment_date = '2022-05-15', total_marks = 200;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (5, 'Project', '2022-04-15', 150) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Project', assessment_date = '2022-04-15', total_marks = 150;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (1, 1, 45) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 45;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (2, 2, 55) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 55;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (3, 3, 90) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (4, 4, 190) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 190;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (5, 5, 140) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 140;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO grades (grade_id, grade_name) VALUES (1, 'A') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO grades (grade_id, grade_name) VALUES (2, 'B') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'B';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO grades (grade_id, grade_name) VALUES (3, 'C') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'C';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO grades (grade_id, grade_name) VALUES (4, 'D') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'D';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO grades (grade_id, grade_name) VALUES (5, 'E') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'E';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nINSERT INTO student_performance (student_id, grade_id, assessment_id, overall_performance) VALUES (1, 1, 1, 'Excellent') ON CONFLICT (student_id, grade_id, assessment_id) DO UPDATE SET overall_performance = 'Excellent';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_grade) VALUES (1, 'Alice', 85) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Alice', student_grade = 85;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (1, 'Midterm Exam', '2023-03-15', 100) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Midterm Exam', assessment_date = '2023-03-15', total_marks = 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (1, 1, 90) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO grades (grade_id, grade_name) VALUES (1, 'A') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_performance (student_id, grade_id, assessment_id, overall_performance) VALUES (1, 1, 1, 'Excellent') ON CONFLICT (student_id, grade_id, assessment_id) DO UPDATE SET overall_performance = 'Excellent';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_grade) VALUES (2, 'Bob', 75) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Bob', student_grade = 75;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (2, 'Final Exam', '2023-06-30', 150) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Final Exam', assessment_date = '2023-06-30', total_marks = 150;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (2, 2, 140) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 140;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO grades (grade_id, grade_name) VALUES (2, 'B') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'B';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_performance (student_id, grade_id, assessment_id, overall_performance) VALUES (2, 2, 2, 'Good') ON CONFLICT (student_id, grade_id, assessment_id) DO UPDATE SET overall_performance = 'Good';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_grade) VALUES (3, 'Charlie', 90) ON CONFLICT (student_id) DO UPDATE SET student_name = 'Charlie', student_grade = 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (3, 'Lab Assignment', '2023-04-20', 50) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Lab Assignment', assessment_date = '2023-04-20', total_marks = 50;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (3, 3, 45) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 45;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO grades (grade_id, grade_name) VALUES (3, 'A') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_performance (student_id, grade_id, assessment_id, overall_performance) VALUES (3, 3, 3, 'Satisfactory') ON CONFLICT (student_id, grade_id, assessment_id) DO UPDATE SET overall_performance = 'Satisfactory';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO students (student_id, student_name, student_grade) VALUES (4, 'David', 80) ON CONFLICT (student_id) DO UPDATE SET student_name = 'David', student_grade = 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO assessments (assessment_id, assessment_name, assessment_date, total_marks) VALUES (4, 'Project Presentation', '2023-05-15', 200) ON CONFLICT (assessment_id) DO UPDATE SET assessment_name = 'Project Presentation', assessment_date = '2023-05-15', total_marks = 200;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_assessments (student_id, assessment_id, marks_obtained) VALUES (4, 4, 180) ON CONFLICT (student_id, assessment_id) DO UPDATE SET marks_obtained = 180;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO grades (grade_id, grade_name) VALUES (4, 'B') ON CONFLICT (grade_id) DO UPDATE SET grade_name = 'B';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    student_grade INTEGER\n);\n\nCREATE TABLE assessments (\n    assessment_id SERIAL PRIMARY KEY,\n    assessment_name VARCHAR(50) NOT NULL,\n    assessment_date DATE,\n    total_marks INTEGER\n);\n\nCREATE TABLE student_assessments (\n    student_id INTEGER,\n    assessment_id INTEGER,\n    marks_obtained INTEGER,\n    PRIMARY KEY (student_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\nCREATE TABLE grades (\n    grade_id SERIAL PRIMARY KEY,\n    grade_name VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE student_performance (\n    student_id INTEGER,\n    grade_id INTEGER,\n    assessment_id INTEGER,\n    overall_performance VARCHAR(20),\n    PRIMARY KEY (student_id, grade_id, assessment_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (grade_id) REFERENCES grades(grade_id),\n    FOREIGN KEY (assessment_id) REFERENCES assessments(assessment_id)\n);\n\n### STATEMENT\n\nUPSERT INTO student_performance (student_id, grade_id, assessment_id, overall_performance) VALUES (4, 4, 4, 'Very Good') ON CONFLICT (student_id, grade_id, assessment_id) DO UPDATE SET overall_performance = 'Very Good';"
]