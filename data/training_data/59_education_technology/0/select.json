[
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, grade FROM student_info WHERE grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE student_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM student_info WHERE grade >= 70;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT grade FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) FROM student_info GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(grade) FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(grade) FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM student_info ORDER BY grade DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade BETWEEN 70 AND 90;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, SUM(grade) FROM student_info GROUP BY student_id HAVING SUM(grade) > 200;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade IN (80, 85, 90);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name, attendance_record FROM student_info WHERE LENGTH(attendance_record) > 100;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade >= (SELECT AVG(grade) FROM student_info);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name FROM student_info WHERE name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade > 75 ORDER BY grade LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade > 90;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, grade FROM student_info WHERE grade BETWEEN 80 AND 90;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name FROM student_info WHERE attendance_record LIKE '%Present%';",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT student_id, name FROM student_info WHERE attendance_record NOT LIKE '%Absent%';",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(grade) AS highest_grade FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info ORDER BY name ASC;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, COUNT(*) AS total_attendance FROM student_info GROUP BY name;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE name LIKE 'A%' AND grade > 85;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, AVG(grade) AS avg_grade FROM student_info GROUP BY name HAVING AVG(grade) > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE student_id IN (1, 3, 5, 7, 9);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT grade FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade = (SELECT MAX(grade) FROM student_info);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade = (SELECT MIN(grade) FROM student_info);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE grade IN (SELECT DISTINCT grade FROM student_info WHERE grade < 80);",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, LENGTH(name) AS name_length FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT name, CONCAT('Grade: ', grade) AS student_grade FROM student_info;",
  "### TABLEDATA\n\nCREATE TABLE student_info (\n    student_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    grade INT,\n    attendance_record TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM student_info WHERE name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name, grade FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM Students WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade FROM Students WHERE attendance >= 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_id, course_name, instructor FROM Courses WHERE instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_id, course_name, schedule FROM Courses WHERE schedule LIKE '%Monday%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade, attendance FROM Students WHERE grade = 'B' AND attendance < 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade, attendance FROM Students WHERE grade = 'C' OR attendance >= 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name, grade, attendance FROM Students ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_name, instructor, schedule FROM Courses ORDER BY schedule ASC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS num_courses FROM Enrollments GROUP BY student_id HAVING num_courses > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS num_students FROM Enrollments GROUP BY course_id HAVING num_students < 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade, attendance FROM Students WHERE grade = 'A' UNION SELECT student_id, name, grade, attendance FROM Students WHERE attendance >= 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(attendance) AS average_attendance FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT SUM(attendance) AS total_attendance FROM Students WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT MAX(attendance) AS highest_attendance FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(course_id) AS num_students FROM Enrollments INNER JOIN Courses ON Enrollments.course_id = Courses.course_id GROUP BY course_name HAVING num_students > 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, grade, attendance FROM Students WHERE name LIKE '%Tom%' AND grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name, attendance FROM Students WHERE grade = 'B';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(attendance) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Courses WHERE instructor = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT course_name, schedule FROM Courses WHERE instructor = 'Jane Smith';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Students WHERE attendance >= 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name, grade FROM Students WHERE attendance < 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name FROM Students WHERE grade IN ('A', 'B');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT DISTINCT grade FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT * FROM Courses WHERE schedule LIKE '%Mon%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT AVG(attendance) AS avg_attendance FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT instructor, COUNT(*) AS num_courses FROM Courses GROUP BY instructor;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, course_name FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name AS student_name, course_name AS enrolled_course FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, course_name FROM Students LEFT JOIN Courses ON Students.student_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name, course_name FROM Students RIGHT JOIN Courses ON Students.student_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT SUM(attendance) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT name FROM Students ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  grade VARCHAR(10),\n  attendance INT\n);\n\nCREATE TABLE Courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50),\n  instructor VARCHAR(50),\n  schedule VARCHAR(20)\n);\n\n### STATEMENT\n\nSELECT student_id, name FROM Students LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_grade FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_grade FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM grades",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT grade_title, grade_value FROM grades",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM attendance",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT date, present FROM attendance",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_title FROM students JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, present FROM students JOIN attendance ON students.student_id = attendance.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, date, present FROM students JOIN attendance ON students.student_id = attendance.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, date, present FROM students JOIN attendance ON students.student_id = attendance.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, grade_value FROM students JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, student_grade, present FROM students JOIN attendance ON students.student_id = attendance.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_title FROM students JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_title FROM students LEFT JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_title FROM students RIGHT JOIN grades ON students.student_id = grades.student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_grade > 80",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_grade < 50",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM attendance WHERE date = '2023-07-15'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_grade > 75;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_value FROM students JOIN grades ON students.student_id = grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT AVG(grade_value) AS avg_grade_value FROM grades GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(attendance_id) AS total_attendance FROM students JOIN attendance ON students.student_id = attendance.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade_value) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT student_id) AS total_students FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT grade_title, COUNT(grade_id) AS total_grades FROM grades GROUP BY grade_title;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(grade_value) AS max_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(grade_value) AS min_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(grade_value) AS total_grade FROM grades GROUP BY student_id HAVING SUM(grade_value) > 100;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(attendance_id) AS total_attendance FROM students JOIN attendance ON students.student_id = attendance.student_id WHERE present = true GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade_value) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE student_grade > 80 GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(attendance_id) AS total_attendance FROM students JOIN attendance ON students.student_id = attendance.student_id WHERE date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(attendance_id) AS total_attendance FROM students JOIN attendance ON students.student_id = attendance.student_id WHERE attendance_records CONTAINS 'Absent' GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade_value) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE student_name = 'Alice' GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(attendance_id) AS total_attendance FROM students JOIN attendance ON students.student_id = attendance.student_id WHERE date = CURRENT_DATE GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, grade_title FROM students JOIN grades ON students.student_id = grades.student_id WHERE grade_value >= 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(grade_value) AS max_grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE student_grade = 12 GROUP BY students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name STRING,\n    student_grade INT,\n    attendance_records ARRAY<STRING>\n);\n\nCREATE TABLE grades (\n    grade_id INT PRIMARY KEY,\n    grade_title STRING,\n    grade_value FLOAT,\n    student_id INT REFERENCES students(student_id)\n);\n\nCREATE TABLE attendance (\n    attendance_id INT PRIMARY KEY,\n    date DATE,\n    present BOOLEAN,\n    student_id INT REFERENCES students(student_id)\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(grade_value) AS min_grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE student_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, credits FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Attendance;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_id, date FROM Attendance;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Grades.grade FROM Students INNER JOIN Grades ON Students.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Grades.grade FROM Students INNER JOIN Grades ON Students.student_id = Grades.student_id INNER JOIN Courses ON Grades.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE grade >= 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, credits FROM Courses WHERE credits >= 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, credits FROM Courses ORDER BY credits ASC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS num_courses FROM Students INNER JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(grade) AS avg_grade FROM Courses INNER JOIN Grades ON Courses.course_id = Grades.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, MIN(attendance.date) AS first_attendance_date FROM Students INNER JOIN Attendance ON Students.student_id = Attendance.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(grade) AS highest_grade FROM Students INNER JOIN Grades ON Students.student_id = Grades.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS num_attendance FROM Students LEFT JOIN Attendance ON Students.student_id = Attendance.student_id GROUP BY student_name HAVING COUNT(*) <= 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE grade > 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE attendance = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, credits FROM Courses WHERE credits >= 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id WHERE grade > 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE attendance = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE grade <= 50;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade < 60;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE attendance = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id WHERE grade >= 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade > 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade = 100;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE grade > 95;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE attendance = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, credits FROM Courses WHERE credits < 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Grades ON Students.student_id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.course_id WHERE attendance = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT course_name, grade FROM Courses JOIN Grades ON Courses.course_id = Grades.course_id WHERE grade < 70;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n  student_id UUID PRIMARY KEY,\n  student_name VARCHAR(50) NOT NULL,\n  grade DOUBLE PRECISION NOT NULL,\n  attendance BOOLEAN\n);\n\nCREATE TABLE Courses (\n  course_id UUID PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL,\n  credits INTEGER\n);\n\nCREATE TABLE Grades (\n  grade_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  course_id UUID REFERENCES Courses(course_id),\n  grade DOUBLE PRECISION NOT NULL\n);\n\nCREATE TABLE Attendance (\n  attendance_id UUID PRIMARY KEY,\n  student_id UUID REFERENCES Students(student_id),\n  date DATE NOT NULL\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students WHERE grade = 80;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT name, grade FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT course_name, professor FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Attendance;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT student_id, attendance_date, status FROM Attendance;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name FROM Students INNER JOIN Enrollments ON Students.id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Grades.grade FROM Students INNER JOIN Grades ON Students.id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.professor FROM Students INNER JOIN Enrollments ON Students.id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Attendance.status FROM Students INNER JOIN Attendance ON Students.id = Attendance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Courses.course_name, Enrollments.enrollment_date FROM Courses INNER JOIN Enrollments ON Courses.id = Enrollments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Grades.grade, Courses.course_name FROM Students INNER JOIN Grades ON Students.id = Grades.student_id INNER JOIN Courses ON Grades.course_id = Courses.id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date, Grades.grade FROM Students INNER JOIN Enrollments ON Students.id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.id INNER JOIN Grades ON Students.id = Grades.student_id AND Enrollments.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, COUNT(*) AS total_courses FROM Students INNER JOIN Enrollments ON Students.id = Enrollments.student_id GROUP BY Students.name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, SUM(grade) AS total_grade FROM Students INNER JOIN Grades ON Students.id = Grades.student_id GROUP BY Students.name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id WHERE Students.grade > 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Courses.credits > 3;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Courses.course_name ILIKE 'Math%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, COUNT(Enrollments.course_id) AS course_count FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id GROUP BY Students.name HAVING COUNT(Enrollments.course_id) >= 2;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Courses.course_name, AVG(Grades.grade) AS average_grade FROM Courses JOIN Grades ON Courses.id = Grades.course_id GROUP BY Courses.course_name ORDER BY average_grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Students.attendance = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, SUM(Courses.credits) AS total_credits FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id GROUP BY Students.name HAVING total_credits > 10;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, CASE WHEN Enrollments.enrollment_date IS NULL THEN 'Not Enrolled' ELSE 'Enrolled' END AS enrollment_status FROM Students LEFT JOIN Enrollments ON Students.id = Enrollments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Enrollments.enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, AVG(Grades.grade) AS average_grade FROM Students JOIN Grades ON Students.id = Grades.student_id GROUP BY Students.name HAVING AVG(Grades.grade) < 60;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Grades.grade FROM Students JOIN Grades ON Students.id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.id WHERE Students.grade < Grades.grade AND Students.name ILIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, COUNT(Attendance.status) AS attendance_count FROM Students JOIN Attendance ON Students.id = Attendance.student_id JOIN Courses ON Attendance.course_id = Courses.id GROUP BY Students.name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Courses.course_name, Professor, COUNT(Enrollments.student_id) AS student_count FROM Courses JOIN Enrollments ON Courses.id = Enrollments.course_id GROUP BY Courses.course_name, Professor HAVING COUNT(Enrollments.student_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Courses.course_name = 'English' OR Courses.course_name = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, CASE WHEN Grades.grade >= 70 THEN 'Pass' ELSE 'Fail' END AS result FROM Students JOIN Grades ON Students.id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Courses.credits BETWEEN 3 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.id WHERE Enrollments.enrollment_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, MAX(Grades.grade) AS highest_grade FROM Students JOIN Grades ON Students.id = Grades.student_id GROUP BY Students.name HAVING MAX(Grades.grade) > 90;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, Courses.course_name, Grades.grade FROM Students JOIN Grades ON Students.id = Grades.student_id JOIN Courses ON Grades.course_id = Courses.id WHERE Courses.credits < 4;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    grade INTEGER NOT NULL,\n    attendance BOOLEAN\n);\n\n\nCREATE TABLE Courses (\n    id SERIAL PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL,\n    professor VARCHAR(50),\n    credits INTEGER\n);\n\n\nCREATE TABLE Enrollments (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    enrollment_date TIMESTAMP\n);\n\n\nCREATE TABLE Grades (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    course_id INTEGER NOT NULL,\n    grade INTEGER\n);\n\n\nCREATE TABLE Attendance (\n    id SERIAL PRIMARY KEY,\n    student_id INTEGER NOT NULL,\n    attendance_date DATE,\n    status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT Students.name, SUM(Grades.grade) AS total_grade FROM Students JOIN Grades ON Students.id = Grades.student_id GROUP BY Students.name HAVING SUM(Grades.grade) > 200;"
]