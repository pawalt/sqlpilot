[
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, overall_progress FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance, performance FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance, overall_progress FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance, overall_progress FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance, performance, overall_progress FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE performance < 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE overall_progress BETWEEN 50 AND 80;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT AVG(attendance) FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT MAX(performance) FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT MIN(overall_progress) FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT SUM(attendance) FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_id FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports ORDER BY performance DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance FROM student_reports WHERE attendance > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance FROM student_reports WHERE performance < 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance > 90 AND overall_progress < 80;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance FROM student_reports WHERE attendance > 70 AND performance > 60;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance = 100 AND overall_progress < 90;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id FROM student_reports WHERE attendance = 100 AND overall_progress > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance FROM student_reports WHERE performance < 50;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, overall_progress FROM student_reports WHERE attendance > 80 AND overall_progress < 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance < 50 OR overall_progress < 60;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance FROM student_reports WHERE attendance < 40 AND performance < 50;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE performance > 80 AND overall_progress > 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, attendance FROM student_reports WHERE performance > 90;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance > 80 OR overall_progress > 90;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, overall_progress FROM student_reports WHERE attendance < 60 AND performance > 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance < 70 AND overall_progress < 50;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, performance FROM student_reports WHERE attendance < 60 OR overall_progress < 70;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance > performance;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, overall_progress FROM student_reports WHERE attendance > performance;",
  "### TABLEDATA\n\nCREATE TABLE student_reports (\n  student_id INT PRIMARY KEY,\n  attendance INT,\n  performance INT,\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_reports WHERE attendance <= overall_progress;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT date, status FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT exam_date, subject FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT subject, score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM student_attendance WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM student_attendance WHERE date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance WHERE exam_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM student_attendance WHERE status = 'Present';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance WHERE score >= 80;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT AVG(score) FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT MAX(score) FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(score) FROM student_performance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT AVG(score), subject FROM student_performance GROUP BY subject;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM student_attendance",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, subject, score FROM student_attendance LEFT JOIN student_performance ON student_attendance.student_id = student_performance.student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, status, score FROM student_attendance RIGHT JOIN student_performance ON student_attendance.student_id = student_performance.student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance WHERE date BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_performance WHERE exam_date > '2022-03-15'",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance WHERE score > 80",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date FROM student_attendance WHERE date = '2022-04-20'",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, subject, score FROM student_performance WHERE subject LIKE '%Math%'",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_id FROM student_performance",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT AVG(score) AS average_score FROM student_performance",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_attendance_days FROM student_attendance GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(score) AS total_score FROM student_performance GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status, COUNT(*) AS attendance_days FROM student_attendance GROUP BY student_id HAVING attendance_days > 15",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_date, AVG(score) AS avg_score FROM student_performance GROUP BY student_id HAVING avg_score > 70",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, MIN(score) AS min_score, MAX(score) AS max_score FROM student_performance GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance LEFT JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    student_id INT,\n    date DATE,\n    status VARCHAR(10)\n);\n\n\nCREATE TABLE student_performance (\n    student_id INT,\n    exam_date DATE,\n    subject VARCHAR(50),\n    score INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_attendance_days, MAX(score) AS highest_score FROM student_attendance RIGHT JOIN student_performance ON student_attendance.student_id = student_performance.student_id GROUP BY student_id",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, student_id FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT date, status FROM student_attendance WHERE status = 'Present';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT exam_date, subject FROM student_performance WHERE grade >= 80;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT progress_percentage, feedback FROM student_progress WHERE progress_percentage < 50;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, grade FROM student_performance WHERE subject = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_id FROM student_attendance;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, grade, subject FROM student_performance WHERE grade < 60;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance WHERE date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, progress_percentage FROM student_progress WHERE progress_percentage > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, subject FROM student_performance WHERE subject LIKE 'Eng%';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, feedback FROM student_progress WHERE LENGTH(feedback) > 100;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, exam_date, grade FROM student_performance WHERE exam_date > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance ORDER BY date DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(grade) AS highest_grade FROM student_performance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, subject FROM student_performance WHERE grade = (SELECT MAX(grade) FROM student_performance);",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS num_attendance FROM student_attendance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, MAX(progress_percentage) AS highest_percentage FROM student_progress;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT id, subject FROM student_performance WHERE subject IN ('Math', 'Science');",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_attendance WHERE status='Present';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, date FROM student_attendance WHERE date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_attendance FROM student_attendance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_attendance.student_id, student_performance.exam_date, student_performance.grade FROM student_attendance INNER JOIN student_performance ON student_attendance.student_id = student_performance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(grade) AS highest_grade FROM student_performance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT sp.student_id, sp.subject, sp.exam_date, sa.status FROM student_performance sp LEFT JOIN student_attendance sa ON sp.student_id = sa.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, SUM(progress_percentage) AS total_progress FROM student_progress GROUP BY student_id HAVING total_progress > 50;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, subject, AVG(grade) AS average_grade FROM student_performance GROUP BY student_id, subject ORDER BY average_grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_feedbacks FROM student_progress GROUP BY student_id HAVING total_feedbacks > 5;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(progress_percentage) AS highest_progress FROM student_progress GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(progress_percentage) AS average_progress FROM student_progress GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, subject, AVG(grade) AS average_grade, MAX(progress_percentage) AS highest_progress FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.subject = prog.subject GROUP BY student_id, subject;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, subject, MAX(grade) AS highest_grade, MAX(progress_percentage) AS highest_progress FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.subject = prog.subject GROUP BY student_id, subject;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT sp.student_id, sp.exam_date, sp.grade, prog.progress_percentage FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.exam_date = prog.exam_date;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(progress_percentage) AS average_progress, COUNT(*) AS total_feedbacks FROM student_progress GROUP BY student_id HAVING total_feedbacks > 3;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT sp.student_id, sp.exam_date, sp.grade, prog.progress_percentage, prog.feedback FROM student_performance sp JOIN student_progress prog ON sp.student_id = prog.student_id AND sp.grade > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade, AVG(progress_percentage) AS average_progress FROM student_performance JOIN student_progress ON student_performance.student_id = student_progress.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS average_grade, MAX(progress_percentage) AS highest_progress FROM student_performance JOIN student_progress ON student_performance.student_id = student_progress.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_attendance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    date DATE,\n    status VARCHAR\n);\n\n\nCREATE TABLE student_performance (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    exam_date DATE,\n    grade FLOAT,\n    subject VARCHAR\n);\n\n\nCREATE TABLE student_progress (\n    id UUID PRIMARY KEY,\n    student_id UUID,\n    progress_percentage FLOAT,\n    feedback TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(progress_percentage) AS average_progress, MAX(grade) AS highest_grade FROM student_progress JOIN student_performance ON student_progress.student_id = student_performance.student_id GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, dob FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM attendance_records;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT date, status FROM attendance_records;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM attendance_records;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_name, score FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT score_id, exam_name FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM progress_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, term FROM progress_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT report_id, overall_progress FROM progress_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.score FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.score FROM student_information LEFT JOIN exam_scores ON student_information.student_id = exam_scores.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, progress_reports.overall_progress FROM student_information JOIN progress_reports ON student_information.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, progress_reports.overall_progress FROM student_information LEFT JOIN progress_reports ON student_information.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.exam_name, progress_reports.term FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.score, progress_reports.overall_progress FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.score, progress_reports.overall_progress FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id LEFT JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_information.first_name, exam_scores.score, progress_reports.term FROM student_information JOIN exam_scores ON student_information.student_id = exam_scores.student_id LEFT JOIN progress_reports ON exam_scores.student_id = progress_reports.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_information WHERE gender='Male';",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM student_information WHERE dob BETWEEN '2000-01-01' AND '2005-12-31';",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, first_name, last_name FROM student_information ORDER BY last_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM attendance_records;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, date, status FROM attendance_records WHERE status='Present';",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, exam_name, score FROM exam_scores WHERE score > 80;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM progress_reports;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, term, overall_progress FROM progress_reports WHERE term=1;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT si.student_id, si.first_name, si.last_name, ar.date, ar.status FROM student_information si INNER JOIN attendance_records ar ON si.student_id = ar.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT si.student_id, si.first_name, si.last_name, er.exam_name, er.score FROM student_information si INNER JOIN exam_scores er ON si.student_id = er.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT si.first_name, si.last_name, pr.term, pr.overall_progress FROM student_information si INNER JOIN progress_reports pr ON si.student_id = pr.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT si.first_name, si.last_name, ar.date, er.exam_name, pr.overall_progress FROM student_information si INNER JOIN attendance_records ar ON si.student_id = ar.student_id INNER JOIN exam_scores er ON si.student_id = er.student_id INNER JOIN progress_reports pr ON si.student_id = pr.student_id;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM student_information;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM attendance_records;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(score) AS average_score FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(score) AS highest_score FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE student_information (\n    student_id UUID PRIMARY KEY,\n    first_name STRING,\n    last_name STRING,\n    dob DATE,\n    gender STRING,\n    email STRING\n);\n\nCREATE TABLE attendance_records (\n    record_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    date DATE,\n    status STRING\n);\n\nCREATE TABLE exam_scores (\n    score_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    exam_name STRING,\n    score INT\n);\n\nCREATE TABLE progress_reports (\n    report_id UUID PRIMARY KEY,\n    student_id UUID REFERENCES student_information(student_id),\n    term INT,\n    overall_progress TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(score) AS lowest_score FROM exam_scores;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM attendance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, class_date FROM attendance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_name FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, grade FROM student_performance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM progress;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, overall_progress FROM progress;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, date_of_birth FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, class_date, is_present FROM attendance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_name FROM student_performance, courses WHERE student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, grade FROM students, student_performance WHERE students.student_id = student_performance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, course_name FROM students, student_performance, courses WHERE students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, course_name, grade FROM students, student_performance, courses WHERE students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, class_date, is_present FROM students, attendance WHERE students.student_id = attendance.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, overall_progress FROM students, progress WHERE students.student_id = progress.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, full_name, class_date, is_present, course_name, grade, overall_progress FROM students, attendance, student_performance, courses, progress WHERE students.student_id = attendance.student_id AND students.student_id = student_performance.student_id AND student_performance.course_id = courses.course_id AND students.student_id = progress.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, date_of_birth FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, class_date, is_present FROM attendance;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, course_name, grade FROM students INNER JOIN student_performance ON students.student_id = student_performance.student_id INNER JOIN courses ON student_performance.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, overall_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE date_of_birth < '2000-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM attendance WHERE is_present = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, course_name FROM students INNER JOIN student_performance ON students.student_id = student_performance.student_id INNER JOIN courses ON student_performance.course_id = courses.course_id WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, overall_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id WHERE overall_progress > 80;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(overall_progress) AS avg_progress FROM progress GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(*) AS total_students FROM student_performance GROUP BY course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, MAX(overall_progress) AS best_progress FROM students INNER JOIN progress ON students.student_id = progress.student_id GROUP BY full_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE full_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(overall_progress) AS avg_progress FROM progress HAVING avg_progress > 75;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_name, SUM(overall_progress) AS total_progress FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, MAX(overall_progress) AS highest_progress FROM progress;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, COUNT(*) AS attendance_count FROM students INNER JOIN attendance ON students.student_id = attendance.student_id GROUP BY full_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) AS total_courses FROM student_performance GROUP BY student_id HAVING total_courses > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(overall_progress) AS avg_progress FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name HAVING avg_progress < 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT full_name, MAX(overall_progress) - MIN(overall_progress) AS progress_difference FROM students INNER JOIN progress ON students.student_id = progress.student_id GROUP BY full_name HAVING progress_difference > 20;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  full_name VARCHAR(50) NOT NULL,\n  date_of_birth DATE\n);\n\nCREATE TABLE attendance (\n  attendance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  class_date DATE,\n  is_present BOOLEAN\n);\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE student_performance (\n  performance_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  course_id INT REFERENCES courses(course_id),\n  grade CHAR(1)\n);\n\nCREATE TABLE progress (\n  progress_id INT PRIMARY KEY,\n  student_id INT REFERENCES students(student_id),\n  overall_progress INT\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS total_students FROM student_performance INNER JOIN courses ON student_performance.course_id = courses.course_id GROUP BY course_name HAVING COUNT(*) > 5;"
]