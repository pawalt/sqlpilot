[
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, major FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id = 1",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name FROM students WHERE enrollment_year = 2021",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, major FROM students WHERE enrollment_year > 2019",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE major = 'Computer Science'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE major = 'Engineering'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_year BETWEEN 2018 AND 2020",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name FROM students WHERE major LIKE '%logy'",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_id IN (1, 2, 3)",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT major FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(student_id) FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(enrollment_year) FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MAX(enrollment_year) FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT MIN(enrollment_year) FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, major, enrollment_year FROM students ORDER BY student_id",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, major FROM students ORDER BY enrollment_year DESC",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM students",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, major FROM students WHERE enrollment_year > 2018;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE major = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year FROM students WHERE enrollment_year BETWEEN 2018 AND 2021;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students WHERE major LIKE 'Engineering%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, major FROM students WHERE student_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, major FROM students WHERE enrollment_year < 2015 AND major = 'Mathematics';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT COUNT(student_id) AS total_students FROM students WHERE enrollment_year = 2020;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students ORDER BY enrollment_year DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, major FROM students ORDER BY student_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(enrollment_year) AS avg_enrollment_year FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, major, enrollment_year FROM students WHERE student_name IN ('Alice', 'Bob', 'Charlie');",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT major, COUNT(student_id) AS total_students FROM students GROUP BY major;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT major, AVG(enrollment_year) AS avg_enrollment_year FROM students GROUP BY major HAVING AVG(enrollment_year) > 2017;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students WHERE enrollment_year > (SELECT AVG(enrollment_year) FROM students);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students INNER JOIN other_table ON students.student_id = other_table.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students LEFT JOIN other_table ON students.student_id = other_table.student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_name, major, COUNT(student_id) FROM students GROUP BY student_name, major HAVING COUNT(student_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year FROM students WHERE (major = 'Computer Science' OR major = 'Engineering') AND enrollment_year > 2016;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_year INT,\n    major VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_year, major FROM students WHERE major = 'Mathematics' UNION SELECT student_id, student_name, enrollment_year, major FROM students WHERE major = 'Computer Science';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT course_name, course_description FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM courses WHERE course_id < 10;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students JOIN courses ON students.student_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT students.student_name, courses.course_name FROM students JOIN courses ON students.student_id = courses.course_id WHERE students.enrollment_date < '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(enrollment_date) FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(course_id) FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT SUM(course_id) FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) FROM courses GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, MAX(enrollment_date) FROM students GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE student_name LIKE '%a%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM courses WHERE course_name IN ('Math', 'Science', 'English');",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM courses ORDER BY course_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students LEFT JOIN courses ON students.student_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students WHERE enrollment_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students WHERE student_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT course_name FROM courses WHERE course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM students s JOIN courses c ON s.student_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE enrollment_date < '2020-06-30' ORDER BY student_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS student_count FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(student_id) AS avg_student_id FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT MAX(enrollment_date) AS latest_enrollment_date FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(course_id) AS course_count FROM students GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS student_count FROM courses GROUP BY course_id HAVING student_count > 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students UNION SELECT course_id, course_name FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT s.student_id, s.student_name, c.course_name FROM students s LEFT JOIN courses c ON s.student_id = c.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name FROM students LEFT JOIN courses ON students.student_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name FROM students RIGHT JOIN courses ON students.student_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT CONCAT(student_name, ' enrolled on ', enrollment_date) AS enrollment_info FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students WHERE student_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students WHERE enrollment_date BETWEEN '2020-01-01' AND '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT count(*) AS total_students,enrollment_date FROM students GROUP BY enrollment_date HAVING count(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR,\n    enrollment_date DATE\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR,\n    course_description TEXT\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name FROM students CROSS JOIN courses;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, department FROM CourseRegistrations;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentEnrollment WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, instructor_name FROM CourseRegistrations WHERE department = 'Science';",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM Grades WHERE grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, course_name FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, course_name FROM StudentEnrollment INNER JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM StudentEnrollment WHERE student_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id JOIN CourseRegistrations ON Grades.course_id = CourseRegistrations.course_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT MAX(grade) AS highest_grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT MIN(grade) AS lowest_grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_students FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS total_students FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id JOIN CourseRegistrations ON Grades.course_id = CourseRegistrations.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id ORDER BY enrollment_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT DISTINCT student_name FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM StudentEnrollment WHERE enrollment_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT * FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM StudentEnrollment WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, department, instructor_name FROM CourseRegistrations WHERE course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_id, course_id, grade FROM Grades WHERE student_id = 1 AND course_id = 101;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM StudentEnrollment;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT AVG(grade) FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_id, COUNT(student_id) AS enrolled_students FROM Grades GROUP BY course_id HAVING COUNT(student_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id JOIN CourseRegistrations ON Grades.course_id = CourseRegistrations.course_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT department, AVG(CAST(grade AS DECIMAL)) AS avg_grade FROM Grades JOIN CourseRegistrations ON Grades.course_id = CourseRegistrations.course_id GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, instructor_name, AVG(CAST(grade AS DECIMAL)) AS avg_grade FROM Grades JOIN CourseRegistrations ON Grades.course_id = CourseRegistrations.course_id GROUP BY course_name, instructor_name;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, SUM(CAST(grade AS DECIMAL)) AS total_grade FROM StudentEnrollment JOIN Grades ON StudentEnrollment.student_id = Grades.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment LEFT JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT course_name, AVG(CAST(grade AS DECIMAL)) AS avg_grade FROM CourseRegistrations LEFT JOIN Grades ON CourseRegistrations.course_id = Grades.course_id GROUP BY course_name HAVING avg_grade > 70;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, grade FROM StudentEnrollment LEFT JOIN Grades ON StudentEnrollment.student_id = Grades.student_id AND grade = 'A';",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment FULL JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment INNER JOIN Grades ON StudentEnrollment.student_id = Grades.student_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT department, COUNT(DISTINCT instructor_name) AS unique_instructors FROM CourseRegistrations GROUP BY department;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT COUNT(student_id) AS total_students, COUNT(DISTINCT department) AS unique_departments FROM CourseRegistrations JOIN Grades ON CourseRegistrations.course_id = Grades.course_id;",
  "### TABLEDATA\n\nCREATE TABLE StudentEnrollment (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50),\n    enrollment_date DATE\n)\n\nCREATE TABLE CourseRegistrations (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50),\n    department VARCHAR(50),\n    instructor_name VARCHAR(50)\n)\n\nCREATE TABLE Grades (\n    grade_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    grade VARCHAR(2)\n)\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM StudentEnrollment CROSS JOIN Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT enrollment_date FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT * FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT * FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, course_id FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT enrollment_date FROM Enrollments;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT * FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT grade FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, course_id, enrollment_date FROM Enrollments WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Courses.course_id = Enrollments.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT AVG(grade) FROM Grades;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Courses.course_id = Enrollments.course_id INNER JOIN Grades ON Grades.enrollment_id = Enrollments.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(*) FROM Enrollments GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(grade) FROM Courses INNER JOIN Enrollments ON Courses.course_id = Enrollments.course_id INNER JOIN Grades ON Grades.enrollment_id = Enrollments.enrollment_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date FROM Students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT course_name, enrollment_date FROM Courses INNER JOIN Enrollments ON Courses.course_id = Enrollments.course_id WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT * FROM Students;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT DISTINCT course_name FROM Courses;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Enrollments.enrollment_date FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT Students.student_name, Courses.course_name, Enrollments.enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE Courses.course_name = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT Students.student_name, AVG(grade) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Students.student_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS enrollment_count FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT course_name, MAX(grade) AS highest_grade FROM Courses JOIN Enrollments ON Courses.course_id = Enrollments.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(CASE WHEN grade = 'A' THEN 1 ELSE 0 END) AS grade_A_count, SUM(CASE WHEN grade = 'B' THEN 1 ELSE 0 END) AS grade_B_count, SUM(CASE WHEN grade = 'C' THEN 1 ELSE 0 END) AS grade_C_count FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id WHERE grade = 'F';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE enrollment_date = '2022-09-15';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE student_name LIKE '%John%';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id ORDER BY enrollment_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE enrollment_date < '2022-08-01';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE course_name IN ('Math', 'Science');",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id GROUP BY student_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT AVG(grade) AS average_grade FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id;",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM Students JOIN Enrollments ON Students.student_id = Enrollments.student_id JOIN Courses ON Enrollments.course_id = Courses.course_id WHERE enrollment_date >= '2022-01-01' AND enrollment_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(50) NOT NULL,\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT REFERENCES Students(student_id),\n    course_id INT REFERENCES Courses(course_id),\n    enrollment_date DATE\n);\n\n\nCREATE TABLE Grades (\n    enrollment_id INT REFERENCES Enrollments(enrollment_id),\n    grade CHAR(2) CHECK (grade >= 'A' AND grade <= 'F')\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Enrollments);",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, student_name FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM courses;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT course_id, course_name FROM courses WHERE course_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM enrollments;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT enrollment_id, student_id, course_id, enrollment_date FROM enrollments WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM grades;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT grade_id, student_id, course_id, grade FROM grades WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM registrations;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT registration_id, student_id, course_id, registration_date FROM registrations WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date, grade FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id INNER JOIN grades g ON s.student_id = g.student_id AND e.course_id = g.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, course_name, enrollment_date, grade FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id INNER JOIN grades g ON s.student_id = g.student_id AND e.course_id = g.course_id WHERE grade >= 8;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, course_name, grade FROM students s INNER JOIN grades g ON s.student_id = g.student_id INNER JOIN courses c ON g.course_id = c.course_id WHERE grade < 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM students s INNER JOIN grades g ON s.student_id = g.student_id WHERE grade >= 7;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM students s INNER JOIN grades g ON s.student_id = g.student_id INNER JOIN courses c ON g.course_id = c.course_id WHERE course_name = 'Math';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, enrollment_date FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id WHERE enrollment_date = '2022-02-15';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, student_name, registration_date FROM students s INNER JOIN registrations r ON s.student_id = r.student_id WHERE registration_date < '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, enrollment_date, registration_date FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN registrations r ON s.student_id = r.student_id WHERE enrollment_date = '2022-02-15' AND registration_date = '2022-02-20';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT student_id, student_name FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, COUNT(enrollment_id) AS num_enrollments FROM enrollments GROUP BY student_id HAVING num_enrollments > 3;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM students;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name FROM students WHERE student_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_id, AVG(grade) AS avg_grade FROM grades GROUP BY student_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN courses ON grades.course_id = courses.course_id;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS num_students FROM enrollments JOIN courses ON enrollments.course_id = courses.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, SUM(grade) AS total_grade FROM students JOIN grades ON students.student_id = grades.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, registration_date FROM students JOIN registrations ON students.student_id = registrations.student_id JOIN courses ON registrations.course_id = courses.course_id ORDER BY registration_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM courses WHERE course_name LIKE 'Math%';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE grade >= 90;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, COUNT(*) AS num_courses FROM students JOIN enrollments ON students.student_id = enrollments.student_id GROUP BY student_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT course_name, MAX(grade) AS highest_grade FROM grades JOIN courses ON grades.course_id = courses.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN courses ON grades.course_id = courses.course_id WHERE grade < 70;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, enrollment_date FROM students JOIN enrollments ON students.student_id = enrollments.student_id JOIN courses ON enrollments.course_id = courses.course_id WHERE enrollment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN courses ON grades.course_id = courses.course_id ORDER BY grade DESC;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, registration_date FROM students JOIN registrations ON students.student_id = registrations.student_id JOIN courses ON registrations.course_id = courses.course_id WHERE registration_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT course_name, AVG(grade) AS avg_grade FROM courses JOIN grades ON courses.course_id = grades.course_id GROUP BY course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, course_name, MAX(grade) AS highest_grade FROM students JOIN grades ON students.student_id = grades.student_id JOIN courses ON grades.course_id = courses.course_id GROUP BY student_name, course_name;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT course_name, COUNT(*) AS num_students FROM enrollments JOIN courses ON enrollments.course_id = courses.course_id GROUP BY course_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE students (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50)\n);\n\n\nCREATE TABLE courses (\n  course_id INT PRIMARY KEY,\n  course_name VARCHAR(50)\n);\n\n\nCREATE TABLE enrollments (\n  enrollment_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE\n);\n\n\nCREATE TABLE grades (\n  grade_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  grade DECIMAL(2, 1)\n);\n\n\nCREATE TABLE registrations (\n  registration_id INT PRIMARY KEY,\n  student_id INT,\n  course_id INT,\n  registration_date DATE\n);\n\n### STATEMENT\n\nSELECT student_name, AVG(grade) AS avg_grade FROM students JOIN grades ON students.student_id = grades.student_id WHERE student_name = 'Alice';"
]