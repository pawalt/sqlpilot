[
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (1, 'Event 1', '2022-05-10', 'Location 1') ON DUPLICATE KEY UPDATE event_name = 'Event 1 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (2, 'Event 2', '2022-06-15', 'Location 2') ON DUPLICATE KEY UPDATE event_name = 'Event 2 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (3, 'Event 3', '2022-07-20', 'Location 3') ON DUPLICATE KEY UPDATE event_name = 'Event 3 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (4, 'Event 4', '2022-08-25', 'Location 4') ON DUPLICATE KEY UPDATE event_name = 'Event 4 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (5, 'Event 5', '2022-09-30', 'Location 5') ON DUPLICATE KEY UPDATE event_name = 'Event 5 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (6, 'Event 6', '2022-10-05', 'Location 6') ON DUPLICATE KEY UPDATE event_name = 'Event 6 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (7, 'Event 7', '2022-11-10', 'Location 7') ON DUPLICATE KEY UPDATE event_name = 'Event 7 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (8, 'Event 8', '2022-12-15', 'Location 8') ON DUPLICATE KEY UPDATE event_name = 'Event 8 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (9, 'Event 9', '2023-01-20', 'Location 9') ON DUPLICATE KEY UPDATE event_name = 'Event 9 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (10, 'Event 10', '2023-02-25', 'Location 10') ON DUPLICATE KEY UPDATE event_name = 'Event 10 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (11, 'Event 11', '2023-03-30', 'Location 11') ON DUPLICATE KEY UPDATE event_name = 'Event 11 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (12, 'Event 12', '2023-04-05', 'Location 12') ON DUPLICATE KEY UPDATE event_name = 'Event 12 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (13, 'Event 13', '2023-05-10', 'Location 13') ON DUPLICATE KEY UPDATE event_name = 'Event 13 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (14, 'Event 14', '2023-06-15', 'Location 14') ON DUPLICATE KEY UPDATE event_name = 'Event 14 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (15, 'Event 15', '2023-07-20', 'Location 15') ON DUPLICATE KEY UPDATE event_name = 'Event 15 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (16, 'Event 16', '2023-08-25', 'Location 16') ON DUPLICATE KEY UPDATE event_name = 'Event 16 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (17, 'Event 17', '2023-09-30', 'Location 17') ON DUPLICATE KEY UPDATE event_name = 'Event 17 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (18, 'Event 18', '2023-10-05', 'Location 18') ON DUPLICATE KEY UPDATE event_name = 'Event 18 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (19, 'Event 19', '2023-11-10', 'Location 19') ON DUPLICATE KEY UPDATE event_name = 'Event 19 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nINSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (20, 'Event 20', '2023-12-15', 'Location 20') ON DUPLICATE KEY UPDATE event_name = 'Event 20 Updated';",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (1, 'Conference', '2022-10-15', 'New York') ON DUPLICATE KEY UPDATE event_name='Conference_update', event_date='2022-10-16', event_location='New York_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (2, 'Seminar', '2022-09-20', 'Los Angeles') ON DUPLICATE KEY UPDATE event_name='Seminar_update', event_date='2022-09-21', event_location='Los Angeles_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (3, 'Workshop', '2022-11-05', 'Chicago') ON DUPLICATE KEY UPDATE event_name='Workshop_update', event_date='2022-11-06', event_location='Chicago_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (4, 'Expo', '2022-12-10', 'Miami') ON DUPLICATE KEY UPDATE event_name='Expo_update', event_date='2022-12-11', event_location='Miami_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (5, 'Festival', '2023-02-28', 'San Francisco') ON DUPLICATE KEY UPDATE event_name='Festival_update', event_date='2023-03-01', event_location='San Francisco_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (6, 'Webinar', '2023-01-15', 'Seattle') ON DUPLICATE KEY UPDATE event_name='Webinar_update', event_date='2023-01-16', event_location='Seattle_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (7, 'Symposium', '2023-04-20', 'Boston') ON DUPLICATE KEY UPDATE event_name='Symposium_update', event_date='2023-04-21', event_location='Boston_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (8, 'Training', '2023-06-08', 'Denver') ON DUPLICATE KEY UPDATE event_name='Training_update', event_date='2023-06-09', event_location='Denver_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (9, 'Concert', '2023-07-22', 'Austin') ON DUPLICATE KEY UPDATE event_name='Concert_update', event_date='2023-07-23', event_location='Austin_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (10, 'Hackathon', '2023-10-30', 'Portland') ON DUPLICATE KEY UPDATE event_name='Hackathon_update', event_date='2023-10-31', event_location='Portland_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (11, 'Carnival', '2023-12-12', 'Orlando') ON DUPLICATE KEY UPDATE event_name='Carnival_update', event_date='2023-12-13', event_location='Orlando_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (12, 'Exhibition', '2024-02-29', 'Las Vegas') ON DUPLICATE KEY UPDATE event_name='Exhibition_update', event_date='2024-03-01', event_location='Las Vegas_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (13, 'Product Launch', '2024-01-10', 'Houston') ON DUPLICATE KEY UPDATE event_name='Product Launch_update', event_date='2024-01-11', event_location='Houston_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (14, 'Retreat', '2024-04-25', 'Nashville') ON DUPLICATE KEY UPDATE event_name='Retreat_update', event_date='2024-04-26', event_location='Nashville_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (15, 'Summit', '2024-07-08', 'Phoenix') ON DUPLICATE KEY UPDATE event_name='Summit_update', event_date='2024-07-09', event_location='Phoenix_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (16, 'Gala', '2024-09-14', 'Atlanta') ON DUPLICATE KEY UPDATE event_name='Gala_update', event_date='2024-09-15', event_location='Atlanta_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (17, 'Hackfest', '2024-11-30', 'Dallas') ON DUPLICATE KEY UPDATE event_name='Hackfest_update', event_date='2024-12-01', event_location='Dallas_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (18, 'Symposium', '2025-03-18', 'San Diego') ON DUPLICATE KEY UPDATE event_name='Symposium_update', event_date='2025-03-19', event_location='San Diego_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (19, 'Fair', '2025-05-05', 'Miami') ON DUPLICATE KEY UPDATE event_name='Fair_update', event_date='2025-05-06', event_location='Miami_update'",
  "### TABLEDATA\n\nCREATE TABLE Events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE,\n    event_location VARCHAR(255)\n)\n\n### STATEMENT\n\nUPSERT INTO Events (event_id, event_name, event_date, event_location) VALUES (20, 'Forum', '2025-08-20', 'New Orleans') ON DUPLICATE KEY UPDATE event_name='Forum_update', event_date='2025-08-21', event_location='New Orleans_update'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Meeting', 'Monthly team meeting', '2022-09-15', 'Conference Room A') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated team meeting'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Conference', 'Annual industry conference', '2022-10-20', 'Convention Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated industry conference'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Training', 'Employee training session', '2022-11-05', 'Training Room B') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated employee training session'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Seminar', 'Technical seminar on AI', '2022-10-30', 'Tech Hub') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated technical seminar'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Webinar', 'Webinar on cybersecurity', '2022-09-25', 'Online Platform') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated cybersecurity webinar'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Workshop', 'Hands-on workshop on design', '2022-11-10', 'Design Studio') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated design workshop'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Hackathon', 'Hackathon competition', '2022-10-15', 'Innovation Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated hackathon competition'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Symposium', 'Scientific symposium', '2022-12-01', 'Research Institute') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated scientific symposium'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Exhibition', 'Art exhibition', '2022-11-25', 'Art Gallery') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated art exhibition'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Lecture', 'Guest lecture on entrepreneurship', '2022-09-30', 'Auditorium') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated guest lecture'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Panel Discussion', 'Panel discussion on climate change', '2022-10-05', 'Forum Hall') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated panel discussion'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Festival', 'Cultural festival', '2022-12-20', 'Community Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated cultural festival'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Networking Event', 'Professional networking event', '2022-11-15', 'Business Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated networking event'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Awards Ceremony', 'Annual awards ceremony', '2022-12-10', 'Theater Hall') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated awards ceremony'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Product Launch', 'Product launch event', '2022-10-25', 'Showroom') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated product launch event'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Company Retreat', 'Company retreat weekend', '2022-11-20', 'Resort') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated company retreat weekend'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Seminar', 'Business seminar', '2022-10-10', 'Business Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated business seminar'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Training Workshop', 'Professional skills workshop', '2022-09-20', 'Training Center') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated professional skills workshop'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_name, event_description, event_date, event_location) VALUES ('Conference', 'Tech conference', '2022-12-05', 'Tech Expo') ON CONFLICT (event_name) DO UPDATE SET event_description = 'Updated tech conference'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_year, start_date, end_date) VALUES (2022, '2022-09-01', '2023-06-30') ON CONFLICT (academic_year) DO UPDATE SET start_date = '2022-09-01', end_date = '2023-06-30'",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (1, 'Conference', 'Annual conference for professionals', '2022-10-15 10:00:00', 'New York') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Conference', event_description = 'Updated conference description', event_date = '2022-10-15 10:00:00', event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (2, 'Workshop', 'Hands-on workshop for beginners', '2022-11-20 09:00:00', 'London') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Workshop', event_description = 'Updated workshop description', event_date = '2022-11-20 09:00:00', event_location = 'London';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (3, 'Seminar', 'Informative seminar on current industry trends', '2023-01-10 14:30:00', 'San Francisco') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Seminar', event_description = 'Updated seminar description', event_date = '2023-01-10 14:30:00', event_location = 'San Francisco';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (4, 'Webinar', 'Virtual webinar accessible worldwide', '2023-03-05 15:00:00', 'Online') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Webinar', event_description = 'Updated webinar description', event_date = '2023-03-05 15:00:00', event_location = 'Online';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (5, 'Hackathon', '24-hour coding hackathon', '2023-05-08 12:00:00', 'Berlin') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Hackathon', event_description = 'Updated hackathon description', event_date = '2023-05-08 12:00:00', event_location = 'Berlin';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (6, 'Networking Event', 'Networking event for professionals', '2023-07-20 18:30:00', 'Tokyo') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Networking Event', event_description = 'Updated networking event description', event_date = '2023-07-20 18:30:00', event_location = 'Tokyo';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (7, 'Product Launch', 'Launch event for new product line', '2023-09-12 11:00:00', 'Paris') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Product Launch', event_description = 'Updated product launch description', event_date = '2023-09-12 11:00:00', event_location = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (8, 'Panel Discussion', 'Interactive panel discussion with experts', '2023-11-18 16:45:00', 'Sydney') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Panel Discussion', event_description = 'Updated panel discussion description', event_date = '2023-11-18 16:45:00', event_location = 'Sydney';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (9, 'Training Session', 'Training session for new employees', '2024-02-04 09:30:00', 'Singapore') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Training Session', event_description = 'Updated training session description', event_date = '2024-02-04 09:30:00', event_location = 'Singapore';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (10, 'Expo', 'Exhibition showcasing latest technology', '2024-04-20 10:00:00', 'Dubai') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Expo', event_description = 'Updated expo description', event_date = '2024-04-20 10:00:00', event_location = 'Dubai';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (11, 'Conference', 'Annual conference for professionals', '2022-10-15 10:00:00', 'New York') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Conference', event_description = 'Updated conference description', event_date = '2022-10-15 10:00:00', event_location = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (12, 'Workshop', 'Hands-on workshop for beginners', '2022-11-20 09:00:00', 'London') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Workshop', event_description = 'Updated workshop description', event_date = '2022-11-20 09:00:00', event_location = 'London';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (13, 'Seminar', 'Informative seminar on current industry trends', '2023-01-10 14:30:00', 'San Francisco') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Seminar', event_description = 'Updated seminar description', event_date = '2023-01-10 14:30:00', event_location = 'San Francisco';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (14, 'Webinar', 'Virtual webinar accessible worldwide', '2023-03-05 15:00:00', 'Online') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Webinar', event_description = 'Updated webinar description', event_date = '2023-03-05 15:00:00', event_location = 'Online';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (15, 'Hackathon', '24-hour coding hackathon', '2023-05-08 12:00:00', 'Berlin') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Hackathon', event_description = 'Updated hackathon description', event_date = '2023-05-08 12:00:00', event_location = 'Berlin';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (16, 'Networking Event', 'Networking event for professionals', '2023-07-20 18:30:00', 'Tokyo') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Networking Event', event_description = 'Updated networking event description', event_date = '2023-07-20 18:30:00', event_location = 'Tokyo';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (17, 'Product Launch', 'Launch event for new product line', '2023-09-12 11:00:00', 'Paris') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Product Launch', event_description = 'Updated product launch description', event_date = '2023-09-12 11:00:00', event_location = 'Paris';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (18, 'Panel Discussion', 'Interactive panel discussion with experts', '2023-11-18 16:45:00', 'Sydney') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Panel Discussion', event_description = 'Updated panel discussion description', event_date = '2023-11-18 16:45:00', event_location = 'Sydney';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (19, 'Training Session', 'Training session for new employees', '2024-02-04 09:30:00', 'Singapore') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Training Session', event_description = 'Updated training session description', event_date = '2024-02-04 09:30:00', event_location = 'Singapore';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name TEXT NOT NULL,\n    event_description TEXT,\n    event_date TIMESTAMP,\n    event_location TEXT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year INTEGER NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_description, event_date, event_location) VALUES (20, 'Expo', 'Exhibition showcasing latest technology', '2024-04-20 10:00:00', 'Dubai') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Expo', event_description = 'Updated expo description', event_date = '2024-04-20 10:00:00', event_location = 'Dubai';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (1, 'Event 1', '2022-05-10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 1 Updated', event_date = '2022-05-10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (2, 'Event 2', '2022-06-15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 2 Updated', event_date = '2022-06-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (3, 'Event 3', '2022-07-20') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 3 Updated', event_date = '2022-07-20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (4, 'Event 4', '2022-08-25') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 4 Updated', event_date = '2022-08-25';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (5, 'Event 5', '2022-09-30') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 5 Updated', event_date = '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (6, 'Event 6', '2023-01-05') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 6 Updated', event_date = '2023-01-05';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (7, 'Event 7', '2023-02-10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 7 Updated', event_date = '2023-02-10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (8, 'Event 8', '2023-03-15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 8 Updated', event_date = '2023-03-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (9, 'Event 9', '2023-04-20') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 9 Updated', event_date = '2023-04-20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (10, 'Event 10', '2023-05-25') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 10 Updated', event_date = '2023-05-25';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (11, 'Event 11', '2023-06-30') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 11 Updated', event_date = '2023-06-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (12, 'Event 12', '2023-07-05') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 12 Updated', event_date = '2023-07-05';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (13, 'Event 13', '2023-08-10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 13 Updated', event_date = '2023-08-10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (14, 'Event 14', '2023-09-15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 14 Updated', event_date = '2023-09-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (15, 'Event 15', '2023-10-20') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 15 Updated', event_date = '2023-10-20';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (16, 'Event 16', '2024-01-25') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 16 Updated', event_date = '2024-01-25';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (17, 'Event 17', '2024-02-29') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 17 Updated', event_date = '2024-02-29';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (18, 'Event 18', '2024-03-05') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 18 Updated', event_date = '2024-03-05';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (19, 'Event 19', '2024-04-10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 19 Updated', event_date = '2024-04-10';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nINSERT INTO events (event_id, event_name, event_date) VALUES (20, 'Event 20', '2024-05-15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event 20 Updated', event_date = '2024-05-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (1, 'Event 1', '2021-10-10') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 1', event_date = '2021-10-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (2, 'Event 2', '2021-12-05') ON CONFLICT (event_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (3, 'Event 3', '2022-01-20') ON CONFLICT (event_id) DO UPDATE SET event_date = '2022-01-25';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (1, 'Calendar 1', 'Public', 2021) ON CONFLICT (calendar_id) DO UPDATE SET calendar_name = 'Updated Calendar 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (2, 'Calendar 2', 'Private', 2022) ON CONFLICT (calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (3, 'Calendar 3', 'Public', 2021) ON CONFLICT (calendar_id) DO UPDATE SET calendar_type = 'Shared';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (1, 2021, '2021-09-01', '2022-06-30') ON CONFLICT (academic_calendar_id) DO UPDATE SET end_date = '2022-07-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (2, 2022, '2022-08-01', '2023-07-31') ON CONFLICT (academic_calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (3, 2021, '2021-09-01', '2022-06-30') ON CONFLICT (academic_calendar_id) DO UPDATE SET end_date = '2022-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (4, 'Event 4', '2021-11-15') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Updated Event 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (5, 'Event 5', '2022-02-20') ON CONFLICT (event_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date) VALUES (6, 'Event 6', '2022-03-10') ON CONFLICT (event_id) DO UPDATE SET event_date = '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (4, 'Calendar 4', 'Private', 2022) ON CONFLICT (calendar_id) DO UPDATE SET calendar_name = 'Updated Calendar 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (5, 'Calendar 5', 'Public', 2021) ON CONFLICT (calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name, calendar_type, calendar_year) VALUES (6, 'Calendar 6', 'Private', 2022) ON CONFLICT (calendar_id) DO UPDATE SET calendar_type = 'Shared';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (4, 2022, '2022-08-01', '2023-07-31') ON CONFLICT (academic_calendar_id) DO UPDATE SET end_date = '2023-08-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (5, 2021, '2021-09-01', '2022-06-30') ON CONFLICT (academic_calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id INT PRIMARY KEY,\n    event_name VARCHAR(255),\n    event_date DATE\n);\n\nCREATE TABLE calendars (\n    calendar_id INT PRIMARY KEY,\n    calendar_name VARCHAR(255),\n    calendar_type VARCHAR(50),\n    calendar_year INT\n);\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id INT PRIMARY KEY,\n    academic_year INT,\n    start_date DATE,\n    end_date DATE\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (6, 2022, '2022-08-01', '2023-07-31') ON CONFLICT (academic_calendar_id) DO UPDATE SET end_date = '2023-09-30';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 1', '2022-10-15', 'Location 1') ON CONFLICT (event_name) DO UPDATE SET event_date = '2022-10-15', location = 'Location 1';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 1', '2022-01-01', '2022-12-31') ON CONFLICT (calendar_name) DO UPDATE SET start_date = '2022-01-01', end_date = '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2022-2023', 'Fall', '2022-09-01', '2022-12-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = '2022-09-01', end_date = '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_calendar_mapping (event_id, calendar_id) VALUES (1, 1) ON CONFLICT (event_id, calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 2', '2022-11-20', 'Location 2') ON CONFLICT (event_name) DO UPDATE SET event_date = '2022-11-20', location = 'Location 2';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 2', '2022-03-01', '2022-12-01') ON CONFLICT (calendar_name) DO UPDATE SET start_date = '2022-03-01', end_date = '2022-12-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2023-2024', 'Spring', '2023-01-01', '2023-05-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = '2023-01-01', end_date = '2023-05-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_calendar_mapping (event_id, calendar_id) VALUES (2, 2) ON CONFLICT (event_id, calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 3', '2023-01-10', 'Location 3') ON CONFLICT (event_name) DO UPDATE SET event_date = '2023-01-10', location = 'Location 3';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 3', '2023-04-01', '2023-12-01') ON CONFLICT (calendar_name) DO UPDATE SET start_date = '2023-04-01', end_date = '2023-12-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2024-2025', 'Summer', '2024-06-01', '2024-08-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = '2024-06-01', end_date = '2024-08-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_calendar_mapping (event_id, calendar_id) VALUES (3, 3) ON CONFLICT (event_id, calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 4', '2024-02-15', 'Location 4') ON CONFLICT (event_name) DO UPDATE SET event_date = '2024-02-15', location = 'Location 4';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 4', '2024-07-01', '2024-12-01') ON CONFLICT (calendar_name) DO UPDATE SET start_date = '2024-07-01', end_date = '2024-12-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2025-2026', 'Winter', '2025-01-01', '2025-03-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = '2025-01-01', end_date = '2025-03-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_calendar_mapping (event_id, calendar_id) VALUES (4, 4) ON CONFLICT (event_id, calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 5', '2025-03-20', 'Location 5') ON CONFLICT (event_name) DO UPDATE SET event_date = '2025-03-20', location = 'Location 5';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 5', '2025-09-01', '2025-12-01') ON CONFLICT (calendar_name) DO UPDATE SET start_date = '2025-09-01', end_date = '2025-12-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2026-2027', 'Fall', '2026-09-01', '2026-12-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = '2026-09-01', end_date = '2026-12-31';",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO event_calendar_mapping (event_id, calendar_id) VALUES (5, 5) ON CONFLICT (event_id, calendar_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 1', '2022-01-01', 'Location 1') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2022-2023', 'Spring', '2022-01-01', '2022-05-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 2', '2022-02-15', 'Location 2') ON CONFLICT (event_name) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 1', '2022-01-01', '2022-12-31') ON CONFLICT (calendar_name) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 3', '2022-03-10', 'Location 3') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2023-2024', 'Fall', '2023-08-01', '2023-12-15') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 4', '2022-04-20', 'Location 4') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 2', '2022-07-01', '2022-12-31') ON CONFLICT (calendar_name) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 5', '2022-05-30', 'Location 5') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2024-2025', 'Spring', '2024-01-01', '2024-05-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 6', '2022-06-25', 'Location 6') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 3', '2022-09-01', '2023-08-31') ON CONFLICT (calendar_name) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 7', '2022-07-15', 'Location 7') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2025-2026', 'Fall', '2025-08-01', '2025-12-15') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 8', '2022-08-10', 'Location 8') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO calendars (calendar_name, start_date, end_date) VALUES ('Calendar 4', '2023-01-01', '2023-06-30') ON CONFLICT (calendar_name) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 9', '2022-09-20', 'Location 9') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO academic_calendars (academic_year, semester, start_date, end_date) VALUES ('2026-2027', 'Spring', '2026-01-01', '2026-05-31') ON CONFLICT (academic_year, semester) DO UPDATE SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date",
  "### TABLEDATA\n\nCREATE TABLE events (\n    event_id SERIAL PRIMARY KEY,\n    event_name VARCHAR(255) NOT NULL,\n    event_date DATE,\n    location VARCHAR(255)\n);\n\n\nCREATE TABLE calendars (\n    calendar_id SERIAL PRIMARY KEY,\n    calendar_name VARCHAR(255) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE academic_calendars (\n    academic_calendar_id SERIAL PRIMARY KEY,\n    academic_year VARCHAR(255) NOT NULL,\n    semester VARCHAR(50) NOT NULL,\n    start_date DATE,\n    end_date DATE\n);\n\n\nCREATE TABLE event_calendar_mapping (\n    mapping_id SERIAL PRIMARY KEY,\n    event_id INT REFERENCES events(event_id),\n    calendar_id INT REFERENCES calendars(calendar_id)\n);\n\n### STATEMENT\n\nINSERT INTO events (event_name, event_date, location) VALUES ('Event 10', '2022-10-15', 'Location 10') ON CONFLICT (event_name) DO UPDATE SET event_date = EXCLUDED.event_date, location = EXCLUDED.location",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Event One', '2022-09-15', 'Location One') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event One Updated', event_location = 'Location One Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Event Two', '2022-10-20', 'Location Two') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Two Updated', event_location = 'Location Two Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Event Three', '2022-11-25', 'Location Three') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Three Updated', event_location = 'Location Three Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Event Four', '2022-12-30', 'Location Four') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Four Updated', event_location = 'Location Four Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (5, 'Event Five', '2023-01-05', 'Location Five') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Five Updated', event_location = 'Location Five Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (6, 'Event Six', '2023-02-10', 'Location Six') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Six Updated', event_location = 'Location Six Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (7, 'Event Seven', '2023-03-15', 'Location Seven') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Seven Updated', event_location = 'Location Seven Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (8, 'Event Eight', '2023-04-20', 'Location Eight') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Eight Updated', event_location = 'Location Eight Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (9, 'Event Nine', '2023-05-25', 'Location Nine') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Nine Updated', event_location = 'Location Nine Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (10, 'Event Ten', '2023-06-30', 'Location Ten') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Ten Updated', event_location = 'Location Ten Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (11, 'Event Eleven', '2023-07-05', 'Location Eleven') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Eleven Updated', event_location = 'Location Eleven Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (12, 'Event Twelve', '2023-08-10', 'Location Twelve') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Twelve Updated', event_location = 'Location Twelve Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (13, 'Event Thirteen', '2023-09-15', 'Location Thirteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Thirteen Updated', event_location = 'Location Thirteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (14, 'Event Fourteen', '2023-10-20', 'Location Fourteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Fourteen Updated', event_location = 'Location Fourteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (15, 'Event Fifteen', '2023-11-25', 'Location Fifteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Fifteen Updated', event_location = 'Location Fifteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (16, 'Event Sixteen', '2023-12-30', 'Location Sixteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Sixteen Updated', event_location = 'Location Sixteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (17, 'Event Seventeen', '2024-01-05', 'Location Seventeen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Seventeen Updated', event_location = 'Location Seventeen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (18, 'Event Eighteen', '2024-02-10', 'Location Eighteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Eighteen Updated', event_location = 'Location Eighteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (19, 'Event Nineteen', '2024-03-15', 'Location Nineteen') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Nineteen Updated', event_location = 'Location Nineteen Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (20, 'Event Twenty', '2024-04-20', 'Location Twenty') ON CONFLICT (event_id) DO UPDATE SET event_name = 'Event Twenty Updated', event_location = 'Location Twenty Updated';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (1, 'Music Concert', '2022-06-15', 'Main Hall') ON DUPLICATE KEY UPDATE event_name = 'Updated Music Concert', event_location = 'Updated Main Hall';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name) VALUES (1, 'Holiday Calendar') ON DUPLICATE KEY UPDATE calendar_name = 'Updated Holiday Calendar';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO event_calendars (event_id, calendar_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE calendar_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (1, '2022-2023', '2022-09-01', '2023-06-30') ON DUPLICATE KEY UPDATE start_date = '2022-08-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO school_info (school_id, school_name, school_location) VALUES (1, 'ABC School', 'City Center') ON DUPLICATE KEY UPDATE school_name = 'Updated ABC School';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (2, 'Dance Show', '2022-08-20', 'Auditorium') ON DUPLICATE KEY UPDATE event_name = 'Updated Dance Show', event_location = 'Updated Auditorium';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name) VALUES (2, 'Event Calendar') ON DUPLICATE KEY UPDATE calendar_name = 'Updated Event Calendar';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO event_calendars (event_id, calendar_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE calendar_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (2, '2023-2024', '2023-09-01', '2024-06-30') ON DUPLICATE KEY UPDATE start_date = '2023-08-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO school_info (school_id, school_name, school_location) VALUES (2, 'XYZ School', 'Suburb Area') ON DUPLICATE KEY UPDATE school_name = 'Updated XYZ School';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (3, 'Art Exhibition', '2022-10-10', 'Gallery') ON DUPLICATE KEY UPDATE event_name = 'Updated Art Exhibition', event_location = 'Updated Gallery';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name) VALUES (3, 'Sports Calendar') ON DUPLICATE KEY UPDATE calendar_name = 'Updated Sports Calendar';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO event_calendars (event_id, calendar_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE calendar_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (3, '2024-2025', '2024-09-01', '2025-06-30') ON DUPLICATE KEY UPDATE start_date = '2024-08-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO school_info (school_id, school_name, school_location) VALUES (3, 'PQR School', 'Downtown Area') ON DUPLICATE KEY UPDATE school_name = 'Updated PQR School';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (4, 'Theater Play', '2023-02-15', 'Black Box Theater') ON DUPLICATE KEY UPDATE event_name = 'Updated Theater Play', event_location = 'Updated Black Box Theater';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO calendars (calendar_id, calendar_name) VALUES (4, 'Hobby Calendar') ON DUPLICATE KEY UPDATE calendar_name = 'Updated Hobby Calendar';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO event_calendars (event_id, calendar_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE calendar_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO academic_calendars (academic_calendar_id, academic_year, start_date, end_date) VALUES (4, '2025-2026', '2025-09-01', '2026-06-30') ON DUPLICATE KEY UPDATE start_date = '2025-08-01';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO school_info (school_id, school_name, school_location) VALUES (4, 'LMN School', 'Rural Area') ON DUPLICATE KEY UPDATE school_name = 'Updated LMN School';",
  "### TABLEDATA\n\nCREATE TABLE events (\n   event_id INT,\n   event_name VARCHAR(255),\n   event_date DATE,\n   event_location VARCHAR(255)\n);\n\nCREATE TABLE calendars (\n   calendar_id INT,\n   calendar_name VARCHAR(255)\n);\n\nCREATE TABLE event_calendars (\n   event_id INT,\n   calendar_id INT\n);\n\nCREATE TABLE academic_calendars (\n   academic_calendar_id INT,\n   academic_year VARCHAR(10),\n   start_date DATE,\n   end_date DATE\n);\n\nCREATE TABLE school_info (\n   school_id INT,\n   school_name VARCHAR(255),\n   school_location VARCHAR(255)\n);\n\n### STATEMENT\n\nUPSERT INTO events (event_id, event_name, event_date, event_location) VALUES (5, 'Science Fair', '2023-06-05', 'Science Center') ON DUPLICATE KEY UPDATE event_name = 'Updated Science Fair', event_location = 'Updated Science Center';"
]