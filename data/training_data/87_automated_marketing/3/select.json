[
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE email_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address, segmentation_criteria FROM segmentation_emails WHERE opened = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address, send_date FROM segmentation_emails WHERE clicked = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE opened = TRUE AND clicked = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address FROM segmentation_emails WHERE segmentation_criteria = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE send_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, clicked FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_address FROM segmentation_emails WHERE opened IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails ORDER BY send_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(email_id) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT segmentation_criteria FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_address FROM segmentation_emails WHERE send_date BETWEEN '2022-01-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id FROM segmentation_emails WHERE segmentation_criteria LIKE '%Special%';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(email_id) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(send_date) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_address, send_date FROM segmentation_emails WHERE opened = TRUE AND send_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, opened, clicked FROM segmentation_emails WHERE email_address = 'test@example.com';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE clicked = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address FROM segmentation_emails WHERE opened = TRUE AND clicked = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE opened = TRUE AND clicked = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address FROM segmentation_emails WHERE opened = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE clicked = TRUE ORDER BY send_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM segmentation_emails WHERE opened = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_address, send_date FROM segmentation_emails WHERE clicked = TRUE AND opened = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT segmentation_criteria FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE opened = TRUE OR clicked = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address, segmentation_criteria FROM segmentation_emails WHERE send_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE send_date BETWEEN '2022-01-01' AND '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address FROM segmentation_emails WHERE opened = TRUE AND clicked = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(send_date) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT opened, COUNT(*) FROM segmentation_emails GROUP BY opened;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(DATEDIFF(NOW(), send_date)) AS days_since_send FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address, segmentation_criteria FROM segmentation_emails WHERE opened = FALSE AND clicked = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(IF(opened = TRUE, 1, 0)) AS opened_count, SUM(IF(clicked = TRUE, 1, 0)) AS clicked_count FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_emails WHERE opened = TRUE AND clicked = TRUE ORDER BY send_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT email_address) FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, email_address FROM segmentation_emails WHERE send_date < '2022-01-01' AND opened = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT email_id, send_date FROM segmentation_emails WHERE opened = TRUE OR clicked = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE segmentation_emails (\n  email_id INT PRIMARY KEY,\n  email_address VARCHAR(255) NOT NULL,\n  segmentation_criteria VARCHAR(255) NOT NULL,\n  send_date TIMESTAMP NOT NULL,\n  opened BOOLEAN,\n  clicked BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(send_date) AS first_send_date FROM segmentation_emails;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, email, segment_id FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, segment_id, last_purchase_date FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM segments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT segment_id, segment_name FROM segments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT segment_id, segment_name, segment_description FROM segments;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, segment_name FROM customers JOIN segments ON customers.segment_id = segments.segment_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, segment_name FROM customers JOIN segments ON customers.segment_id = segments.segment_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE segment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE segment_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE last_purchase_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE last_purchase_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY last_purchase_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers ORDER BY last_purchase_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers ORDER BY last_purchase_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, segment_name FROM customers JOIN segments ON customers.segment_id = segments.segment_id WHERE customers.last_purchase_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, segment_name FROM customers JOIN segments ON customers.segment_id = segments.segment_id WHERE customers.last_purchase_date > '2022-01-01' ORDER BY customers.last_purchase_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email, segment_name FROM customers JOIN segments ON customers.segment_id = segments.segment_id WHERE customers.last_purchase_date > '2022-01-01' ORDER BY customers.last_purchase_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segment_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE last_purchase_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, segment_name FROM customers INNER JOIN segments ON customers.segment_id = segments.segment_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE customer_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, segment_name FROM customers INNER JOIN segments ON customers.segment_id = segments.segment_id WHERE customers.last_purchase_date <= '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT segment_id, COUNT(*) AS total_customers FROM customers GROUP BY segment_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segment_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT segment_name, COUNT(*) AS total_customers FROM customers INNER JOIN segments ON customers.segment_id = segments.segment_id GROUP BY segment_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE last_purchase_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segment_id = 2 AND last_purchase_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, segment_name, segment_description FROM customers INNER JOIN segments ON customers.segment_id = segments.segment_id WHERE segments.segment_name = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customers ORDER BY last_purchase_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, segment_name, last_purchase_date FROM customers INNER JOIN segments ON customers.segment_id = segments.segment_id WHERE customer_name LIKE '%Smith%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_name = 'John Doe' OR segment_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segment_id = (SELECT segment_id FROM segments WHERE segment_name = 'Silver');",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE last_purchase_date = (SELECT MIN(last_purchase_date) FROM customers);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE segment_id = (SELECT MAX(segment_id) FROM segments);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segment_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    email VARCHAR(100),\n    segment_id INT,\n    last_purchase_date DATE\n);\n\nCREATE TABLE segments (\n    segment_id INT PRIMARY KEY,\n    segment_name VARCHAR(50),\n    segment_description TEXT\n);\n\n### STATEMENT\n\nSELECT segment_name, COUNT(*) AS total_customers FROM customers RIGHT JOIN segments ON customers.segment_id = segments.segment_id GROUP BY segment_name;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT segmentation_id, segmentation_name FROM segmentations WHERE segmentation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_behavior;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_behavior WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM promotional_emails;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT email_id, email_content FROM promotional_emails WHERE email_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT email_id, email_content, segmentation_id FROM promotional_emails WHERE segmentation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT segmentation_id, COUNT(*) AS count FROM segmentations GROUP BY segmentation_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS total_purchases FROM customer_behavior WHERE purchase_history IS NOT NULL GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT email_id, email_content, segmentation_name FROM promotional_emails INNER JOIN segmentations ON promotional_emails.segmentation_id = segmentations.segmentation_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, email, COUNT(*) AS total_clicks FROM customer_behavior WHERE click_history IS NOT NULL GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations WHERE criteria LIKE '%valuable%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_behavior WHERE purchase_history LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM promotional_emails WHERE email_content LIKE '%exclusive%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations WHERE segmentation_name = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_behavior WHERE email = 'john.doe@example.com';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT email_id, email_content FROM promotional_emails WHERE segmentation_id = (SELECT segmentation_id FROM segmentations WHERE segmentation_name = 'New Customers');",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations ORDER BY segmentation_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM customer_behavior ORDER BY customer_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM promotional_emails ORDER BY email_id ASC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations WHERE segmentation_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT segmentation_name FROM segmentations WHERE criteria LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_behavior WHERE purchase_history LIKE '%high_value%' AND click_history LIKE '%engaged%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT s.segmentation_name, p.email_content FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.email, s.segmentation_name FROM customer_behavior c JOIN promotional_emails p ON c.email = p.email JOIN segmentations s ON p.segmentation_id = s.segmentation_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.email, COUNT(p.email_id) AS num_emails_sent FROM customer_behavior c JOIN promotional_emails p ON c.email = p.email GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT segmentation_name, COUNT(email_id) AS num_emails_sent FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id GROUP BY segmentation_name;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT s.segmentation_name, COUNT(*) AS num_customers FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id JOIN customer_behavior c ON p.email = c.email GROUP BY s.segmentation_name;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT s.segmentation_name, AVG(length(email_content)) AS avg_email_length FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id GROUP BY s.segmentation_name;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, CASE WHEN purchase_history LIKE '%high_value%' THEN 'Valuable Customer' ELSE 'Regular Customer' END AS customer_type FROM customer_behavior c;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT s.segmentation_name, COUNT(p.email_id) AS num_emails_sent FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id WHERE s.segmentation_name LIKE '%target%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM promotional_emails WHERE segmentation_id IN (SELECT segmentation_id FROM segmentations WHERE criteria LIKE '%important%');",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.email FROM customer_behavior c LEFT JOIN promotional_emails p ON c.email = p.email WHERE p.email_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, COUNT(p.email_id) AS num_emails_sent FROM customer_behavior c LEFT JOIN promotional_emails p ON c.email = p.email GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT s.segmentation_name, COUNT(email_id) AS num_emails_sent FROM segmentations s RIGHT JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id GROUP BY s.segmentation_name;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentations WHERE criteria IS NOT NULL ORDER BY segmentation_id DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customer_behavior WHERE purchase_history IS NULL OR click_history IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT email_id, email_content FROM promotional_emails WHERE segmentation_id BETWEEN 1 AND 3;",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT s.segmentation_name FROM segmentations s JOIN promotional_emails p ON s.segmentation_id = p.segmentation_id WHERE p.email_content LIKE '%exclusive%';",
  "### TABLEDATA\n\nCREATE TABLE segmentations (\n    segmentation_id INT PRIMARY KEY,\n    segmentation_name STRING,\n    criteria STRING\n);\n\nCREATE TABLE customer_behavior (\n    customer_id INT PRIMARY KEY,\n    email STRING,\n    purchase_history STRING,\n    click_history STRING\n);\n\nCREATE TABLE promotional_emails (\n    email_id INT PRIMARY KEY,\n    email_content STRING,\n    segmentation_id INT,\n    FOREIGN KEY (segmentation_id) REFERENCES segmentations(segmentation_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, c.email, SUM(length(p.email_content)) AS total_email_length FROM customer_behavior c JOIN promotional_emails p ON c.email = p.email GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT * FROM segments;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT segment_name FROM segments;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT * FROM behaviors;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT behavior_name FROM behaviors;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT * FROM emails;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT sent_date, opened, clicked FROM emails;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers INNER JOIN emails ON customers.customer_id = emails.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers LEFT JOIN emails ON customers.customer_id = emails.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers RIGHT JOIN emails ON customers.customer_id = emails.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers JOIN emails ON customers.customer_id = emails.customer_id WHERE emails.opened = true;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers JOIN emails ON customers.customer_id = emails.customer_id WHERE emails.clicked = true;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, segments.segment_name FROM customers INNER JOIN segments ON customers.segment = segments.segment_name;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, behaviors.behavior_name FROM customers INNER JOIN behaviors ON customers.customer_id = behaviors.behavior_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers INNER JOIN emails ON customers.customer_id = emails.customer_id WHERE emails.opened = false;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers INNER JOIN emails ON customers.customer_id = emails.customer_id WHERE emails.clicked = false;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers INNER JOIN emails ON customers.customer_id = emails.customer_id ORDER BY emails.sent_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT customers.first_name, emails.sent_date FROM customers INNER JOIN emails ON customers.customer_id = emails.customer_id ORDER BY emails.sent_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers WHERE segment = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, s.segment_name FROM customers c JOIN segments s ON c.segment = s.segment_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, b.behavior_name FROM customers c JOIN behaviors b ON c.customer_id = b.behavior_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, e.sent_date FROM customers c JOIN emails e ON c.customer_id = e.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, e.sent_date FROM customers c JOIN emails e ON c.customer_id = e.customer_id WHERE e.opened = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, e.sent_date FROM customers c JOIN emails e ON c.customer_id = e.customer_id WHERE e.clicked = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, COUNT(*) AS email_count FROM customers c JOIN emails e ON c.customer_id = e.customer_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT s.segment_name, COUNT(*) AS customer_count FROM customers c JOIN segments s ON c.segment = s.segment_id GROUP BY s.segment_name;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT segment_name, behavior_name FROM segments s JOIN behaviors b ON s.segment_id = b.behavior_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, sent_date FROM customers c JOIN emails e ON c.customer_id = e.customer_id ORDER BY sent_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, MAX(e.sent_date) AS last_email_sent_date FROM customers c JOIN emails e ON c.customer_id = e.customer_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT segment_name, AVG(num_emails) AS avg_emails_per_customer FROM (SELECT c.segment, COUNT(*) as num_emails FROM customers c JOIN emails e ON c.customer_id = e.customer_id GROUP BY c.customer_id) AS temp JOIN segments s ON temp.segment = s.segment_id GROUP BY segment_name;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, opened, clicked FROM customers c JOIN emails e ON c.customer_id = e.customer_id WHERE opened = clicked;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT s.segment_name, COUNT(*) AS clicked_count FROM customers c JOIN emails e ON c.customer_id = e.customer_id JOIN segments s ON c.segment = s.segment_id WHERE e.clicked = TRUE GROUP BY s.segment_name;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT first_name, last_name, COUNT(*) AS behavior_count FROM customers c JOIN behaviors b ON c.customer_id = b.behavior_id GROUP BY c.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT segment_name, opened, COUNT(*) AS email_count FROM customers c JOIN emails e ON c.customer_id = e.customer_id JOIN segments s ON c.segment = s.segment_id GROUP BY segment_name, opened;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, e.sent_date FROM customers c LEFT JOIN emails e ON c.customer_id = e.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, e.sent_date FROM customers c RIGHT JOIN emails e ON c.customer_id = e.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT s.segment_name, COUNT(*) AS num_emails FROM customers c JOIN emails e ON c.customer_id = e.customer_id JOIN segments s ON c.segment = s.segment_id GROUP BY s.segment_name HAVING num_emails > 10;",
  "### TABLEDATA\n\nCREATE TABLE customers ( \n    customer_id INT PRIMARY KEY, \n    first_name VARCHAR(50), \n    last_name VARCHAR(50), \n    email VARCHAR(100), \n    segment VARCHAR(50) \n);\n\nCREATE TABLE segments ( \n    segment_id INT PRIMARY KEY, \n    segment_name VARCHAR(50) \n);\n\nCREATE TABLE behaviors ( \n    behavior_id INT PRIMARY KEY, \n    behavior_name VARCHAR(50) \n);\n\nCREATE TABLE emails ( \n    email_id INT PRIMARY KEY, \n    customer_id INT, \n    sent_date TIMESTAMP, \n    opened BOOLEAN, \n    clicked BOOLEAN \n);\n\n### STATEMENT\n\nSELECT c.first_name, c.last_name, COUNT(*) AS reactivated_customers FROM customers c JOIN emails e ON c.customer_id = e.customer_id WHERE e.clicked = TRUE GROUP BY c.customer_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segmentation = 'Premium';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM orders WHERE customer_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 50.00;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM segmentation_rules;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT rule_name FROM segmentation_rules WHERE rule_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM email_campaigns;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT campaign_name FROM email_campaigns WHERE campaign_type = 'Promotional';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.order_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT campaign_name, campaign_type FROM email_campaigns WHERE segmentation = 'Standard';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, email_campaigns.campaign_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN email_campaigns ON customers.segmentation = email_campaigns.segmentation;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, price, customer_name FROM products JOIN orders ON products.product_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount, campaign_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN email_campaigns ON customers.segmentation = email_campaigns.segmentation WHERE campaign_type = 'Promotional';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, total_amount, campaign_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id LEFT JOIN email_campaigns ON customers.segmentation = email_campaigns.segmentation WHERE campaign_type IS NULL OR campaign_type = 'General';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customers.customer_name, orders.order_date, products.product_name, segmentation_rules.rule_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN products ON orders.order_id = products.product_id JOIN segmentation_rules ON customers.segmentation = segmentation_rules.segmentation;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE segmentation = 'VIP';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT order_id, total_amount FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE total_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT campaign_name, campaign_type FROM email_campaigns WHERE segmentation = 'New Customers';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, p.product_name, p.price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.order_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT rule_name, segmentation FROM segmentation_rules WHERE rule_name LIKE '%discount%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT segmentation FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT campaign_name, COUNT(*) AS total_customers FROM email_campaigns GROUP BY campaign_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM orders WHERE total_amount > 500);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, COUNT(*) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING total_orders > 3;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT campaign_name, campaign_type, COUNT(*) AS total_customers FROM email_campaigns GROUP BY campaign_name, campaign_type;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT DISTINCT segmentation FROM customers WHERE segmentation IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, p.product_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN products p ON o.order_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE email LIKE '%gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT AVG(total_amount) AS average_amount FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE segmentation_rules (\n    rule_id INT PRIMARY KEY,\n    rule_name VARCHAR(255),\n    segmentation VARCHAR(50)\n);\n\nCREATE TABLE email_campaigns (\n    campaign_id INT PRIMARY KEY,\n    campaign_name VARCHAR(255),\n    campaign_type VARCHAR(50),\n    segmentation VARCHAR(50)\n);\n\n### STATEMENT\n\nSELECT customer_name, order_date, total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY order_date ASC LIMIT 5;"
]