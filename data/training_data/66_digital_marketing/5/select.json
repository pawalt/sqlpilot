[
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT * FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, comments FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, comments FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT comments, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT comments, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT shares, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, comments FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, comments, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, comments, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, comments, shares FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, comments, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT likes, shares, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, comments, shares, engagement_rate FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, comments FROM social_media_engagement_metrics WHERE likes > 100 AND comments > 50;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares, engagement_rate FROM social_media_engagement_metrics WHERE shares > 200 OR engagement_rate > 0.05;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM social_media_engagement_metrics WHERE likes < 50 ORDER BY likes DESC;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, engagement_rate FROM social_media_engagement_metrics WHERE engagement_rate BETWEEN 0.1 AND 0.5;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT AVG(likes) AS avg_likes, AVG(comments) AS avg_comments FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT SUM(likes) AS total_likes, SUM(comments) AS total_comments FROM social_media_engagement_metrics;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM social_media_engagement_metrics WHERE likes > (SELECT AVG(likes) FROM social_media_engagement_metrics);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, comments FROM social_media_engagement_metrics WHERE comments IN (SELECT comments FROM social_media_engagement_metrics WHERE comments > 50);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, engagement_rate FROM social_media_engagement_metrics ORDER BY engagement_rate DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares FROM social_media_engagement_metrics WHERE shares = (SELECT MAX(shares) FROM social_media_engagement_metrics);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM social_media_engagement_metrics WHERE likes > (SELECT likes FROM social_media_engagement_metrics WHERE post_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares, engagement_rate FROM social_media_engagement_metrics WHERE shares > 100 AND engagement_rate < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, engagement_rate FROM social_media_engagement_metrics WHERE likes > comments * 2;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, comments FROM social_media_engagement_metrics WHERE likes + comments > 100;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares FROM social_media_engagement_metrics WHERE engagement_rate > 0.05 AND (likes > 50 OR comments > 30);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, shares, engagement_rate FROM social_media_engagement_metrics WHERE likes > 100 AND comments > 50;",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, engagement_rate FROM social_media_engagement_metrics WHERE likes > (SELECT SUM(likes) FROM social_media_engagement_metrics);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, engagement_rate FROM social_media_engagement_metrics WHERE engagement_rate = (SELECT MIN(engagement_rate) FROM social_media_engagement_metrics);",
  "### TABLEDATA\n\nCREATE TABLE social_media_engagement_metrics (\n    post_id INT,\n    likes INT,\n    comments INT,\n    shares INT,\n    engagement_rate FLOAT\n);\n\n### STATEMENT\n\nSELECT post_id, likes, engagement_rate FROM social_media_engagement_metrics WHERE likes > comments AND shares > likes;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_content, likes FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT followers, following FROM users;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username, join_date FROM users;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM posts WHERE post_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_content FROM posts WHERE likes > 100;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT username, followers FROM users WHERE followers > 500;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM posts ORDER BY post_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY join_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content FROM posts WHERE likes > 100 AND shares < 50;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users WHERE followers > 1000 AND following < 500;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM posts WHERE comments < 10;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, followers FROM users WHERE join_date < '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM posts LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, username, followers FROM users LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes, comments FROM posts WHERE post_id BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT user_id, followers FROM users WHERE followers BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM posts WHERE post_content LIKE '%example%';",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM posts WHERE likes > 100 AND shares > 50;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM posts WHERE comments < 10 ORDER BY likes DESC;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT username, followers FROM users WHERE followers > 1000 AND following < 500;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_content FROM posts WHERE likes BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, comments FROM posts WHERE comments > 50 AND post_content LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM posts WHERE post_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT username, join_date FROM users WHERE join_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM posts p JOIN users u ON p.post_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_content, likes, comments FROM posts WHERE likes > comments;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, p.post_content FROM posts p JOIN users u ON p.post_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, SUM(likes) AS total_likes FROM posts GROUP BY post_id;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(likes) AS avg_likes FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(p.post_id) AS total_posts FROM users u JOIN posts p ON u.user_id = p.post_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_posts FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, MAX(likes) AS max_likes FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT MIN(shares) AS min_shares FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM posts WHERE likes > (SELECT AVG(likes) FROM posts);",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM posts WHERE post_content LIKE '%funny%' OR post_content LIKE '%hilarious%';",
  "### TABLEDATA\n\nCREATE TABLE posts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username varchar(255),\n    followers INT,\n    following INT,\n    join_date DATE\n);\n\n### STATEMENT\n\nSELECT post_id, comments, shares FROM posts WHERE comments > shares AND likes < 50 ORDER BY comments DESC, shares ASC;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM SocialMediaPosts;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content FROM SocialMediaPosts;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes, shares FROM SocialMediaPosts WHERE likes > 100;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM AudienceEngagement;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, post_id, likes FROM AudienceEngagement WHERE likes > 50;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, SUM(likes) AS total_likes FROM AudienceEngagement GROUP BY post_id;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM ContentStrategyMetrics;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT metric_name, metric_value FROM ContentStrategyMetrics WHERE metric_value > 0.5;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT metric_name, AVG(metric_value) AS avg_value FROM ContentStrategyMetrics GROUP BY metric_name;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT metric_name, metric_value, date_recorded FROM ContentStrategyMetrics WHERE date_recorded = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_content, likes, shares FROM SocialMediaPosts WHERE post_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT comment, likes, shares FROM AudienceEngagement WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM ContentStrategyMetrics WHERE metric_name LIKE 'engagement%';",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes, shares FROM SocialMediaPosts WHERE post_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM SocialMediaPosts ORDER BY likes DESC;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(likes) AS total_likes FROM AudienceEngagement GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT metric_name, MAX(metric_value) AS max_value FROM ContentStrategyMetrics GROUP BY metric_name;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT date_recorded, AVG(metric_value) AS avg_value FROM ContentStrategyMetrics GROUP BY date_recorded;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM SocialMediaPosts WHERE likes BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, post_id, likes, shares FROM AudienceEngagement WHERE post_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes, comments, shares FROM SocialMediaPosts WHERE likes > 100 AND shares < 50",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, comments FROM SocialMediaPosts WHERE comments > 20",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, post_id, comment FROM AudienceEngagement WHERE likes > 50 AND shares > 10",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT * FROM ContentStrategyMetrics WHERE date_recorded = '2022-01-15'",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes FROM SocialMediaPosts WHERE post_id IN (SELECT post_id FROM AudienceEngagement WHERE likes > 50)",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, post_content, likes FROM SocialMediaPosts WHERE likes > comments",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, likes, shares FROM AudienceEngagement WHERE user_id = 123",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT metric_id, metric_name FROM ContentStrategyMetrics WHERE metric_value > 0.5",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT post_id, likes, shares FROM SocialMediaPosts WHERE likes + shares > 100",
  "### TABLEDATA\n\nCREATE TABLE SocialMediaPosts (\n    post_id INT PRIMARY KEY,\n    post_content TEXT,\n    likes INT,\n    comments INT,\n    shares INT\n);\n\n\nCREATE TABLE AudienceEngagement (\n    user_id INT PRIMARY KEY,\n    post_id INT,\n    comment TEXT,\n    likes INT,\n    shares INT\n);\n\n\nCREATE TABLE ContentStrategyMetrics (\n    metric_id INT PRIMARY KEY,\n    metric_name VARCHAR(50),\n    metric_value FLOAT,\n    date_recorded DATE\n);\n\n### STATEMENT\n\nSELECT user_id, post_id, likes FROM AudienceEngagement WHERE post_id IN (SELECT post_id FROM SocialMediaPosts WHERE likes > 50)",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, email FROM users",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, email FROM users WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content FROM posts",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content, created_at FROM posts WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, comment_text FROM users JOIN comments ON users.user_id = comments.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content, comment_text FROM posts JOIN comments ON posts.post_id = comments.post_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content FROM users JOIN posts ON users.user_id = posts.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content, comment_text FROM users JOIN posts ON users.user_id = posts.user_id JOIN comments ON posts.post_id = comments.post_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, likes.created_at FROM users JOIN likes ON users.user_id = likes.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content, likes.created_at FROM users JOIN posts ON users.user_id = posts.user_id JOIN likes ON posts.post_id = likes.post_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM posts WHERE post_content LIKE '%awesome%'",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, comment_text FROM users INNER JOIN comments ON users.user_id = comments.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content FROM users INNER JOIN posts ON users.user_id = posts.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content, comment_text FROM users INNER JOIN posts ON users.user_id = posts.user_id INNER JOIN comments ON posts.post_id = comments.post_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, likes.created_at FROM users INNER JOIN likes ON users.user_id = likes.user_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, post_content, likes.created_at FROM users INNER JOIN posts ON users.user_id = posts.user_id INNER JOIN likes ON posts.post_id = likes.post_id",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, user_name FROM users WHERE user_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM posts WHERE user_id = 1 ORDER BY created_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT p.post_id, p.post_content, u.user_name FROM posts p INNER JOIN users u ON p.user_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(p.post_id) AS total_posts FROM users u LEFT JOIN posts p ON u.user_id = p.user_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(c.comment_id) AS total_comments FROM users u LEFT JOIN comments c ON u.user_id = c.user_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT p.post_id, p.post_content, COUNT(l.like_id) AS total_likes FROM posts p LEFT JOIN likes l ON p.post_id = l.post_id GROUP BY p.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, SUM(post_id) AS total_posts FROM posts GROUP BY user_id HAVING COUNT(post_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, AVG(like_id) AS avg_likes FROM likes GROUP BY user_id HAVING AVG(like_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.post_content FROM users u INNER JOIN posts p ON u.user_id = p.user_id WHERE p.created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, COUNT(post_id) AS total_posts FROM users u INNER JOIN posts p ON u.user_id = p.user_id GROUP BY user_name ORDER BY total_posts DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(c.comment_id) AS total_comments FROM users u LEFT JOIN comments c ON u.user_id = c.user_id WHERE c.created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(l.like_id) AS total_likes FROM users u LEFT JOIN likes l ON u.user_id = l.user_id GROUP BY u.user_name HAVING total_likes > 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.post_content, COUNT(c.comment_id) AS total_comments FROM users u INNER JOIN posts p ON u.user_id = p.user_id LEFT JOIN comments c ON p.post_id = c.post_id GROUP BY u.user_name, p.post_content;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, p.post_content, COUNT(l.like_id) AS total_likes FROM users u INNER JOIN posts p ON u.user_id = p.user_id LEFT JOIN likes l ON p.post_id = l.post_id GROUP BY u.user_name, p.post_content;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(p.post_id) AS total_posts, COUNT(c.comment_id) AS total_comments FROM users u LEFT JOIN posts p ON u.user_id = p.user_id LEFT JOIN comments c ON p.post_id = c.post_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(p.post_id) AS total_posts, COUNT(l.like_id) AS total_likes FROM users u LEFT JOIN posts p ON u.user_id = p.user_id LEFT JOIN likes l ON p.post_id = l.post_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT u.user_name, COUNT(c.comment_id) AS total_comments, COUNT(l.like_id) AS total_likes FROM users u LEFT JOIN comments c ON u.user_id = c.user_id LEFT JOIN likes l ON c.post_id = l.post_id GROUP BY u.user_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  user_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT,\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  comment_text TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  post_id INT,\n  user_id INT,\n  created_at TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_name, SUM(total) AS total_interactions FROM (SELECT user_name, COUNT(post_id) AS total FROM posts GROUP BY user_id UNION SELECT user_name, COUNT(comment_id) AS total FROM comments GROUP BY user_id UNION SELECT user_name, COUNT(like_id) AS total FROM likes GROUP BY user_id) AS user_interactions GROUP BY user_name ORDER BY total_interactions DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email, date_joined FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM posts;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content, created_at FROM posts WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM likes;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, post_id FROM likes WHERE like_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM comments;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, post_id, comment_content FROM comments WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM engagements;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, post_id, engagement_timestamp FROM engagements WHERE post_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email FROM users JOIN posts ON users.user_id = posts.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content, created_at, username FROM posts JOIN users ON posts.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT username, email, comment_content FROM users JOIN comments ON users.user_id = comments.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT post_content, comment_content FROM posts JOIN comments ON posts.post_id = comments.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM posts WHERE post_content LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM likes WHERE like_timestamp BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM comments WHERE comment_timestamp > '2022-03-01' ORDER BY comment_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM engagements WHERE engagement_timestamp < '2022-05-01' ORDER BY engagement_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE date_joined >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT posts.post_id, posts.post_content, posts.created_at, users.username FROM posts INNER JOIN users ON posts.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT posts.post_id, posts.post_content, posts.created_at, users.username FROM posts LEFT JOIN users ON posts.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(posts.post_id) AS total_posts FROM users LEFT JOIN posts ON users.user_id = posts.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(engagements.engagement_id) AS total_engagements FROM users LEFT JOIN engagements ON users.user_id = engagements.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT posts.post_id, posts.post_content, users.username, COUNT(likes.like_id) AS total_likes FROM posts INNER JOIN users ON posts.user_id = users.user_id LEFT JOIN likes ON posts.post_id = likes.post_id GROUP BY posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT comments.comment_id, comments.comment_content, users.username, posts.post_content FROM comments INNER JOIN users ON comments.user_id = users.user_id INNER JOIN posts ON comments.post_id = posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, engagements.engagement_timestamp FROM engagements INNER JOIN users ON engagements.user_id = users.user_id WHERE engagements.engagement_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT posts.post_id, posts.post_content, COUNT(comments.comment_id) AS total_comments FROM posts LEFT JOIN comments ON posts.post_id = comments.post_id GROUP BY posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(DISTINCT posts.post_id) AS total_posts FROM users INNER JOIN posts ON users.user_id = posts.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, MAX(posts.created_at) AS latest_post_date FROM users INNER JOIN posts ON users.user_id = posts.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, AVG(engagements.engagement_id) AS avg_engagements FROM users INNER JOIN engagements ON users.user_id = engagements.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, SUM(likes.like_id) AS total_likes FROM users LEFT JOIN likes ON users.user_id = likes.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, COUNT(DISTINCT engagements.post_id) AS total_engaged_posts FROM users LEFT JOIN engagements ON users.user_id = engagements.user_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, posts.post_content, COUNT(DISTINCT likes.like_id) AS total_likes FROM users INNER JOIN posts ON users.user_id = posts.user_id LEFT JOIN likes ON posts.post_id = likes.post_id GROUP BY users.username, posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, posts.post_content, COUNT(DISTINCT comments.comment_id) AS total_comments FROM users INNER JOIN posts ON users.user_id = posts.user_id LEFT JOIN comments ON posts.post_id = comments.post_id GROUP BY users.username, posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, SUM(DATE_PART('day', engagements.engagement_timestamp - posts.created_at)) AS total_engagement_days FROM users INNER JOIN engagements ON users.user_id = engagements.user_id INNER JOIN posts ON engagements.post_id = posts.post_id GROUP BY users.username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, posts.post_content, MAX(comments.comment_timestamp) AS latest_comment FROM users INNER JOIN posts ON users.user_id = posts.user_id LEFT JOIN comments ON posts.post_id = comments.post_id GROUP BY users.username, posts.post_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  date_joined DATE\n)\n\nCREATE TABLE posts (\n  post_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_content TEXT,\n  created_at TIMESTAMP\n)\n\nCREATE TABLE likes (\n  like_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_timestamp TIMESTAMP\n)\n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  comment_content TEXT,\n  comment_timestamp TIMESTAMP\n)\n\nCREATE TABLE engagements (\n  engagement_id INT PRIMARY KEY,\n  user_id INT REFERENCES users(user_id),\n  post_id INT REFERENCES posts(post_id),\n  like_id INT REFERENCES likes(like_id),\n  comment_id INT REFERENCES comments(comment_id),\n  engagement_timestamp TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT users.username, AVG(DATE_PART('day', engagements.engagement_timestamp - posts.created_at)) AS avg_engagement_days FROM users INNER JOIN engagements ON users.user_id = engagements.user_id INNER JOIN posts ON engagements.post_id = posts.post_id GROUP BY users.username;"
]