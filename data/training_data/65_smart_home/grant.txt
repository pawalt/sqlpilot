<t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>GRANT SELECT, INSERT, UPDATE ON smart_home_devices TO user1;</stat><divider><t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>grant select, insert, update on smart_home_devices to user1;</stat><divider><t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>GRANT SELECT on smart_home_devices TO user2;</stat><divider><t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>grant select on smart_home_devices to user2;</stat><divider><t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>GRANT INSERT on smart_home_devices TO user3;</stat><divider><t>CREATE TABLE smart_home_devices ( device_id SERIAL PRIMARY KEY, device_name VARCHAR(50), device_type VARCHAR(50), room_name VARCHAR(50), owner_id INT, active BOOLEAN default TRUE );</t><stat>grant insert on smart_home_devices to user3;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT SELECT ON users TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant select on users to my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT INSERT ON devices TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant insert on devices to my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>GRANT SELECT, INSERT, UPDATE ON device_logs TO my_user;</stat><divider><t>CREATE TABLE device_logs ( log_id INT PRIMARY KEY, device_id INT NOT NULL, log_timestamp TIMESTAMP NOT NULL DEFAULT NOW(), log_message TEXT NOT NULL, FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE )

CREATE TABLE devices ( device_id INT PRIMARY KEY, device_name VARCHAR(50) NOT NULL, device_type VARCHAR(50) NOT NULL, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW(), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE )

CREATE TABLE users ( user_id INT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT NOW() )</t><stat>grant select, insert, update on device_logs to my_user;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE ON houses TO user1;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>grant select, insert, update on houses to user1;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>GRANT SELECT, INSERT, UPDATE, DELETE ON houses TO user2;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>grant select, insert, update, delete on houses to user2;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>GRANT ALL PRIVILEGES ON houses TO admin;</stat><divider><t>CREATE TABLE IF NOT EXISTS houses (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL)</t><stat>grant all privileges on houses to admin;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT ON users TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select on users to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT INSERT, UPDATE, DELETE ON devices TO admin_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant insert, update, delete on devices to admin_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);
</t><stat>grant select, insert, update on schedules to user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>GRANT SELECT, INSERT, UPDATE ON schedules TO user_role;</stat><divider><t>CREATE TABLE schedules (
    schedule_id INT PRIMARY KEY,
    schedule_name VARCHAR(50) NOT NULL,
    device_id INT REFERENCES devices(device_id),
    start_time TIMESTAMP,
    end_time TIMESTAMP
);


CREATE TABLE device_logs (
    log_id INT PRIMARY KEY,
    device_id INT REFERENCES devices(device_id),
    log_timestamp TIMESTAMP,
    log_message TEXT
);


CREATE TABLE rooms (
    room_id INT PRIMARY KEY,
    room_name VARCHAR(50) NOT NULL
);


CREATE TABLE devices (
    device_id INT PRIMARY KEY,
    device_name VARCHAR(50) NOT NULL,
    device_type VARCHAR(50) NOT NULL,
    user_id INT REFERENCES users(user_id)
);


CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);
</t><stat>grant select, insert, update on schedules to user_role;</stat>