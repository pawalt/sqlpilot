[
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (1, 'Device 1', 1001, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (2, 'Device 2', 1002, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (3, 'Device 3', 1003, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (4, 'Device 4', 1004, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (5, 'Device 5', 1005, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (6, 'Device 6', 1006, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (7, 'Device 7', 1007, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (8, 'Device 8', 1008, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (9, 'Device 9', 1009, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (10, 'Device 10', 1010, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (11, 'Device 11', 1011, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (12, 'Device 12', 1012, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (13, 'Device 13', 1013, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (14, 'Device 14', 1014, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (15, 'Device 15', 1015, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (16, 'Device 16', 1016, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (17, 'Device 17', 1017, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (18, 'Device 18', 1018, 'readwrite');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (19, 'Device 19', 1019, 'read');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nUPSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (20, 'Device 20', 1020, 'write');",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (1, 'Device1', 101, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device1_updated', user_id = 101, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (2, 'Device2', 102, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device2_updated', user_id = 102, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (3, 'Device3', 103, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device3_updated', user_id = 103, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (4, 'Device4', 104, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device4_updated', user_id = 104, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (5, 'Device5', 105, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device5_updated', user_id = 105, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (6, 'Device6', 106, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device6_updated', user_id = 106, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (7, 'Device7', 107, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device7_updated', user_id = 107, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (8, 'Device8', 108, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device8_updated', user_id = 108, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (9, 'Device9', 109, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device9_updated', user_id = 109, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (10, 'Device10', 110, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device10_updated', user_id = 110, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (11, 'Device11', 111, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device11_updated', user_id = 111, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (12, 'Device12', 112, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device12_updated', user_id = 112, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (13, 'Device13', 113, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device13_updated', user_id = 113, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (14, 'Device14', 114, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device14_updated', user_id = 114, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (15, 'Device15', 115, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device15_updated', user_id = 115, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (16, 'Device16', 116, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device16_updated', user_id = 116, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (17, 'Device17', 117, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device17_updated', user_id = 117, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (18, 'Device18', 118, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device18_updated', user_id = 118, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (19, 'Device19', 119, 'READ') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device19_updated', user_id = 119, user_permission = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE device_access_control (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50),\n    user_id INT,\n    user_permission VARCHAR(20)\n);\n\n### STATEMENT\n\nINSERT INTO device_access_control (device_id, device_name, user_id, user_permission) VALUES (20, 'Device20', 120, 'WRITE') ON CONFLICT (device_id) DO UPDATE SET device_name = 'Device20_updated', user_id = 120, user_permission = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'pass123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', password = 'pass123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (1, 'phone', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'phone', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'pass456') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', password = 'pass456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (2, 'laptop', 2) ON CONFLICT (device_id) DO UPDATE SET device_name = 'laptop', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alice_green', 'pass789') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_green', password = 'pass789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (3, 'tablet', 3) ON CONFLICT (device_id) DO UPDATE SET device_name = 'tablet', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'bob_jones', 'passabc') ON CONFLICT (user_id) DO UPDATE SET username = 'bob_jones', password = 'passabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (4, 'watch', 4) ON CONFLICT (device_id) DO UPDATE SET device_name = 'watch', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'sara_wilson', 'passdef') ON CONFLICT (user_id) DO UPDATE SET username = 'sara_wilson', password = 'passdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (5, 'headphones', 5) ON CONFLICT (device_id) DO UPDATE SET device_name = 'headphones', user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'mike_brown', 'passtuv') ON CONFLICT (user_id) DO UPDATE SET username = 'mike_brown', password = 'passtuv';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (6, 'speaker', 6) ON CONFLICT (device_id) DO UPDATE SET device_name = 'speaker', user_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'emily_gray', 'passxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'emily_gray', password = 'passxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (7, 'camera', 7) ON CONFLICT (device_id) DO UPDATE SET device_name = 'camera', user_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (8, 'tom_smith', 'password1') ON CONFLICT (user_id) DO UPDATE SET username = 'tom_smith', password = 'password1';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (8, 'printer', 8) ON CONFLICT (device_id) DO UPDATE SET device_name = 'printer', user_id = 8;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (9, 'linda_adams', 'password2') ON CONFLICT (user_id) DO UPDATE SET username = 'linda_adams', password = 'password2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (9, 'keyboard', 9) ON CONFLICT (device_id) DO UPDATE SET device_name = 'keyboard', user_id = 9;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (10, 'alex_carter', 'password3') ON CONFLICT (user_id) DO UPDATE SET username = 'alex_carter', password = 'password3';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (10, 'monitor', 10) ON CONFLICT (device_id) DO UPDATE SET device_name = 'monitor', user_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated', password = 'new_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (2, 'jane_smith', 'admin123') ON CONFLICT (user_id) DO UPDATE SET password = 'new_admin123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (101, 'phone', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'phone_updated', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (102, 'tablet', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'tablet_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (3, 'alice_miller', 'test456') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_miller_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (4, 'bob_smith', 'pass789') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (103, 'laptop', 2) ON CONFLICT (device_id) DO UPDATE SET device_name = 'laptop_updated', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (104, 'smartwatch', 2) ON CONFLICT (device_id) DO UPDATE SET device_name = 'smartwatch_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (5, 'emma_johnson', '123456') ON CONFLICT (user_id) DO UPDATE SET username = 'emma_johnson_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (6, 'mike_wilson', 'pass123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (105, 'camera', 3) ON CONFLICT (device_id) DO UPDATE SET device_name = 'camera_updated', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (106, 'speaker', 3) ON CONFLICT (device_id) DO UPDATE SET device_name = 'speaker_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (7, 'sarah_white', 'test123') ON CONFLICT (user_id) DO UPDATE SET username = 'sarah_white_updated', password = 'new_test123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (8, 'tom_wilson', 'abc123') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (107, 'headphones', 4) ON CONFLICT (device_id) DO UPDATE SET device_name = 'headphones_updated', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (108, 'smartphone', 4) ON CONFLICT (device_id) DO UPDATE SET device_name = 'smartphone_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (9, 'olivia_brown', 'qwerty321') ON CONFLICT (user_id) DO UPDATE SET username = 'olivia_brown_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password) VALUES (10, 'sam_jones', 'pass456') ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (109, 'printer', 5) ON CONFLICT (device_id) DO UPDATE SET device_name = 'printer_updated', user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, user_id) VALUES (110, 'router', 5) ON CONFLICT (device_id) DO UPDATE SET device_name = 'router_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'john_doe', 'john.doe@example.com', 'hashed_password_1') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (2, 'jane_smith', 'jane.smith@example.com', 'hashed_password_2') ON CONFLICT (user_id) DO UPDATE SET email = 'jane.smith_updated@example.com' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (1, 'phone', 'mobile', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'phone_updated' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (2, 'laptop', 'computer', 2) ON CONFLICT (device_id) DO UPDATE SET device_type = 'laptop_updated' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (1, 'read_only', 'mobile', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'read_write' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (2, 'admin', 'computer', 2) ON CONFLICT (permission_id) DO UPDATE SET device_type = 'laptop' ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (3, 'alice_wonder', 'alice.wonder@example.com', 'hashed_password_3') ON CONFLICT (user_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (3, 'tablet', 'mobile', 3) ON CONFLICT (device_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (3, 'read_write', 'tablet', 3) ON CONFLICT (permission_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (4, 'bob_carter', 'bob.carter@example.com', 'hashed_password_4') ON CONFLICT (user_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (4, 'printer', 'peripheral', 4) ON CONFLICT (device_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (4, 'guest', 'peripheral', 4) ON CONFLICT (permission_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (5, 'eve_white', 'eve.white@example.com', 'hashed_password_5') ON CONFLICT (user_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (5, 'speaker', 'audio', 5) ON CONFLICT (device_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (5, 'editor', 'audio', 5) ON CONFLICT (permission_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (6, 'sam_green', 'sam.green@example.com', 'hashed_password_6') ON CONFLICT (user_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (6, 'router', 'networking', 6) ON CONFLICT (device_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (6, 'admin', 'networking', 6) ON CONFLICT (permission_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (7, 'mary_black', 'mary.black@example.com', 'hashed_password_7') ON CONFLICT (user_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (7, 'monitor', 'display', 7) ON CONFLICT (device_id) DO NOTHING ",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (7, 'viewer', 'display', 7) ON CONFLICT (permission_id) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (1, 'John', 'john@example.com', 'hash123') ON CONFLICT (user_id) DO UPDATE SET username = 'John', email = 'john@example.com', password_hash = 'hash123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (1, 'Phone', 'Mobile', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Phone', device_type = 'Mobile', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (1, 'Read', 'Mobile', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Read', device_type = 'Mobile', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (2, 'Alice', 'alice@example.com', 'hash456') ON CONFLICT (user_id) DO UPDATE SET username = 'Alice', email = 'alice@example.com', password_hash = 'hash456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (2, 'Laptop', 'Computer', 2) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Laptop', device_type = 'Computer', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (2, 'Write', 'Computer', 2) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Write', device_type = 'Computer', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (3, 'Bob', 'bob@example.com', 'hash789') ON CONFLICT (user_id) DO UPDATE SET username = 'Bob', email = 'bob@example.com', password_hash = 'hash789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (3, 'Tablet', 'Mobile', 3) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Tablet', device_type = 'Mobile', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (3, 'Delete', 'Mobile', 3) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Delete', device_type = 'Mobile', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (4, 'Eve', 'eve@example.com', 'hashabc') ON CONFLICT (user_id) DO UPDATE SET username = 'Eve', email = 'eve@example.com', password_hash = 'hashabc';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (4, 'Smartwatch', 'Wearable', 4) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Smartwatch', device_type = 'Wearable', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (4, 'Execute', 'Wearable', 4) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Execute', device_type = 'Wearable', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (5, 'Grace', 'grace@example.com', 'hashxyz') ON CONFLICT (user_id) DO UPDATE SET username = 'Grace', email = 'grace@example.com', password_hash = 'hashxyz';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (5, 'Desktop', 'Computer', 5) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Desktop', device_type = 'Computer', user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (5, 'Modify', 'Computer', 5) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Modify', device_type = 'Computer', user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (6, 'Emma', 'emma@example.com', 'hashdef') ON CONFLICT (user_id) DO UPDATE SET username = 'Emma', email = 'emma@example.com', password_hash = 'hashdef';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (6, 'Smartphone', 'Mobile', 6) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Smartphone', device_type = 'Mobile', user_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (6, 'Share', 'Mobile', 6) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'Share', device_type = 'Mobile', user_id = 6;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, email, password_hash) VALUES (7, 'Jack', 'jack@example.com', 'hashghi') ON CONFLICT (user_id) DO UPDATE SET username = 'Jack', email = 'jack@example.com', password_hash = 'hashghi';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, device_type, user_id) VALUES (7, 'SmartTV', 'Home', 7) ON CONFLICT (device_id) DO UPDATE SET device_name = 'SmartTV', device_type = 'Home', user_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE devices (\n    device_id INT PRIMARY KEY,\n    device_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    device_type VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, device_type, user_id) VALUES (7, 'View', 'Home', 7) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'View', device_type = 'Home', user_id = 7;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, role, device_id) VALUES (1, 'john_doe', 'password123', 'admin', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', password = 'password123', role = 'admin', device_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, role, device_id) VALUES (2, 'jane_smith', 'qwerty', 'user', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', password = 'qwerty', role = 'user', device_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (1, 'iPhone X', 'iOS 14.4', 'Apple', 1) ON CONFLICT (device_id) DO UPDATE SET device_name = 'iPhone X', os_version = 'iOS 14.4', manufacturer = 'Apple', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (2, 'Samsung Galaxy S20', 'Android 11', 'Samsung', 2) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Samsung Galaxy S20', os_version = 'Android 11', manufacturer = 'Samsung', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name, permissions) VALUES (1, 'admin', '{\"create\": true, \"read\": true, \"update\": true, \"delete\": true}') ON CONFLICT (role_id) DO UPDATE SET role_name = 'admin', permissions = '{\"create\": true, \"read\": true, \"update\": true, \"delete\": true}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name, permissions) VALUES (2, 'user', '{\"create\": true, \"read\": true, \"update\": false, \"delete\": false}') ON CONFLICT (role_id) DO UPDATE SET role_name = 'user', permissions = '{\"create\": true, \"read\": true, \"update\": false, \"delete\": false}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (1, 'create_user', 'Permission to create a new user', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'create_user', description = 'Permission to create a new user', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (2, 'read_user', 'Permission to read user information', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'read_user', description = 'Permission to read user information', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (3, 'update_user', 'Permission to update user information', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'update_user', description = 'Permission to update user information', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (4, 'delete_user', 'Permission to delete a user', 1) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'delete_user', description = 'Permission to delete a user', role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (5, 'create_post', 'Permission to create a new post', 2) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'create_post', description = 'Permission to create a new post', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (6, 'read_post', 'Permission to read post information', 2) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'read_post', description = 'Permission to read post information', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (7, 'update_post', 'Permission to update post information', 2) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'update_post', description = 'Permission to update post information', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (8, 'delete_post', 'Permission to delete a post', 2) ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'delete_post', description = 'Permission to delete a post', role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, role, device_id) VALUES (3, 'alice_smith', 'p@ssw0rd', 'admin', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'alice_smith', password = 'p@ssw0rd', role = 'admin', device_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password, role, device_id) VALUES (4, 'bob_jones', 'securepass', 'user', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'bob_jones', password = 'securepass', role = 'user', device_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (3, 'Google Pixel 5', 'Android 11', 'Google', 3) ON CONFLICT (device_id) DO UPDATE SET device_name = 'Google Pixel 5', os_version = 'Android 11', manufacturer = 'Google', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (4, 'iPad Pro', 'iPadOS 14.4', 'Apple', 4) ON CONFLICT (device_id) DO UPDATE SET device_name = 'iPad Pro', os_version = 'iPadOS 14.4', manufacturer = 'Apple', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name, permissions) VALUES (3, 'editor', '{\"create\": true, \"read\": true, \"update\": true, \"delete\": false}') ON CONFLICT (role_id) DO UPDATE SET role_name = 'editor', permissions = '{\"create\": true, \"read\": true, \"update\": true, \"delete\": false}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nINSERT INTO roles (role_id, role_name, permissions) VALUES (4, 'viewer', '{\"create\": false, \"read\": true, \"update\": false, \"delete\": false}') ON CONFLICT (role_id) DO UPDATE SET role_name = 'viewer', permissions = '{\"create\": false, \"read\": true, \"update\": false, \"delete\": false}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role, device_id) VALUES (1, 'john_doe', 'password123', 'admin', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated', password = 'new_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (1, 'iPhone X', 'iOS 14.5', 'Apple', 1) ON CONFLICT (device_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name, permissions) VALUES (1, 'admin', '{\"write\":true,\"read\":true}') ON CONFLICT (role_id) DO UPDATE SET permissions = '{\"write\":true,\"read\":false}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (1, 'edit_profile', 'Edit user profile', 1) ON CONFLICT (permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role, device_id) VALUES (2, 'jane_smith', 'securepass', 'user', 2) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (2, 'Galaxy S20', 'Android 11', 'Samsung', 2) ON CONFLICT (device_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name, permissions) VALUES (2, 'user', '{\"write\":false,\"read\":true}') ON CONFLICT (role_id) DO UPDATE SET permissions = '{\"write\":true,\"read\":true}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (2, 'view_orders', 'View user orders', 2) ON CONFLICT (permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role, device_id) VALUES (3, 'admin_user', 'adminpass', 'admin', 3) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (3, 'Pixel 5', 'Android 12', 'Google', 3) ON CONFLICT (device_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name, permissions) VALUES (3, 'support', '{\"write\":true,\"read\":false}') ON CONFLICT (role_id) DO UPDATE SET permissions = '{\"write\":false,\"read\":true}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (3, 'manage_tickets', 'Manage support tickets', 3) ON CONFLICT (permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role, device_id) VALUES (4, 'guest_user', 'guestpass', 'user', 4) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (4, 'OnePlus 9', 'OxygenOS 11', 'OnePlus', 4) ON CONFLICT (device_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name, permissions) VALUES (4, 'guest', '{\"write\":false,\"read\":false}') ON CONFLICT (role_id) DO UPDATE SET permissions = '{\"write\":true,\"read\":true}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (4, 'view_content', 'View public content', 4) ON CONFLICT (permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role, device_id) VALUES (5, 'support_user', 'supportpass', 'support', 5) ON CONFLICT (user_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO devices (device_id, device_name, os_version, manufacturer, user_id) VALUES (5, 'Huawei P40', 'EMUI 10.1', 'Huawei', 5) ON CONFLICT (device_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO roles (role_id, role_name, permissions) VALUES (5, 'manager', '{\"write\":true,\"read\":true}') ON CONFLICT (role_id) DO UPDATE SET permissions = '{\"write\":true,\"read\":false}';",
  "### TABLEDATA\n\nCREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR NOT NULL, password VARCHAR NOT NULL, role VARCHAR NOT NULL, device_id INT NOT NULL);\n\nCREATE TABLE devices (device_id INT PRIMARY KEY, device_name VARCHAR NOT NULL, os_version VARCHAR NOT NULL, manufacturer VARCHAR NOT NULL, user_id INT NOT NULL);\n\nCREATE TABLE roles (role_id INT PRIMARY KEY, role_name VARCHAR NOT NULL, permissions JSONB NOT NULL);\n\nCREATE TABLE permissions (permission_id INT PRIMARY KEY, permission_name VARCHAR NOT NULL, description VARCHAR NOT NULL, role_id INT NOT NULL);\n\n### STATEMENT\n\nUPSERT INTO permissions (permission_id, permission_name, description, role_id) VALUES (5, 'approve_requests', 'Approve user requests', 5) ON CONFLICT (permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (1, 'user1', 'pass1') ON DUPLICATE KEY UPDATE username='user1', password='pass1';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (2, 'user2', 'pass2') ON DUPLICATE KEY UPDATE username='user2', password='pass2';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (3, 'user3', 'pass3') ON DUPLICATE KEY UPDATE username='user3', password='pass3';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (4, 'user4', 'pass4') ON DUPLICATE KEY UPDATE username='user4', password='pass4';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (5, 'user5', 'pass5') ON DUPLICATE KEY UPDATE username='user5', password='pass5';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (6, 'user6', 'pass6') ON DUPLICATE KEY UPDATE username='user6', password='pass6';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (7, 'user7', 'pass7') ON DUPLICATE KEY UPDATE username='user7', password='pass7';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (8, 'user8', 'pass8') ON DUPLICATE KEY UPDATE username='user8', password='pass8';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (9, 'user9', 'pass9') ON DUPLICATE KEY UPDATE username='user9', password='pass9';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (10, 'user10', 'pass10') ON DUPLICATE KEY UPDATE username='user10', password='pass10';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (11, 'user11', 'pass11') ON DUPLICATE KEY UPDATE username='user11', password='pass11';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (12, 'user12', 'pass12') ON DUPLICATE KEY UPDATE username='user12', password='pass12';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (13, 'user13', 'pass13') ON DUPLICATE KEY UPDATE username='user13', password='pass13';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (14, 'user14', 'pass14') ON DUPLICATE KEY UPDATE username='user14', password='pass14';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (15, 'user15', 'pass15') ON DUPLICATE KEY UPDATE username='user15', password='pass15';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (16, 'user16', 'pass16') ON DUPLICATE KEY UPDATE username='user16', password='pass16';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (17, 'user17', 'pass17') ON DUPLICATE KEY UPDATE username='user17', password='pass17';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (18, 'user18', 'pass18') ON DUPLICATE KEY UPDATE username='user18', password='pass18';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (19, 'user19', 'pass19') ON DUPLICATE KEY UPDATE username='user19', password='pass19';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (20, 'user20', 'pass20') ON DUPLICATE KEY UPDATE username='user20', password='pass20';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (1, 'user1', 'pass1') ON DUPLICATE KEY UPDATE username='user1_updated', password='pass1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (2, 'user2', 'pass2') ON DUPLICATE KEY UPDATE username='user2_updated', password='pass2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (3, 'user3', 'pass3') ON DUPLICATE KEY UPDATE username='user3_updated', password='pass3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (4, 'user4', 'pass4') ON DUPLICATE KEY UPDATE username='user4_updated', password='pass4_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (5, 'user5', 'pass5') ON DUPLICATE KEY UPDATE username='user5_updated', password='pass5_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (6, 'user6', 'pass6') ON DUPLICATE KEY UPDATE username='user6_updated', password='pass6_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (7, 'user7', 'pass7') ON DUPLICATE KEY UPDATE username='user7_updated', password='pass7_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (8, 'user8', 'pass8') ON DUPLICATE KEY UPDATE username='user8_updated', password='pass8_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (9, 'user9', 'pass9') ON DUPLICATE KEY UPDATE username='user9_updated', password='pass9_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (10, 'user10', 'pass10') ON DUPLICATE KEY UPDATE username='user10_updated', password='pass10_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (11, 'user11', 'pass11') ON DUPLICATE KEY UPDATE username='user11_updated', password='pass11_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (12, 'user12', 'pass12') ON DUPLICATE KEY UPDATE username='user12_updated', password='pass12_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (13, 'user13', 'pass13') ON DUPLICATE KEY UPDATE username='user13_updated', password='pass13_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (14, 'user14', 'pass14') ON DUPLICATE KEY UPDATE username='user14_updated', password='pass14_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (15, 'user15', 'pass15') ON DUPLICATE KEY UPDATE username='user15_updated', password='pass15_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (16, 'user16', 'pass16') ON DUPLICATE KEY UPDATE username='user16_updated', password='pass16_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (17, 'user17', 'pass17') ON DUPLICATE KEY UPDATE username='user17_updated', password='pass17_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (18, 'user18', 'pass18') ON DUPLICATE KEY UPDATE username='user18_updated', password='pass18_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (19, 'user19', 'pass19') ON DUPLICATE KEY UPDATE username='user19_updated', password='pass19_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (id INT PRIMARY KEY,\nusername VARCHAR(50) NOT NULL,\npassword VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE devices (id INT PRIMARY KEY,\ndevice_name VARCHAR(50) NOT NULL,\ndevice_type VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_devices (user_id INT,\ndevice_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (device_id) REFERENCES devices(id));\n\n\nCREATE TABLE permissions (id INT PRIMARY KEY,\npermission_name VARCHAR(50) NOT NULL);\n\n\nCREATE TABLE user_permissions (user_id INT,\npermission_id INT,\nFOREIGN KEY (user_id) REFERENCES users(id),\nFOREIGN KEY (permission_id) REFERENCES permissions(id));\n\n### STATEMENT\n\nINSERT INTO users (id, username, password) VALUES (20, 'user20', 'pass20') ON DUPLICATE KEY UPDATE username='user20_updated', password='pass20_updated';"
]