[
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_data WHERE supplier_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, supplier_id FROM inventory_data ORDER BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM inventory_data ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE product_name LIKE 'P%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, SUM(quantity) AS total_quantity FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, COUNT(*) AS total_products FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, AVG(price) AS avg_price FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, MAX(price) AS max_price FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, product_name, SUM(quantity) AS total_quantity FROM inventory_data GROUP BY supplier_id, product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, COUNT(DISTINCT product_name) AS total_products FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, product_name, AVG(price) AS avg_price FROM inventory_data GROUP BY supplier_id, product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity * price) AS total_value FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE quantity > 100 AND supplier_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory_data WHERE supplier_id = 2 AND price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) as total_products FROM inventory_data WHERE Supplier_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT MAX(price) as max_price FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT MIN(quantity) as min_quantity FROM inventory_data WHERE supplier_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT AVG(price) as avg_price FROM inventory_data WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_id FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity*price as total_value FROM inventory_data WHERE supplier_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_id, COUNT(*) as total_products FROM inventory_data GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE product_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, SUM(quantity) as total_quantity FROM inventory_data GROUP BY supplier_id HAVING SUM(quantity) > 500;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM inventory_data WHERE quantity < 50 OR supplier_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, AVG(price) as avg_price FROM inventory_data GROUP BY supplier_id HAVING AVG(price) < 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, supplier_id, price FROM inventory_data WHERE supplier_id BETWEEN 2 AND 4;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT supplier_id, SUM(quantity) as total_quantity FROM inventory_data WHERE quantity > 0 GROUP BY supplier_id ORDER BY total_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price, price*quantity as total_cost FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_data WHERE price > 100 AND (quantity > 50 OR supplier_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT supplier_id) as unique_suppliers FROM inventory_data;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_name, supplier_id, AVG(price) as avg_price FROM inventory_data GROUP BY supplier_id, product_name HAVING AVG(price) > 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory_data (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    supplier_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM inventory_data WHERE product_name LIKE '%keyboard%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, item_quantity FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_logs;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, log_description FROM inventory_logs;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, log_description, log_timestamp FROM inventory_logs;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, COUNT(log_id) AS total_logs FROM inventory_logs GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, SUM(item_quantity) AS total_quantity FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(log_id) AS total_logs FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, AVG(item_quantity) AS average_quantity FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items WHERE item_quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_logs WHERE log_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, log_description FROM inventory_logs WHERE LOWER(log_description) LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, item_quantity FROM inventory_items ORDER BY item_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, item_quantity FROM inventory_items ORDER BY item_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items WHERE item_name LIKE 'S%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM inventory_items WHERE item_name IN ('Shoes', 'Boots');",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, MAX(item_quantity) AS max_quantity FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT log_timestamp::date AS date, COUNT(log_id) AS total_logs FROM inventory_logs GROUP BY date;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, SUM(item_quantity) AS total_quantity FROM inventory_items WHERE item_name LIKE '%hat%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, AVG(item_quantity) AS average_quantity FROM inventory_items WHERE item_quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items WHERE item_name LIKE 'Apple%'",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, item_quantity FROM inventory_items WHERE item_quantity > 100",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS total_logs FROM inventory_items JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, SUM(item_quantity) AS total_quantity FROM inventory_items GROUP BY item_name HAVING SUM(item_quantity) > 500",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items INNER JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, AVG(item_quantity) AS avg_quantity FROM inventory_items GROUP BY item_name",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items ORDER BY item_name ASC",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items ORDER BY item_quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS total_items FROM inventory_items UNION SELECT log_description, COUNT(*) AS total_logs FROM inventory_logs",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT item_name FROM inventory_items",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, EXTRACT(YEAR FROM log_timestamp) AS year FROM inventory_items JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id ORDER BY item_name, year",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, log_description FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id WHERE log_description IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS total_logs FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id GROUP BY item_name HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, log_description FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id WHERE log_timestamp BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, to_char(log_timestamp, 'YYYY-MM-DD') as log_date FROM inventory_items JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id ORDER BY log_date DESC",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, item_quantity, CASE WHEN item_quantity > 50 THEN 'In Stock' ELSE 'Low Stock' END AS stock_status FROM inventory_items",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS total_logs FROM inventory_items LEFT JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id GROUP BY item_name ORDER BY total_logs DESC LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, SUM(item_quantity) AS total_quantity FROM inventory_items GROUP BY item_name ORDER BY total_quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id SERIAL PRIMARY KEY,\n  item_name VARCHAR(255) NOT NULL,\n  item_quantity INT NOT NULL\n);\n\n\nCREATE TABLE inventory_logs (\n  log_id SERIAL PRIMARY KEY,\n  item_id INT NOT NULL,\n  log_description TEXT,\n  log_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, log_description FROM inventory_items JOIN inventory_logs ON inventory_items.item_id = inventory_logs.item_id WHERE lower(item_name) = 'apple'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name FROM categories;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_id, category_name FROM categories WHERE category_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT inventory_id, product_id, category_id FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_id, category_id, quantity FROM inventory WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products INNER JOIN inventory ON products.product_id = inventory.product_id INNER JOIN categories ON categories.category_id = inventory.category_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products LEFT JOIN inventory ON products.product_id = inventory.product_id LEFT JOIN categories ON categories.category_id = inventory.category_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products RIGHT JOIN inventory ON products.product_id = inventory.product_id RIGHT JOIN categories ON categories.category_id = inventory.category_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products FULL JOIN inventory ON products.product_id = inventory.product_id FULL JOIN categories ON categories.category_id = inventory.category_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products INNER JOIN inventory ON products.product_id = inventory.product_id INNER JOIN categories ON categories.category_id = inventory.category_id WHERE products.price > 50 AND inventory.quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products INNER JOIN inventory ON products.product_id = inventory.product_id INNER JOIN categories ON categories.category_id = inventory.category_id ORDER BY products.price ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, categories.category_name FROM products INNER JOIN inventory ON products.product_id = inventory.product_id INNER JOIN categories ON categories.category_id = inventory.category_id ORDER BY products.price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS avg_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT MAX(price) AS max_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT MIN(price) AS min_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE quantity > 0",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, category_name FROM products p JOIN inventory i ON p.product_id = i.product_id JOIN categories c ON i.category_id = c.category_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, SUM(quantity) AS total_quantity FROM categories c JOIN inventory i ON c.category_id = i.category_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT SUM(price * quantity) AS total_value FROM products p JOIN inventory i ON p.product_id = i.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(price) AS avg_price FROM products GROUP BY product_name HAVING avg_price > 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, MAX(price) AS max_price FROM categories c JOIN inventory i ON c.category_id = i.category_id JOIN products p ON i.product_id = p.product_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products p WHERE EXISTS (SELECT 1 FROM inventory i WHERE p.product_id = i.product_id AND i.quantity > 0)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price, category_name, quantity FROM products p JOIN inventory i ON p.product_id = i.product_id JOIN categories c ON i.category_id = c.category_id WHERE p.price < 500 AND c.category_name = 'Electronics'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, COUNT(product_id) AS product_count FROM categories c LEFT JOIN inventory i ON c.category_id = i.category_id GROUP BY category_name HAVING product_count > 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE product_id IN (SELECT product_id FROM inventory WHERE quantity > 10)",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, c.category_name, inv.quantity FROM products p JOIN inventory inv ON p.product_id = inv.product_id JOIN categories c ON inv.category_id = c.category_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, c.category_name, inv.quantity FROM products p INNER JOIN inventory inv ON p.product_id = inv.product_id INNER JOIN categories c ON inv.category_id = c.category_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT p1.product_name AS product1, p2.product_name AS product2 FROM products p1 CROSS JOIN products p2 WHERE p1.product_id <> p2.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE product_name LIKE '%phone%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(price) AS avg_price FROM categories c JOIN inventory i ON c.category_id = i.category_id JOIN products p ON i.product_id = p.product_id GROUP BY category_name HAVING avg_price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, MIN(price) AS min_price FROM categories c JOIN inventory i ON c.category_id = i.category_id JOIN products p ON i.product_id = p.product_id GROUP BY category_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS category_count FROM products p JOIN inventory i ON p.product_id = i.product_id JOIN categories c ON i.category_id = c.category_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT category_name, AVG(price) AS avg_price, COUNT(*) AS product_count FROM categories c JOIN inventory i ON c.category_id = i.category_id JOIN products p ON i.product_id = p.product_id GROUP BY category_name HAVING product_count > 2",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(255)\n);\n\nCREATE TABLE inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    category_id INT,\n    quantity INT,\n    FOREIGN KEY (product_id) REFERENCES products(product_id),\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT category_name FROM categories c JOIN inventory i ON c.category_id = i.category_id JOIN products p ON i.product_id = p.product_id ORDER BY category_name",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name FROM inventory WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, product_id, quantity FROM orders WHERE status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE category = 'electronics';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM inventory WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, first_name, last_name FROM customers ORDER BY last_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE quantity > 5 AND status = 'pending';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT c.first_name, o.order_id FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT p.product_name, SUM(o.quantity) AS total_orders FROM products p LEFT JOIN orders o ON p.product_id = o.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price, category, p.product_id FROM products p JOIN inventory i ON p.product_id = i.id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory WHERE price > 50.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory JOIN products ON inventory.product_name = products.product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE quantity >= 5 ORDER BY order_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.first_name, orders.quantity FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory WHERE quantity < (SELECT AVG(quantity) FROM inventory);",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT category FROM products;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE price BETWEEN 20.00 AND 50.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name ORDER BY total_quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT customers.first_name, customers.last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.status = 'delivered';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE category = 'electronics';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT first_name, last_name FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name HAVING total_quantity > 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE last_name = 'Smith');",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products ORDER BY price DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT customers.first_name, COUNT(orders.order_id) AS num_orders FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory WHERE quantity > 0 GROUP BY product_name HAVING SUM(quantity) > 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    status VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(50) UNIQUE NOT NULL\n);\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE status IN ('pending', 'shipped');",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers WHERE supplier_name LIKE '%Tech%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM orders WHERE customer_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE capacity > 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, customer_id, order_date FROM orders WHERE total_amount < 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number FROM suppliers WHERE address LIKE '%California%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number FROM customers WHERE customer_id = 456;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE manager = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE category = 'Clothing' AND price BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, status FROM orders WHERE customer_id = 789;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM suppliers WHERE phone_number LIKE '%555%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE address LIKE '%Manhattan%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE location LIKE '%New York%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, category, price FROM products WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE address LIKE '%Street%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email, phone_number, address FROM suppliers WHERE email IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, category, price, quantity FROM products WHERE price > 100 AND quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, phone_number, address FROM customers WHERE email LIKE '%@gmail.com%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number, address FROM suppliers WHERE phone_number LIKE '555%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, category, price, quantity FROM products ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email, phone_number FROM suppliers ORDER BY email DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, category, price, quantity FROM products WHERE quantity > 0 LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email, phone_number FROM customers WHERE address LIKE '%Avenue%' LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number, address FROM suppliers WHERE email IS NULL LIMIT 8;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE total_amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM products p JOIN orders o ON p.product_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM products p RIGHT JOIN orders o ON p.product_id = o.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE location LIKE '%city%' AND capacity > 500;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT product_name, category, price FROM products WHERE product_id IN (SELECT product_id FROM orders);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_amount > 5000);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(100),\n    price DECIMAL(10, 2),\n    quantity INT\n);\n\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(20)\n);\n\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(15),\n    address TEXT\n);\n\nCREATE TABLE warehouses (\n    warehouse_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    capacity INT,\n    manager VARCHAR(255),\n    contact_number VARCHAR(15)\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number FROM suppliers WHERE supplier_id IN (SELECT supplier_id FROM warehouses WHERE capacity > 1000);"
]