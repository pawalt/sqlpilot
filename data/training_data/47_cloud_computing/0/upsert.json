[
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (1, 'john_doe', 'password123', 'john_doe@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (2, 'jane_smith', 'abc@123', 'jane_smith@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (3, 'alex_james', 'password456', 'alex_james@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (4, 'sara_brown', 'def@456', 'sara_brown@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (5, 'mike_thomas', 'password789', 'mike_thomas@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (6, 'lisa_garcia', 'ghi@789', 'lisa_garcia@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (7, 'kevin_parker', 'passwordABC', 'kevin_parker@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (8, 'olivia_white', 'jkl@ABC', 'olivia_white@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (9, 'eric_wilson', 'passwordDEF', 'eric_wilson@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (10, 'emily_long', 'mno@DEF', 'emily_long@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (11, 'adam_smith', 'passwordGHI', 'adam_smith@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (12, 'sophia_adams', 'pqr@GHI', 'sophia_adams@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (13, 'chris_martin', 'passwordJKL', 'chris_martin@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (14, 'jessica_peters', 'stu@JKL', 'jessica_peters@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (15, 'mark_robinson', 'passwordMNO', 'mark_robinson@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (16, 'rachel_edwards', 'vwx@MNO', 'rachel_edwards@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (17, 'steve_cook', 'passwordPQR', 'steve_cook@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (18, 'bella_harris', 'yza@PQR', 'bella_harris@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (19, 'jacob_miller', 'passwordSTU', 'jacob_miller@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (20, 'mia_scott', 'abc@123', 'mia_scott@example.com')",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (1, 'user1', 'password1', 'user1@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser1', password_hash = 'newpassword1', email = 'newuser1@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (2, 'user2', 'password2', 'user2@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser2', password_hash = 'newpassword2', email = 'newuser2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (3, 'user3', 'password3', 'user3@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser3', password_hash = 'newpassword3', email = 'newuser3@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (4, 'user4', 'password4', 'user4@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser4', password_hash = 'newpassword4', email = 'newuser4@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (5, 'user5', 'password5', 'user5@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser5', password_hash = 'newpassword5', email = 'newuser5@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (6, 'user6', 'password6', 'user6@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser6', password_hash = 'newpassword6', email = 'newuser6@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (7, 'user7', 'password7', 'user7@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser7', password_hash = 'newpassword7', email = 'newuser7@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (8, 'user8', 'password8', 'user8@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser8', password_hash = 'newpassword8', email = 'newuser8@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (9, 'user9', 'password9', 'user9@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser9', password_hash = 'newpassword9', email = 'newuser9@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (10, 'user10', 'password10', 'user10@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser10', password_hash = 'newpassword10', email = 'newuser10@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (11, 'user11', 'password11', 'user11@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser11', password_hash = 'newpassword11', email = 'newuser11@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (12, 'user12', 'password12', 'user12@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser12', password_hash = 'newpassword12', email = 'newuser12@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (13, 'user13', 'password13', 'user13@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser13', password_hash = 'newpassword13', email = 'newuser13@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (14, 'user14', 'password14', 'user14@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser14', password_hash = 'newpassword14', email = 'newuser14@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (15, 'user15', 'password15', 'user15@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser15', password_hash = 'newpassword15', email = 'newuser15@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (16, 'user16', 'password16', 'user16@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser16', password_hash = 'newpassword16', email = 'newuser16@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (17, 'user17', 'password17', 'user17@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser17', password_hash = 'newpassword17', email = 'newuser17@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (18, 'user18', 'password18', 'user18@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser18', password_hash = 'newpassword18', email = 'newuser18@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (19, 'user19', 'password19', 'user19@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser19', password_hash = 'newpassword19', email = 'newuser19@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, email) VALUES (20, 'user20', 'password20', 'user20@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'newuser20', password_hash = 'newpassword20', email = 'newuser20@example.com';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (1, 'user1', 'password1', 'salt1') ON CONFLICT (user_id) DO UPDATE SET username = 'user1', password_hash = 'password1', salt = 'salt1';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (2, 'user2', 'password2', 'salt2') ON CONFLICT (user_id) DO UPDATE SET username = 'user2', password_hash = 'password2', salt = 'salt2';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (3, 'user3', 'password3', 'salt3') ON CONFLICT (user_id) DO UPDATE SET username = 'user3', password_hash = 'password3', salt = 'salt3';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (4, 'user4', 'password4', 'salt4') ON CONFLICT (user_id) DO UPDATE SET username = 'user4', password_hash = 'password4', salt = 'salt4';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (5, 'user5', 'password5', 'salt5') ON CONFLICT (user_id) DO UPDATE SET username = 'user5', password_hash = 'password5', salt = 'salt5';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (6, 'user6', 'password6', 'salt6') ON CONFLICT (user_id) DO UPDATE SET username = 'user6', password_hash = 'password6', salt = 'salt6';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (7, 'user7', 'password7', 'salt7') ON CONFLICT (user_id) DO UPDATE SET username = 'user7', password_hash = 'password7', salt = 'salt7';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (8, 'user8', 'password8', 'salt8') ON CONFLICT (user_id) DO UPDATE SET username = 'user8', password_hash = 'password8', salt = 'salt8';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (9, 'user9', 'password9', 'salt9') ON CONFLICT (user_id) DO UPDATE SET username = 'user9', password_hash = 'password9', salt = 'salt9';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (10, 'user10', 'password10', 'salt10') ON CONFLICT (user_id) DO UPDATE SET username = 'user10', password_hash = 'password10', salt = 'salt10';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (11, 'user11', 'password11', 'salt11') ON CONFLICT (user_id) DO UPDATE SET username = 'user11', password_hash = 'password11', salt = 'salt11';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (12, 'user12', 'password12', 'salt12') ON CONFLICT (user_id) DO UPDATE SET username = 'user12', password_hash = 'password12', salt = 'salt12';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (13, 'user13', 'password13', 'salt13') ON CONFLICT (user_id) DO UPDATE SET username = 'user13', password_hash = 'password13', salt = 'salt13';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (14, 'user14', 'password14', 'salt14') ON CONFLICT (user_id) DO UPDATE SET username = 'user14', password_hash = 'password14', salt = 'salt14';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (15, 'user15', 'password15', 'salt15') ON CONFLICT (user_id) DO UPDATE SET username = 'user15', password_hash = 'password15', salt = 'salt15';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (16, 'user16', 'password16', 'salt16') ON CONFLICT (user_id) DO UPDATE SET username = 'user16', password_hash = 'password16', salt = 'salt16';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (17, 'user17', 'password17', 'salt17') ON CONFLICT (user_id) DO UPDATE SET username = 'user17', password_hash = 'password17', salt = 'salt17';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (18, 'user18', 'password18', 'salt18') ON CONFLICT (user_id) DO UPDATE SET username = 'user18', password_hash = 'password18', salt = 'salt18';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (19, 'user19', 'password19', 'salt19') ON CONFLICT (user_id) DO UPDATE SET username = 'user19', password_hash = 'password19', salt = 'salt19';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (20, 'user20', 'password20', 'salt20') ON CONFLICT (user_id) DO UPDATE SET username = 'user20', password_hash = 'password20', salt = 'salt20';",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (1, 'john_doe', 'f1e1fc97026934a06cf8c15184095053', 'abc123');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (2, 'jane_smith', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 'def456');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('AA123', 1, '2022-01-01 08:00:00', '2022-01-01 10:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('BB456', 2, '2022-01-02 09:00:00', '2022-01-02 11:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (3, 'alice_smith', '2c32e61e39d1d2c4fd93856089d206ad', 'ghi789');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (4, 'bob_jones', 'fc10043042a0ddeaf00ce6b7e7fc7c9bbd3b33fbbc93a2aa8ce060ad46ee96dc', 'jkl012');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('CC789', 3, '2022-01-03 10:00:00', '2022-01-03 12:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('DD012', 4, '2022-01-04 11:00:00', '2022-01-04 13:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (5, 'carol_adams', '3f58c6118efa0d9f90c202bbfd2c11bc', 'mno345');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (6, 'david_smith', '13f7da919d4953ff7b72b6e7d5686a5b54b649e5c1e40e3c4f4f17202a1d4583', 'pqr678');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('EE345', 5, '2022-01-05 12:00:00', '2022-01-05 14:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('FF678', 6, '2022-01-06 13:00:00', '2022-01-06 15:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (7, 'ellen_jones', '7b1095aa73e68f038c44e75d6ae2978548598a0cfb581f2a3f03d47d3a9a3ae7', 'stu901');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (8, 'frank_brown', '67d55ed71388b3c762c1d1e24679ec60029c24ea4396d90f7107d5777f19319c', 'vwx234');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('GG901', 7, '2022-01-07 14:00:00', '2022-01-07 16:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('HH234', 8, '2022-01-08 15:00:00', '2022-01-08 17:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (9, 'george_davis', '5bd1d909264824a978afee7d25a74e32a2cfa0123eb99a0ec3b4a56303ffbead', 'yza567');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (10, 'hannah_white', 'ba5098554c07253b68edfa97c8df3cc061bfd786867d7133150927b472b56cc9', 'bcd345');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('II567', 9, '2022-01-09 16:00:00', '2022-01-09 18:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('JJ890', 10, '2022-01-10 17:00:00', '2022-01-10 19:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (11, 'ivan_jackson', 'dab3f6564857aa45051f0cbee8544b39c045212debf1bbbb2ee4267cbd8bfc3a', 'efg678');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_credentials (user_id, username, password_hash, salt) VALUES (12, 'judy_miller', '2edae960cccec5aa377f56c1fede0e0fc6074903e2a717a9e5b86d239340668b', 'hij901');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('KK234', 11, '2022-01-11 18:00:00', '2022-01-11 20:00:00');",
  "### TABLEDATA\n\nCREATE TABLE user_credentials (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255),\n    salt VARCHAR(255)\n);\n\n\nCREATE TABLE user_sessions (\n    session_id VARCHAR(255) PRIMARY KEY,\n    user_id INT REFERENCES user_credentials(user_id),\n    login_time TIMESTAMP,\n    logout_time TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, login_time, logout_time) VALUES ('LL567', 12, '2022-01-12 19:00:00', '2022-01-12 21:00:00');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (1, 'user1', 'hash1', 'user1@example.com') ON CONFLICT (id) DO UPDATE SET password_hash = 'updated_hash1';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (2, 'user2', 'hash2', 'user2@example.com') ON CONFLICT (id) DO UPDATE SET password_hash = 'updated_hash2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (3, 'user3', 'hash3', 'user3@example.com') ON CONFLICT (id) DO UPDATE SET password_hash = 'updated_hash3';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (4, 'user4', 'hash4', 'user4@example.com') ON CONFLICT (id) DO UPDATE SET password_hash = 'updated_hash4';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (5, 'user5', 'hash5', 'user5@example.com') ON CONFLICT (id) DO UPDATE SET password_hash = 'updated_hash5';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, created_at, last_active) VALUES ('uuid1', 1, '2022-01-01 00:00:00', '2022-01-01 00:00:00') ON CONFLICT (session_id) DO UPDATE SET last_active = '2022-01-02 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, created_at, last_active) VALUES ('uuid2', 2, '2022-01-02 00:00:00', '2022-01-02 00:00:00') ON CONFLICT (session_id) DO UPDATE SET last_active = '2022-01-03 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, created_at, last_active) VALUES ('uuid3', 3, '2022-01-03 00:00:00', '2022-01-03 00:00:00') ON CONFLICT (session_id) DO UPDATE SET last_active = '2022-01-04 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, created_at, last_active) VALUES ('uuid4', 4, '2022-01-04 00:00:00', '2022-01-04 00:00:00') ON CONFLICT (session_id) DO UPDATE SET last_active = '2022-01-05 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_sessions (session_id, user_id, created_at, last_active) VALUES ('uuid5', 5, '2022-01-05 00:00:00', '2022-01-05 00:00:00') ON CONFLICT (session_id) DO UPDATE SET last_active = '2022-01-06 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_tokens (token_id, user_id, token, expiry_timestamp) VALUES ('token1', 1, 'token1', '2022-06-01 00:00:00') ON CONFLICT (token_id) DO UPDATE SET expiry_timestamp = '2022-12-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_tokens (token_id, user_id, token, expiry_timestamp) VALUES ('token2', 2, 'token2', '2023-01-01 00:00:00') ON CONFLICT (token_id) DO UPDATE SET expiry_timestamp = '2023-07-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_tokens (token_id, user_id, token, expiry_timestamp) VALUES ('token3', 3, 'token3', '2023-06-01 00:00:00') ON CONFLICT (token_id) DO UPDATE SET expiry_timestamp = '2024-03-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_tokens (token_id, user_id, token, expiry_timestamp) VALUES ('token4', 4, 'token4', '2022-12-01 00:00:00') ON CONFLICT (token_id) DO UPDATE SET expiry_timestamp = '2023-06-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO user_tokens (token_id, user_id, token, expiry_timestamp) VALUES ('token5', 5, 'token5', '2023-04-01 00:00:00') ON CONFLICT (token_id) DO UPDATE SET expiry_timestamp = '2024-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (1, 'user1', 'password1', 'user1@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (2, 'user2', 'password2', 'user2@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (3, 'user3', 'password3', 'user3@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (4, 'user4', 'password4', 'user4@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (5, 'user5', 'password5', 'user5@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (6, 'user6', 'password6', 'user6@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (7, 'user7', 'password7', 'user7@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (8, 'user8', 'password8', 'user8@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (9, 'user9', 'password9', 'user9@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (10, 'user10', 'password10', 'user10@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (11, 'user11', 'password11', 'user11@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (12, 'user12', 'password12', 'user12@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (13, 'user13', 'password13', 'user13@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (14, 'user14', 'password14', 'user14@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (15, 'user15', 'password15', 'user15@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (16, 'user16', 'password16', 'user16@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (17, 'user17', 'password17', 'user17@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (18, 'user18', 'password18', 'user18@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (19, 'user19', 'password19', 'user19@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password_hash VARCHAR(100),\n    email VARCHAR(100) UNIQUE\n);\n\n\nCREATE TABLE user_sessions (\n    session_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    created_at TIMESTAMP,\n    last_active TIMESTAMP\n);\n\n\nCREATE TABLE user_tokens (\n    token_id UUID PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    token VARCHAR(50),\n    expiry_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO users (id, username, password_hash, email) VALUES (20, 'user20', 'password20', 'user20@example.com') ON CONFLICT (id) DO UPDATE SET username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, email = EXCLUDED.email",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('11111111-1111-1111-1111-111111111111', 'john_doe', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe_updated', password_hash = 'updated_password123';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('22222222-2222-2222-2222-222222222222', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'admin_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('33333333-3333-3333-3333-333333333333', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'read_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('11111111-1111-1111-1111-111111111111', '22222222-2222-2222-2222-222222222222') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('44444444-4444-4444-4444-444444444444', 'jane_smith', 'password456') ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith_updated', password_hash = 'updated_password456';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('55555555-5555-5555-5555-555555555555', 'user') ON CONFLICT (role_id) DO UPDATE SET role_name = 'user_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('66666666-6666-6666-6666-666666666666', 'write') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'write_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('44444444-4444-4444-4444-444444444444', '55555555-5555-5555-5555-555555555555') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('77777777-7777-7777-7777-777777777777', 'mark_jones', 'password789') ON CONFLICT (user_id) DO UPDATE SET username = 'mark_jones_updated', password_hash = 'updated_password789';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('88888888-8888-8888-8888-888888888888', 'editor') ON CONFLICT (role_id) DO UPDATE SET role_name = 'editor_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('99999999-9999-9999-9999-999999999999', 'delete') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'delete_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('77777777-7777-7777-7777-777777777777', '88888888-8888-8888-8888-888888888888') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('12345678-1234-5678-9876-543210987654', 'alice_green', 'password987') ON CONFLICT (user_id) DO UPDATE SET username = 'alice_green_updated', password_hash = 'updated_password987';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('23456789-2345-6789-9876-543210987654', 'moderator') ON CONFLICT (role_id) DO UPDATE SET role_name = 'moderator_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('34567890-3456-7890-9876-543210987654', 'execute') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'execute_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('12345678-1234-5678-9876-543210987654', '23456789-2345-6789-9876-543210987654') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('45678901-4567-8901-9876-543210987654', 'sam_brown', 'password654') ON CONFLICT (user_id) DO UPDATE SET username = 'sam_brown_updated', password_hash = 'updated_password654';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('56789012-5678-9012-9876-543210987654', 'guest') ON CONFLICT (role_id) DO UPDATE SET role_name = 'guest_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('67890123-6789-0123-9876-543210987654', 'administrate') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'administrate_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('45678901-4567-8901-9876-543210987654', '56789012-5678-9012-9876-543210987654') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('b628b18b-027c-4dc6-8609-841d7cd2ab25', 'user1', 'hash1') ON CONFLICT (user_id) DO UPDATE SET username = 'user1', password_hash = 'hash1';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('04a023cf-15d3-4522-9f2e-954e28918068', 'admin') ON CONFLICT (role_id) DO UPDATE SET role_name = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('b66bf2bc-210f-4aa2-a88c-d945fb305039', 'create') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'create';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('b628b18b-027c-4dc6-8609-841d7cd2ab25', '04a023cf-15d3-4522-9f2e-954e28918068') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('9f70abe6-09db-4e14-b4b3-a23b98f262c1', 'user2', 'hash2') ON CONFLICT (user_id) DO UPDATE SET username = 'user2', password_hash = 'hash2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('220703bf-2a40-4edb-96a8-bc64a7a6c50d', 'editor') ON CONFLICT (role_id) DO UPDATE SET role_name = 'editor';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('8b232975-7b0f-476e-8087-21a3c2f53b0b', 'read') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'read';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('9f70abe6-09db-4e14-b4b3-a23b98f262c1', '220703bf-2a40-4edb-96a8-bc64a7a6c50d') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('dfbc10be-6ec1-4a61-8f49-5330e53f08e1', 'user3', 'hash3') ON CONFLICT (user_id) DO UPDATE SET username = 'user3', password_hash = 'hash3';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('b8b03868-b451-4a78-9ed5-d735afe95aff', 'viewer') ON CONFLICT (role_id) DO UPDATE SET role_name = 'viewer';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('ab3f556a-0d4d-4390-85d6-6542304d7f5d', 'delete') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'delete';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('dfbc10be-6ec1-4a61-8f49-5330e53f08e1', 'b8b03868-b451-4a78-9ed5-d735afe95aff') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('9808c4c7-866c-4ef3-8d06-1bf3b06637e9', 'user4', 'hash4') ON CONFLICT (user_id) DO UPDATE SET username = 'user4', password_hash = 'hash4';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('d3761b74-4784-4c8f-b087-4c45b68312d9', 'manager') ON CONFLICT (role_id) DO UPDATE SET role_name = 'manager';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('fb892ec6-479e-41fc-a724-d0f496f0ea00', 'update') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'update';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('9808c4c7-866c-4ef3-8d06-1bf3b06637e9', 'd3761b74-4784-4c8f-b087-4c45b68312d9') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('65fcf593-e7f1-42b3-9753-41e54cecce38', 'user5', 'hash5') ON CONFLICT (user_id) DO UPDATE SET username = 'user5', password_hash = 'hash5';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, role_name) VALUES ('964941e5-ec86-4f33-a277-6d7872df7d14', 'contributor') ON CONFLICT (role_id) DO UPDATE SET role_name = 'contributor';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_permissions (permission_id, permission_name) VALUES ('dcb8ec8d-6e62-408b-89f2-5d860ed07734', 'modify') ON CONFLICT (permission_id) DO UPDATE SET permission_name = 'modify';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE user_roles (\n    role_id UUID PRIMARY KEY,\n    role_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_permissions (\n    permission_id UUID PRIMARY KEY,\n    permission_name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE user_role_mapping (\n    user_id UUID,\n    role_id UUID,\n    PRIMARY KEY (user_id, role_id)\n);\n\n### STATEMENT\n\nINSERT INTO user_role_mapping (user_id, role_id) VALUES ('65fcf593-e7f1-42b3-9753-41e54cecce38', '964941e5-ec86-4f33-a277-6d7872df7d14') ON CONFLICT (user_id, role_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('1', 'user1', 'hash1') ON CONFLICT (user_id) DO UPDATE SET username = 'user1_updated', password_hash = 'hash1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, user_id, role_name) VALUES ('1', '1', 'admin') ON CONFLICT (role_id) DO UPDATE SET user_id = '1', role_name = 'admin_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO password_reset_tokens (token_id, user_id, token) VALUES ('1', '1', 'token1') ON CONFLICT (token_id) DO UPDATE SET user_id = '1', token = 'token1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO login_attempts (attempt_id, user_id, attempt_timestamp) VALUES ('1', '1', NOW()) ON CONFLICT (attempt_id) DO UPDATE SET user_id = '1', attempt_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO session_tokens (session_id, user_id, token) VALUES ('1', '1', 'session1') ON CONFLICT (session_id) DO UPDATE SET user_id = '1', token = 'session1_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('2', 'user2', 'hash2') ON CONFLICT (user_id) DO UPDATE SET username = 'user2_updated', password_hash = 'hash2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, user_id, role_name) VALUES ('2', '2', 'user') ON CONFLICT (role_id) DO UPDATE SET user_id = '2', role_name = 'user_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO password_reset_tokens (token_id, user_id, token) VALUES ('2', '2', 'token2') ON CONFLICT (token_id) DO UPDATE SET user_id = '2', token = 'token2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO login_attempts (attempt_id, user_id, attempt_timestamp) VALUES ('2', '2', NOW()) ON CONFLICT (attempt_id) DO UPDATE SET user_id = '2', attempt_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO session_tokens (session_id, user_id, token) VALUES ('2', '2', 'session2') ON CONFLICT (session_id) DO UPDATE SET user_id = '2', token = 'session2_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash) VALUES ('3', 'user3', 'hash3') ON CONFLICT (user_id) DO UPDATE SET username = 'user3_updated', password_hash = 'hash3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO user_roles (role_id, user_id, role_name) VALUES ('3', '3', 'user') ON CONFLICT (role_id) DO UPDATE SET user_id = '3', role_name = 'user_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO password_reset_tokens (token_id, user_id, token) VALUES ('3', '3', 'token3') ON CONFLICT (token_id) DO UPDATE SET user_id = '3', token = 'token3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO login_attempts (attempt_id, user_id, attempt_timestamp) VALUES ('3', '3', NOW()) ON CONFLICT (attempt_id) DO UPDATE SET user_id = '3', attempt_timestamp = NOW();",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO session_tokens (session_id, user_id, token) VALUES ('3', '3', 'session3') ON CONFLICT (session_id) DO UPDATE SET user_id = '3', token = 'session3_updated';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('5d8a84fb-0abc-4c4d-af63-157bccd9a04c', 'user1', 'hash1', '2022-01-01 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash1';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('f0b6a49c-88a4-4f29-80a8-f0be2c7184d3', 'user2', 'hash2', '2022-01-02 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash2';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('08f7c001-6b55-4122-bf84-8c28f0f19346', 'user3', 'hash3', '2022-01-03 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash3';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('15fc136d-64e4-47c7-996c-5b0baf6a7b0b', 'user4', 'hash4', '2022-01-04 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash4';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('aa5b3bb4-c840-4bae-bf88-cdb78e5532e7', 'user5', 'hash5', '2022-01-05 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash5';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('91565c93-a5b3-4902-a252-d85e3f3d31ac', 'user6', 'hash6', '2022-01-06 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash6';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('85df34a4-f924-42ba-8f52-868d62dbb99e', 'user7', 'hash7', '2022-01-07 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash7';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('67015b99-7ae0-4b88-8e71-9b689efa1364', 'user8', 'hash8', '2022-01-08 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash8';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('d01d8fb6-e600-430c-a2e1-1aa6ec14deff', 'user9', 'hash9', '2022-01-09 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash9';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('005f5f10-18fd-4c53-86da-b305ab3a8a14', 'user10', 'hash10', '2022-01-10 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash10';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('a2f6551b-df84-4623-85b2-009b3cf67b04', 'user11', 'hash11', '2022-01-11 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash11';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('07cbc6f7-f4de-4671-b7b6-7f086889a5b8', 'user12', 'hash12', '2022-01-12 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash12';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('d7b9579d-d129-49cb-bc63-52f7a37742e3', 'user13', 'hash13', '2022-01-13 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash13';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('3c363922-d964-423b-8b96-6e32086c1f9d', 'user14', 'hash14', '2022-01-14 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash14';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('c093e1e2-60ee-4cd4-ac8b-2e3ddef9a2a6', 'user15', 'hash15', '2022-01-15 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash15';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('f8763af3-4b88-4a8e-b270-40295394b801', 'user16', 'hash16', '2022-01-16 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash16';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('bb00d472-55cf-4ea7-8105-5dd7dbd47a9a', 'user17', 'hash17', '2022-01-17 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash17';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('cb204ade-7bc3-4f5e-93e9-f2a2211c5ab7', 'user18', 'hash18', '2022-01-18 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash18';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('a0e200a0-757a-4626-8583-fe4d7d9b18d8', 'user19', 'hash19', '2022-01-19 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash19';",
  "### TABLEDATA\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  password_hash VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE user_roles (\n  role_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  role_name VARCHAR(50) NOT NULL\n)\n\nCREATE TABLE password_reset_tokens (\n  token_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE login_attempts (\n  attempt_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  attempt_timestamp TIMESTAMP DEFAULT NOW()\n)\n\nCREATE TABLE session_tokens (\n  session_id UUID PRIMARY KEY,\n  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,\n  token VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n)\n\n### STATEMENT\n\nINSERT INTO users (user_id, username, password_hash, created_at) VALUES ('b9c20adf-534a-47bf-aa13-f0016fcac5bc', 'user20', 'hash20', '2022-01-20 10:00:00') ON CONFLICT (user_id) DO UPDATE SET password_hash = 'updated_hash20';"
]