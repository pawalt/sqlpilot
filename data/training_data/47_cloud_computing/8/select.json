[
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_center, last_sync FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE region_name = 'US-West';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE data_center = 'Data Center 1';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name, last_sync FROM cloud_data_replication WHERE id = 2;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, data_center FROM cloud_data_replication WHERE region_name = 'EU-Central';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE last_sync >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name, last_sync FROM cloud_data_replication WHERE data_center = 'Data Center 2';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication ORDER BY last_sync DESC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, data_center FROM cloud_data_replication ORDER BY region_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE region_name LIKE '%US%';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE data_center IN ('Data Center 1', 'Data Center 2');",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name, last_sync FROM cloud_data_replication WHERE last_sync BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) FROM cloud_data_replication GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_center, AVG(id) FROM cloud_data_replication GROUP BY data_center;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MAX(last_sync) AS latest_sync FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT MIN(last_sync) AS earliest_sync FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name FROM cloud_data_replication WHERE region_name = 'us-east';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) FROM cloud_data_replication GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT data_center, AVG(id) FROM cloud_data_replication GROUP BY data_center HAVING AVG(id) > 100;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication WHERE last_sync > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, SUBSTRING(data_center, 1, 3) AS short_center FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name, DATE_FORMAT(last_sync, '%Y-%m-%d') AS sync_date FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT DISTINCT region_name FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT * FROM cloud_data_replication ORDER BY last_sync DESC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT TOP 5 * FROM cloud_data_replication ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, DATEDIFF(CURDATE(), last_sync) AS days_since_sync FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) AS total_count FROM cloud_data_replication WHERE data_center LIKE '%west%';",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) AS total_count FROM cloud_data_replication WHERE data_center IN ('west1', 'west2');",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, TIMESTAMPDIFF(SECOND, last_sync, NOW()) AS seconds_since_sync FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, CONCAT(data_center, ' - Synced on ', DATE(last_sync)) AS sync_info FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT id, region_name, CASE WHEN data_center LIKE '%west%' THEN 'West Region' ELSE 'Other Region' END AS region_type FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, EXTRACT(YEAR_MONTH FROM last_sync) AS sync_month FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, DATE_ADD(last_sync, INTERVAL 1 MONTH) AS next_sync_date FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, TIMESTAMPADD(MINUTE, 60, last_sync) AS next_sync_time FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_data_replication (\n    id INT PRIMARY KEY,\n    region_name VARCHAR(50),\n    data_center VARCHAR(50),\n    last_sync TIMESTAMP\n)\n\n### STATEMENT\n\nSELECT region_name, data_center, TIMESTAMPDIFF(DAY, last_sync, '2021-12-31') AS days_to_end_of_year FROM cloud_data_replication;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, region FROM data_replication WHERE region = 'Europe';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, data_center FROM data_replication WHERE data_center = 'Asia';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE id = 5;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, replicated_data FROM data_replication WHERE region = 'North America';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM replication_status;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, status FROM replication_status WHERE status = 'In Progress';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM replication_status WHERE replication_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, last_sync FROM replication_status WHERE last_sync > '2022-01-01 00:00:00';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_center, replicated_data FROM data_replication WHERE id = 8;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, status, last_sync FROM replication_status WHERE replication_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication ORDER BY region DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, region, data_center FROM data_replication WHERE region = 'Asia' AND data_center = 'Singapore';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM replication_status ORDER BY last_sync ASC;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, replication_id, status FROM replication_status WHERE status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, last_sync FROM replication_status WHERE replication_id = 8 ORDER BY last_sync DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, region, data_center FROM data_replication WHERE region LIKE '%America%';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE region IN ('Europe', 'Asia');",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, status FROM replication_status WHERE replication_id IN (5, 8);",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE region = 'Europe' AND data_center = 'London';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, region, data_center FROM data_replication WHERE region = 'Asia' ORDER BY data_center DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_center, COUNT(*) AS replication_count FROM data_replication GROUP BY data_center;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication JOIN replication_status ON data_replication.id = replication_status.replication_id WHERE replication_status.status = 'Error';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_center, AVG(id) AS average_id FROM data_replication GROUP BY data_center HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT region FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE id IN (SELECT replication_id FROM replication_status WHERE status = 'Synced');",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_center, MAX(id) AS max_id FROM data_replication GROUP BY data_center;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT region, COUNT(*) AS replication_count FROM data_replication WHERE region LIKE '%A%';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE id = (SELECT MAX(replication_id) FROM replication_status);",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(id) AS max_id FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT region, AVG(id) AS average_id FROM data_replication GROUP BY region;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE replicated_data IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT region, COUNT(*) AS replication_count FROM data_replication WHERE replicated_data LIKE '%important%';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE region = 'North America' OR region = 'South America';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT replication_id, MAX(id) AS max_id FROM replication_status GROUP BY replication_id;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT data_center, MIN(id) AS min_id FROM data_replication GROUP BY data_center;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT region, COUNT(*) AS replication_count FROM data_replication WHERE replicated_data IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE region = 'Africa' OR region = 'Antarctica';",
  "### TABLEDATA\n\nCREATE TABLE data_replication (\n    id INT PRIMARY KEY,\n    region VARCHAR(50),\n    data_center VARCHAR(50),\n    replicated_data TEXT\n);\n\nCREATE TABLE replication_status (\n    id INT PRIMARY KEY,\n    replication_id INT,\n    status VARCHAR(20),\n    last_sync TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT replication_id, COUNT(*) AS replication_count FROM replication_status GROUP BY replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, data_center FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_id, region_name FROM cloud_regions WHERE region_name = 'Europe';",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT replication_id, replication_type FROM data_replication WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM disaster_recovery;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT recovery_id, recovery_plan FROM disaster_recovery;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT recovery_id, replication_type FROM disaster_recovery INNER JOIN data_replication ON disaster_recovery.replication_id = data_replication.replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, replication_type FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_name LIKE '%a%';",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT region_name FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT MAX(replication_frequency) AS max_frequency FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT AVG(replication_frequency) AS avg_frequency FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) AS num_replications FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, recovery_plan FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id INNER JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) AS num_recoveries FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id INNER JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, data_center FROM cloud_regions ORDER BY region_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT replication_type, replication_frequency FROM data_replication ORDER BY replication_frequency DESC;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, MAX(replication_frequency) AS max_frequency FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, AVG(replication_frequency) AS avg_frequency FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_name='US-East'",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, data_center FROM cloud_regions",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication JOIN cloud_regions ON data_replication.region_id = cloud_regions.region_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, recovery_plan FROM cloud_regions JOIN data_replication ON cloud_regions.region_id = data_replication.region_id JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_id IN (SELECT region_id FROM data_replication WHERE replication_type='Scheduled')",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT replication_frequency, region_name FROM data_replication JOIN cloud_regions ON data_replication.region_id = cloud_regions.region_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM disaster_recovery WHERE recovery_id=1",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT data_center FROM cloud_regions",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_name LIKE 'US-%'",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT replication_type, recovery_plan FROM data_replication JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM disaster_recovery WHERE replication_id IN (SELECT replication_id FROM data_replication WHERE replication_frequency > 1)",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT recovery_id, region_name FROM disaster_recovery JOIN data_replication ON disaster_recovery.replication_id = data_replication.replication_id JOIN cloud_regions ON data_replication.region_id = cloud_regions.region_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, recovery_plan FROM cloud_regions JOIN data_replication ON cloud_regions.region_id = data_replication.region_id JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions INNER JOIN data_replication ON cloud_regions.region_id = data_replication.region_id INNER JOIN disaster_recovery ON data_replication.replication_id = disaster_recovery.replication_id",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM cloud_regions",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_id = (SELECT MAX(region_id) FROM cloud_regions)",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT AVG(replication_frequency) FROM data_replication",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT region_name, COUNT(*) FROM cloud_regions JOIN data_replication ON cloud_regions.region_id = data_replication.region_id GROUP BY region_name",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n  region_id INT PRIMARY KEY,\n  region_name VARCHAR(255) NOT NULL,\n  data_center VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE data_replication (\n  replication_id INT PRIMARY KEY,\n  replication_type VARCHAR(50) NOT NULL,\n  replication_frequency INT NOT NULL,\n  region_id INT NOT NULL,\n  FOREIGN KEY (region_id) REFERENCES cloud_regions(region_id)\n);\n\nCREATE TABLE disaster_recovery (\n  recovery_id INT PRIMARY KEY,\n  recovery_plan TEXT NOT NULL,\n  replication_id INT NOT NULL,\n  FOREIGN KEY (replication_id) REFERENCES data_replication(replication_id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions ORDER BY region_name ASC",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT id, region, data_center FROM synchronization_config;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT id, data_center FROM synchronization_config WHERE region = 'US';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT id, region_name, data_replication_factor FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM region_data WHERE data_sync_delay IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_data_center;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT data_center_name, data_center_location FROM cloud_data_center;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_data_center WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication_logs;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT log_id, operation_type, operation_time FROM data_replication_logs;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication_logs WHERE operation_time > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT s.id, s.region, c.data_center_location FROM synchronization_config s INNER JOIN cloud_data_center c ON s.data_center = c.data_center_name;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT r.region_name, r.data_replication_factor, c.data_center_location FROM region_data r INNER JOIN cloud_data_center c ON r.id = c.region_id;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT s.id, s.region, r.data_replication_factor, l.operation_type FROM synchronization_config s LEFT JOIN region_data r ON s.region = r.region_name LEFT JOIN data_replication_logs l ON s.id = l.data_center_id;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT MAX(data_replication_factor) FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT MIN(data_sync_delay) FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM cloud_data_center;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT AVG(data_replication_factor) FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT data_center_name, COUNT(*) AS data_center_count FROM cloud_data_center GROUP BY data_center_name ORDER BY data_center_count DESC LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config WHERE region = 'US' AND data_center = 'NYC';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT id, region, replication_method FROM synchronization_config WHERE replication_method = 'async';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT region_name, data_replication_factor FROM region_data WHERE data_sync_delay > 10;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config sc INNER JOIN region_data rd ON sc.region = rd.region_name;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT data_center_name, data_center_location FROM cloud_data_center WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config WHERE replication_method = 'sync' ORDER BY region DESC;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT MAX(data_replication_factor) AS max_replication FROM region_data;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT data_center_name FROM cloud_data_center WHERE data_center_location LIKE '%West%';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_logs FROM data_replication_logs WHERE operation_type = 'INSERT';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT AVG(data_sync_delay) AS avg_delay FROM region_data WHERE data_sync_delay IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication_logs WHERE operation_time BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT region_name, SUM(data_replication_factor) AS total_replication FROM region_data GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config WHERE id = (SELECT MAX(id) FROM synchronization_config);",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT sd.data_center, COUNT(dl.log_id) AS total_logs FROM synchronization_config sd INNER JOIN data_replication_logs dl ON sd.id = dl.data_center_id GROUP BY sd.data_center;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config sc LEFT JOIN cloud_data_center cd ON sc.data_center = cd.data_center_name;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT data_center_name, AVG(data_sync_delay) AS avg_delay FROM cloud_data_center GROUP BY data_center_name HAVING AVG(data_sync_delay) > 5;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT region_name, COUNT(data_center_name) AS total_centers FROM region_data rd INNER JOIN cloud_data_center cd ON rd.id = cd.region_id GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT * FROM synchronization_config sc1, synchronization_config sc2 WHERE sc1.region = sc2.region AND sc1.id <> sc2.id;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, operation_type FROM region_data rd, cloud_data_center cd, data_replication_logs dl WHERE rd.id = cd.region_id AND cd.id = dl.data_center_id;",
  "### TABLEDATA\n\nCREATE TABLE synchronization_config (\n    id SERIAL PRIMARY KEY,\n    region VARCHAR(50) NOT NULL,\n    data_center VARCHAR(50) NOT NULL,\n    replication_method VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE region_data (\n    id SERIAL PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_replication_factor INT NOT NULL,\n    data_sync_delay INT\n);\n\nCREATE TABLE cloud_data_center (\n    id SERIAL PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    data_center_location VARCHAR(100) NOT NULL,\n    region_id INT NOT NULL,\n    FOREIGN KEY (region_id) REFERENCES region_data(id)\n);\n\nCREATE TABLE data_replication_logs (\n    log_id SERIAL PRIMARY KEY,\n    operation_type VARCHAR(50) NOT NULL,\n    operation_time TIMESTAMP NOT NULL,\n    data_center_id INT NOT NULL,\n    FOREIGN KEY (data_center_id) REFERENCES cloud_data_center(id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT region, data_center FROM synchronization_config sc1, cloud_data_center cd WHERE sc1.region = cd.data_center_location;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_id, region_name FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_centers;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_center_id, data_center_name FROM data_centers;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT replication_id, data_replication_name FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM replication_jobs;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT job_id, job_name FROM replication_jobs;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM replication_logs;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT log_id, log_message FROM replication_logs;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT cloud_regions.region_id, cloud_regions.region_name, cloud_regions.data_center_count, data_centers.data_center_id, data_centers.data_center_name FROM cloud_regions INNER JOIN data_centers ON cloud_regions.region_id = data_centers.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_centers.data_center_id, data_centers.data_center_name, cloud_regions.region_id, cloud_regions.region_name, cloud_regions.data_center_count FROM data_centers INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT replication_logs.log_id, replication_logs.log_message, replication_jobs.job_id, replication_jobs.job_name, data_replication.replication_id, data_replication.data_replication_name FROM replication_logs INNER JOIN replication_jobs ON replication_logs.job_id = replication_jobs.job_id INNER JOIN data_replication ON replication_jobs.replication_id = data_replication.replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_centers.data_center_id, data_centers.data_center_name, cloud_regions.region_id, cloud_regions.region_name, cloud_regions.data_center_count, replication_jobs.job_id, replication_jobs.job_name FROM data_centers INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id INNER JOIN replication_jobs ON cloud_regions.region_id = replication_jobs.replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT cloud_regions.region_id, data_centers.data_center_id, data_replication.replication_id, replication_jobs.job_id, replication_logs.log_id FROM cloud_regions LEFT JOIN data_centers ON cloud_regions.region_id = data_centers.region_id LEFT JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id LEFT JOIN replication_jobs ON data_replication.replication_id = replication_jobs.replication_id LEFT JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_centers WHERE data_center_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication WHERE replication_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM replication_jobs WHERE job_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM replication_logs WHERE log_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_count FROM cloud_regions WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_centers INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_center_name, region_name FROM data_centers INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_center_name, region_name FROM data_centers INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id WHERE data_center_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT * FROM data_replication INNER JOIN data_centers ON data_replication.data_center_id = data_centers.data_center_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_replication_name, data_center_name, region_name FROM data_replication INNER JOIN data_centers ON data_replication.data_center_id = data_centers.data_center_id INNER JOIN cloud_regions ON data_centers.region_id = cloud_regions.region_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_replication_name, log_message FROM replication_jobs INNER JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id INNER JOIN data_replication ON replication_jobs.replication_id = data_replication.replication_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_replication_name, log_message FROM replication_jobs INNER JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id INNER JOIN data_replication ON replication_jobs.replication_id = data_replication.replication_id WHERE job_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, SUM(data_center_count) AS total_data_centers FROM cloud_regions GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, AVG(data_center_count) AS average_data_centers FROM cloud_regions GROUP BY region_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT data_center_name, COUNT(*) AS total_replication_jobs FROM data_centers INNER JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id GROUP BY data_center_name;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, MAX(data_center_count) AS max_data_centers FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, MIN(data_center_count) AS min_data_centers FROM cloud_regions;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT data_center_id) AS unique_data_centers FROM data_replication;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, replication_id FROM cloud_regions JOIN data_centers ON cloud_regions.region_id = data_centers.region_id JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, log_message FROM cloud_regions JOIN data_centers ON cloud_regions.region_id = data_centers.region_id JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id JOIN replication_jobs ON data_replication.replication_id = replication_jobs.replication_id JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, log_message FROM cloud_regions JOIN data_centers ON cloud_regions.region_id = data_centers.region_id JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id JOIN replication_jobs ON data_replication.replication_id = replication_jobs.replication_id JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id WHERE region_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, log_message FROM cloud_regions JOIN data_centers ON cloud_regions.region_id = data_centers.region_id JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id JOIN replication_jobs ON data_replication.replication_id = replication_jobs.replication_id JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id WHERE data_center_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE cloud_regions (\n    region_id INT PRIMARY KEY,\n    region_name VARCHAR(50) NOT NULL,\n    data_center_count INT NOT NULL\n);\n\nCREATE TABLE data_centers (\n    data_center_id INT PRIMARY KEY,\n    data_center_name VARCHAR(50) NOT NULL,\n    region_id INT REFERENCES cloud_regions(region_id) ON DELETE CASCADE\n);\n\nCREATE TABLE data_replication (\n    replication_id INT PRIMARY KEY,\n    data_replication_name VARCHAR(50) NOT NULL,\n    data_center_id INT REFERENCES data_centers(data_center_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_jobs (\n    job_id INT PRIMARY KEY,\n    job_name VARCHAR(50) NOT NULL,\n    replication_id INT REFERENCES data_replication(replication_id) ON DELETE CASCADE\n);\n\nCREATE TABLE replication_logs (\n    log_id INT PRIMARY KEY,\n    log_message TEXT NOT NULL,\n    job_id INT REFERENCES replication_jobs(job_id) ON DELETE CASCADE\n);\n\n### STATEMENT\n\nSELECT region_name, data_center_name, log_message FROM cloud_regions JOIN data_centers ON cloud_regions.region_id = data_centers.region_id JOIN data_replication ON data_centers.data_center_id = data_replication.data_center_id JOIN replication_jobs ON data_replication.replication_id = replication_jobs.replication_id JOIN replication_logs ON replication_jobs.job_id = replication_logs.job_id WHERE log_id = 1;"
]