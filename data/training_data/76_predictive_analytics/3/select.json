[
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, merchant_id, amount FROM fraudulent_transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE transaction_date = '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(transaction_id) FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS transaction_count FROM fraudulent_transactions GROUP BY user_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS average_amount FROM fraudulent_transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT merchant_id, SUM(amount) AS total_amount FROM fraudulent_transactions GROUP BY merchant_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions ORDER BY transaction_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE is_fraudulent = FALSE ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE transaction_date BETWEEN '2022-03-01' AND '2022-03-31';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE user_id = '123456' AND is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE is_fraudulent = TRUE AND transaction_date < '2022-03-15';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS average_amount FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY user_id HAVING AVG(amount) > 500;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM fraudulent_transactions WHERE user_id = '789101' AND is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, merchant_id, user_id, transaction_date, is_fraudulent FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE amount > 1000 AND transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_transactions FROM fraudulent_transactions GROUP BY user_id HAVING num_transactions > 5;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT merchant_id, AVG(amount) AS avg_amount FROM fraudulent_transactions GROUP BY merchant_id HAVING avg_amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, SUM(amount) AS total_spent FROM fraudulent_transactions GROUP BY user_id ORDER BY total_spent DESC LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_fraudulent_transactions FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(amount) AS max_amount FROM fraudulent_transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT merchant_id FROM fraudulent_transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, MIN(amount) AS min_amount FROM fraudulent_transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, AVG(amount) AS avg_amount FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY user_id HAVING avg_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) AS num_users_with_fraudulent_transactions FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM fraudulent_transactions ORDER BY transaction_date DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE user_id IN ('123e4567-e89b-12d3-a456-426614174001', '223e4567-e89b-12d3-a456-426614174002');",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM fraudulent_transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT merchant_id, COUNT(*) AS num_transactions FROM fraudulent_transactions WHERE is_fraudulent = FALSE GROUP BY merchant_id HAVING num_transactions > 2;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT user_id FROM fraudulent_transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    merchant_id UUID,\n    user_id UUID,\n    transaction_date DATE,\n    is_fraudulent BOOLEAN\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_transactions FROM fraudulent_transactions WHERE amount > 500 GROUP BY user_id HAVING num_transactions > 3;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, description FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, description, is_fraud FROM transactions WHERE is_fraud = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM machine_learning_models;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, algorithm FROM machine_learning_models;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, model_name, accuracy FROM machine_learning_models WHERE accuracy > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT description FROM transactions WHERE amount > 100;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id = 123;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, model_name FROM machine_learning_models WHERE algorithm = 'Random Forest';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transactions WHERE description LIKE '%fraud%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, model_name, accuracy FROM machine_learning_models ORDER BY accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(accuracy) AS max_accuracy FROM machine_learning_models;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT MIN(amount) AS min_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, model_name FROM machine_learning_models WHERE accuracy >= 0.7 AND accuracy <= 0.9;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_fraud_transactions FROM transactions WHERE is_fraud = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000 AND description LIKE '%fraud%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, description FROM transactions WHERE is_fraud = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, algorithm FROM machine_learning_models WHERE accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS average_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.*, m.model_name FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, m.model_name FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id WHERE t.amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, m.model_name FROM transactions t LEFT JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, COALESCE(m.model_name, 'No Model') AS model_name FROM transactions t LEFT JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, CASE WHEN amount >= 1000 THEN 'large' ELSE 'small' END AS transaction_size FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, description, ROW_NUMBER() OVER (ORDER BY transaction_id) AS row_num FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, algorithm, RANK() OVER (ORDER BY accuracy DESC) AS model_rank FROM machine_learning_models;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, m.model_name FROM transactions t FULL OUTER JOIN machine_learning_models m ON t.transaction_id = m.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_fraudulent_transactions FROM transactions WHERE is_fraud = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(accuracy) AS avg_accuracy FROM machine_learning_models GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount, algorithm FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id GROUP BY algorithm;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, m.model_name, AVG(amount) AS avg_amount FROM transactions t JOIN machine_learning_models m ON t.transaction_id = m.model_id GROUP BY t.transaction_id, m.model_name;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    amount DECIMAL,\n    description TEXT,\n    is_fraud BOOLEAN\n);\n\nCREATE TABLE machine_learning_models (\n    model_id INT PRIMARY KEY,\n    model_name TEXT,\n    algorithm TEXT,\n    accuracy DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, COUNT(*) AS total_models FROM machine_learning_models GROUP BY model_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, merchant FROM transactions WHERE is_fraudulent = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, name, email FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_predictions WHERE prediction_result = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, merchant, is_fraudulent FROM transactions WHERE amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE phone_number LIKE '%1234';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v1.0';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE is_fraudulent = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, model_version FROM fraud_predictions WHERE prediction_result = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE amount BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE name LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE prediction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, merchant, is_fraudulent FROM transactions ORDER BY amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v2.0';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date, merchant FROM transactions WHERE is_fraudulent = TRUE AND amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE phone_number = '123-456-7890';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, model_version FROM fraud_predictions WHERE prediction_result = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, merchant, is_fraudulent FROM transactions WHERE transaction_date > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE amount > 1000",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM transactions WHERE merchant = 'Amazon'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, transaction_date FROM transactions WHERE is_fraudulent = TRUE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE name LIKE 'J%'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT customer_id, email FROM customers WHERE phone_number IS NULL",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_predictions WHERE prediction_result = FALSE",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_predictions WHERE prediction_date > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, prediction_result FROM fraud_predictions WHERE model_version = 'v1'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM fraud_predictions WHERE model_version = 'v2'",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT t.transaction_id, t.amount, f.prediction_result FROM transactions t JOIN fraud_predictions f ON t.transaction_id = f.transaction_id",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.name, t.amount FROM customers c JOIN transactions t ON c.customer_id = t.transaction_id WHERE t.amount > 500",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT c.name, COUNT(*) AS total_transactions FROM customers c JOIN transactions t ON c.customer_id = t.transaction_id GROUP BY c.name",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id IN (SELECT transaction_id FROM fraud_predictions WHERE prediction_result = TRUE)",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_id NOT IN (SELECT transaction_id FROM fraud_predictions WHERE prediction_result = TRUE)",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(amount) FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    amount DECIMAL,\n    transaction_date TIMESTAMP,\n    merchant TEXT,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE customers (\n    customer_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    phone_number TEXT\n);\n\nCREATE TABLE fraud_predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    prediction_result BOOLEAN,\n    model_version TEXT,\n    prediction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(amount) AS avg_amount, MAX(amount) AS max_amount, MIN(amount) AS min_amount, SUM(amount) AS total_amount FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, model_accuracy FROM models ORDER BY model_accuracy DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM predictions WHERE confidence > 0.8 AND prediction_result = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount, timestamp FROM transactions WHERE is_fraudulent = true ORDER BY timestamp DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(transaction_id) AS num_transactions FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(model_accuracy) AS avg_accuracy FROM models GROUP BY model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, name, email FROM users WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT prediction_id, model_id, prediction_result FROM predictions WHERE transaction_id = '98765432-aaaa-bbbb-cccc-210987654321';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, name FROM users WHERE name LIKE '%Alice%' OR name LIKE '%Bob%';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT SUM(amount) AS total_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT name, email FROM users WHERE email LIKE '%yahoo.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM models WHERE model_accuracy >= 0.9;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, MAX(amount) AS max_amount FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_id, AVG(confidence) AS avg_confidence FROM predictions GROUP BY model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT transaction_id) AS num_unique_transactions FROM transactions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, model_accuracy FROM models WHERE model_accuracy BETWEEN 0.7 AND 0.8;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM predictions WHERE prediction_result = false;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS num_records FROM users GROUP BY user_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE user_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT transaction_id, amount FROM transactions ORDER BY timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM predictions WHERE prediction_result = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT users.name, transactions.amount FROM users JOIN transactions ON users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT predictions.prediction_result, models.model_name FROM predictions JOIN models ON predictions.model_id = models.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(amount) FROM transactions WHERE is_fraudulent = true;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT users.name, COUNT(transactions.transaction_id) AS transaction_count FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.name ORDER BY transaction_count DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_predictions FROM predictions WHERE confidence > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT users.name, AVG(models.model_accuracy) AS avg_accuracy FROM users JOIN predictions ON users.user_id = predictions.user_id JOIN models ON predictions.model_id = models.model_id GROUP BY users.name HAVING avg_accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT DISTINCT users.name FROM users JOIN transactions ON users.user_id = transactions.user_id WHERE transactions.amount > 1000;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT MAX(timestamp) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT model_name, MAX(model_accuracy) FROM models;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT users.name, SUM(transactions.amount) AS total_amount FROM users JOIN transactions ON users.user_id = transactions.user_id GROUP BY users.name ORDER BY total_amount DESC;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT prediction_id, transaction_id, model_name FROM predictions JOIN models ON predictions.model_id = models.model_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT user_id, email, COUNT(transaction_id) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT DISTINCT model_name FROM models WHERE model_accuracy > 0.95;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT AVG(confidence) AS avg_confidence FROM predictions WHERE model_id = '123e4567-e89b-12d3-a456-426614174000';",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE transactions (\n    transaction_id UUID PRIMARY KEY,\n    user_id UUID,\n    amount DECIMAL,\n    timestamp TIMESTAMP,\n    is_fraudulent BOOLEAN\n);\n\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE models (\n    model_id UUID PRIMARY KEY,\n    model_name VARCHAR,\n    model_accuracy DECIMAL\n);\n\nCREATE TABLE predictions (\n    prediction_id UUID PRIMARY KEY,\n    transaction_id UUID,\n    model_id UUID,\n    prediction_result BOOLEAN,\n    confidence DECIMAL\n);\n\n### STATEMENT\n\nSELECT predictions.prediction_result, models.model_name, users.name FROM predictions JOIN models ON predictions.model_id = models.model_id JOIN users ON predictions.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount FROM fraudulent_transactions WHERE fraud_probability > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_date FROM fraudulent_transactions WHERE transaction_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_details;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_address FROM customer_details WHERE customer_email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraud_detection_models;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT log_id, transaction_id FROM transaction_logs WHERE log_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM flagging_rules;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT rule_name, rule_action FROM flagging_rules WHERE rule_condition LIKE '%high_risk%';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions JOIN customer_details ON fraudulent_transactions.transaction_id = customer_details.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_details JOIN fraud_detection_models ON customer_details.customer_name = fraud_detection_models.model_name;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions JOIN transaction_logs ON fraudulent_transactions.transaction_id = transaction_logs.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions JOIN flagging_rules ON fraudulent_transactions.fraud_probability > 0.5 AND flagging_rules.rule_action = 'flag';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM customer_details JOIN transaction_logs ON customer_details.customer_name LIKE '%Alice%' AND transaction_logs.transaction_id = 1234;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT MIN(transaction_amount) AS min_amount, MAX(transaction_amount) AS max_amount FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(model_accuracy) AS avg_accuracy FROM fraud_detection_models;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT model_name, AVG(model_accuracy) AS avg_accuracy FROM fraud_detection_models GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_address, COUNT(*) AS total_transactions FROM customer_details JOIN transaction_logs ON customer_details.customer_id = transaction_logs.transaction_id GROUP BY customer_address HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_amount, transaction_date FROM fraudulent_transactions WHERE fraud_probability > 0.8;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, customer_email FROM customer_details WHERE LENGTH(customer_address) > 50;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_accuracy > 0.9;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM transaction_logs ORDER BY log_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, log_details FROM transaction_logs JOIN fraudulent_transactions ON transaction_logs.transaction_id = fraudulent_transactions.transaction_id;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT rule_name, rule_action FROM flagging_rules WHERE LENGTH(rule_condition) > 10;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, log_details FROM transaction_logs WHERE EXTRACT(YEAR FROM log_timestamp) = 2022;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT model_name, model_accuracy FROM fraud_detection_models WHERE model_parameters->>'algorithm' = 'Random Forest';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT transaction_id, SUM(transaction_amount) AS total_amount FROM fraudulent_transactions GROUP BY transaction_id HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS num_transactions FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name HAVING num_transactions > 3;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT model_name FROM fraud_detection_models;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT rule_name, COUNT(*) AS num_logs FROM flagging_rules JOIN transaction_logs ON flagging_rules.rule_id = transaction_logs.log_id GROUP BY rule_name HAVING num_logs > 5;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT * FROM fraudulent_transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT AVG(fraud_probability) AS avg_prob FROM fraudulent_transactions;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(transaction_amount) AS max_amount FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT DISTINCT rule_name FROM flagging_rules WHERE rule_action = 'Flag as Fraud';",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT model_name, MAX(model_accuracy) AS max_accuracy FROM fraud_detection_models GROUP BY model_name;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_logs FROM transaction_logs;",
  "### TABLEDATA\n\nCREATE TABLE fraudulent_transactions (\n   transaction_id SERIAL PRIMARY KEY,\n   transaction_amount DECIMAL,\n   transaction_date TIMESTAMPTZ,\n   fraud_probability FLOAT\n);\n\nCREATE TABLE customer_details (\n   customer_id SERIAL PRIMARY KEY,\n   customer_name VARCHAR(255),\n   customer_email VARCHAR(255),\n   customer_address TEXT\n);\n\nCREATE TABLE fraud_detection_models (\n   model_id SERIAL PRIMARY KEY,\n   model_name VARCHAR(255),\n   model_accuracy FLOAT,\n   model_parameters JSON\n);\n\nCREATE TABLE transaction_logs (\n   log_id SERIAL PRIMARY KEY,\n   transaction_id INT REFERENCES fraudulent_transactions(transaction_id),\n   log_details TEXT,\n   log_timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE flagging_rules (\n   rule_id SERIAL PRIMARY KEY,\n   rule_name VARCHAR(255),\n   rule_condition TEXT,\n   rule_action TEXT\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(transaction_amount) AS avg_amount FROM customer_details JOIN fraudulent_transactions ON customer_details.customer_id = fraudulent_transactions.transaction_id GROUP BY customer_name HAVING AVG(transaction_amount) > 1000;"
]