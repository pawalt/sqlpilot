[
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, applicant_name FROM Loan_Default_Risk WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, income FROM Loan_Default_Risk WHERE employment_status = 'Full-time';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, loan_amount FROM Loan_Default_Risk WHERE loan_term = 36;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(id) as num_applicants FROM Loan_Default_Risk WHERE income > 50000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score FROM Loan_Default_Risk WHERE default_risk = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT loan_amount FROM Loan_Default_Risk WHERE income < 30000 AND credit_score < 600;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Loan_Default_Risk WHERE employment_status = 'Part-time' AND income < 40000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, applicant_name, employment_status FROM Loan_Default_Risk WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(loan_amount) as total_loan_amount FROM Loan_Default_Risk WHERE employment_status = 'Unemployed';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(credit_score) as avg_credit_score FROM Loan_Default_Risk WHERE loan_term = 24;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, loan_term FROM Loan_Default_Risk WHERE credit_score > 650 AND default_risk = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, income FROM Loan_Default_Risk WHERE loan_amount >= 20000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, credit_score FROM Loan_Default_Risk WHERE income > 60000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, employment_status FROM Loan_Default_Risk WHERE default_risk = TRUE AND loan_term = 12;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Loan_Default_Risk WHERE credit_score BETWEEN 600 AND 700;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, loan_amount FROM Loan_Default_Risk WHERE employment_status = 'Retired';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount FROM Loan_Default_Risk WHERE credit_score < 500;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(id) as num_defaults FROM Loan_Default_Risk WHERE default_risk = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT income, loan_term FROM Loan_Default_Risk WHERE loan_amount <= 15000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(credit_score) as max_credit_score FROM Loan_Default_Risk WHERE employment_status = 'Student';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM Loan_Default_Risk WHERE default_risk = true;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, income FROM Loan_Default_Risk WHERE credit_score > 700 AND income > 50000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount FROM Loan_Default_Risk WHERE default_risk = false AND loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(id) AS total_applicants FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(credit_score) AS avg_credit_score FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, employment_status FROM Loan_Default_Risk WHERE employment_status = 'Employed';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, loan_term FROM Loan_Default_Risk WHERE loan_term < 36;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, income FROM Loan_Default_Risk WHERE income between 40000 and 80000;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount FROM Loan_Default_Risk WHERE loan_amount < 20000 AND credit_score < 600;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, income, employment_status FROM Loan_Default_Risk WHERE employment_status IN ('Student', 'Unemployed');",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, employment_status FROM Loan_Default_Risk WHERE loan_amount > 15000 OR employment_status = 'Self-Employed';",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_term FROM Loan_Default_Risk ORDER BY loan_term DESC;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, loan_amount, income FROM Loan_Default_Risk WHERE default_risk = false LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, employment_status, loan_term FROM Loan_Default_Risk WHERE loan_term > 24 ORDER BY credit_score ASC;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, income, default_risk FROM Loan_Default_Risk WHERE income > 60000 AND default_risk = true;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, default_risk FROM Loan_Default_Risk WHERE loan_amount > 25000 AND default_risk = true;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(loan_amount) AS min_loan_amount, MAX(loan_amount) AS max_loan_amount FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT employment_status FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT applicant_name, income, default_risk FROM Loan_Default_Risk WHERE income > 70000 AND (default_risk = true OR loan_amount > 30000);",
  "### TABLEDATA\n\nCREATE TABLE Loan_Default_Risk (\n  id INT PRIMARY KEY,\n  applicant_name VARCHAR(255),\n  credit_score INT,\n  loan_amount DECIMAL,\n  employment_status VARCHAR(50),\n  income DECIMAL,\n  loan_term INT,\n  default_risk BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(income) AS avg_income, SUM(loan_amount) AS total_loan_amount FROM Loan_Default_Risk;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT * FROM loan_data WHERE customer_id = 12345;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, credit_score FROM loan_data WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE loan_amount >= 5000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_status FROM loan_data WHERE loan_status = 'Approved';",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT * FROM financial_data WHERE customer_id = 54321;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, income FROM financial_data WHERE income > 50000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, expenses FROM financial_data WHERE expenses < 20000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, savings FROM financial_data WHERE savings > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.credit_score, financial_data.income FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.expenses FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_status, financial_data.savings FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.credit_score, financial_data.income FROM loan_data LEFT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.expenses FROM loan_data LEFT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_status, financial_data.savings FROM loan_data LEFT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.credit_score, financial_data.income FROM loan_data RIGHT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.expenses FROM loan_data RIGHT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_status, financial_data.savings FROM loan_data RIGHT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.credit_score, financial_data.income FROM loan_data FULL JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.expenses FROM loan_data FULL JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_status, financial_data.savings FROM loan_data FULL JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT * FROM loan_data WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, income, expenses FROM financial_data WHERE income > expenses;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_status FROM loan_data WHERE loan_amount < 10000 AND credit_score > 650;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.income FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, SUM(financial_data.income) AS total_income FROM loan_data LEFT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id GROUP BY loan_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT AVG(loan_amount) AS avg_loan_amount FROM loan_data;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, SUM(income) AS total_income, SUM(expenses) AS total_expenses FROM financial_data GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE loan_status = 'approved';",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount, income FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id WHERE credit_score > 600;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE credit_score > 750 OR income > 50000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.loan_amount, financial_data.savings FROM loan_data LEFT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id WHERE financial_data.savings > 10000;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, AVG(credit_score) AS avg_credit_score FROM loan_data GROUP BY customer_id HAVING COUNT(loan_amount) > 1;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT MAX(income) AS max_income FROM financial_data;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE loan_amount > (SELECT AVG(loan_amount) FROM loan_data);",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, income, expenses, savings FROM financial_data WHERE customer_id IN (SELECT customer_id FROM loan_data WHERE credit_score > 700);",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount, savings FROM loan_data INNER JOIN financial_data ON loan_data.customer_id = financial_data.customer_id WHERE income > expenses;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_customers FROM (SELECT DISTINCT customer_id FROM loan_data UNION SELECT DISTINCT customer_id FROM financial_data) AS total_customers;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT loan_data.customer_id, loan_data.credit_score, financial_data.savings FROM loan_data RIGHT JOIN financial_data ON loan_data.customer_id = financial_data.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE loan_data (\n  customer_id INT PRIMARY KEY,\n  credit_score INT,\n  loan_amount DECIMAL(10,2),\n  loan_status VARCHAR(20)\n) \n\n\nCREATE TABLE financial_data (\n  customer_id INT PRIMARY KEY,\n  income DECIMAL(10,2),\n  expenses DECIMAL(10,2),\n  savings DECIMAL(10,2)\n)\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loan_data WHERE customer_id NOT IN (SELECT customer_id FROM financial_data);",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, credit_score FROM customers WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, income FROM customers WHERE income >= 50000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM loans;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount FROM loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT loan_id, loan_amount, interest_rate FROM loans WHERE loan_amount < 5000 AND interest_rate > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date, transaction_amount FROM transactions WHERE transaction_amount < 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, transaction_type FROM transactions WHERE transaction_type = 'purchase';",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount FROM customers c INNER JOIN loans l ON c.customer_id = l.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, t.transaction_amount FROM customers c LEFT JOIN transactions t ON c.customer_id = t.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount, t.transaction_amount FROM customers c LEFT JOIN loans l ON c.customer_id = l.customer_id LEFT JOIN transactions t ON c.customer_id = t.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT l.loan_id, l.loan_amount, t.transaction_amount FROM loans l RIGHT JOIN transactions t ON l.customer_id = t.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount, t.transaction_amount FROM customers c FULL JOIN loans l ON c.customer_id = l.customer_id FULL JOIN transactions t ON c.customer_id = t.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, SUM(t.transaction_amount) AS total_transactions FROM customers c INNER JOIN transactions t ON c.customer_id = t.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, AVG(l.loan_amount) AS average_loan_amount FROM customers c LEFT JOIN loans l ON c.customer_id = l.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, COUNT(*) AS num_transactions FROM transactions GROUP BY customer_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT c.customer_name, MAX(l.interest_rate) AS max_interest_rate FROM customers c INNER JOIN loans l ON c.customer_id = l.customer_id GROUP BY c.customer_name;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, MIN(transaction_amount) AS min_transaction_amount FROM transactions GROUP BY customer_id HAVING MIN(transaction_amount) < 0;",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM customers WHERE credit_score > 700",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_score FROM customers WHERE income > 50000",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, loan_amount FROM loans WHERE interest_rate < 5",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT * FROM loans WHERE loan_status = 'approved'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, transaction_amount FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_name, transaction_amount FROM customers INNER JOIN transactions ON customers.customer_id = transactions.customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(transaction_amount) AS total_transaction FROM transactions GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(credit_score) AS avg_credit_score FROM customers GROUP BY customer_name HAVING AVG(credit_score) > 650",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_id, MAX(loan_amount) AS max_loan_amount FROM loans GROUP BY customer_id",
  "### TABLEDATA\n\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  customer_name VARCHAR,\n  credit_score INT,\n  income DECIMAL\n);\n\n\nCREATE TABLE loans (\n  loan_id INT PRIMARY KEY,\n  customer_id INT,\n  loan_amount DECIMAL,\n  interest_rate DECIMAL,\n  loan_status VARCHAR\n);\n\n\nCREATE TABLE transactions (\n  transaction_id INT PRIMARY KEY,\n  customer_id INT,\n  transaction_date DATE,\n  transaction_amount DECIMAL,\n  transaction_type VARCHAR\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(transaction_id) AS num_transactions FROM customers LEFT JOIN transactions ON customers.customer_id = transactions.customer_id GROUP BY customer_name",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, annual_income FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, credit_score FROM Customers WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Loans;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT loan_amount, interest_rate FROM Loans WHERE loan_term = 24;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT loan_id, customer_id, interest_rate FROM Loans WHERE loan_amount > 5000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM PaymentHistory;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT loan_id, payment_date FROM PaymentHistory WHERE payment_amount >= 1000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT payment_id, payment_amount FROM PaymentHistory WHERE payment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM DefaultRisk;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, risk_score FROM DefaultRisk WHERE risk_score < 0.5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, risk_category FROM DefaultRisk WHERE risk_score BETWEEN 0.3 AND 0.7;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, l.loan_term FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id WHERE l.interest_rate < 0.1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, p.payment_amount FROM Customers c JOIN PaymentHistory p ON c.customer_id = p.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, d.risk_category FROM Customers c JOIN DefaultRisk d ON c.customer_id = d.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_id, l.loan_amount, p.payment_amount FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id JOIN PaymentHistory p ON l.loan_id = p.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount, d.risk_score FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id JOIN DefaultRisk d ON c.customer_id = d.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount, p.payment_amount FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id LEFT JOIN PaymentHistory p ON l.loan_id = p.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT c.customer_name, l.loan_amount, p.payment_amount FROM Customers c JOIN Loans l ON c.customer_id = l.customer_id RIGHT JOIN PaymentHistory p ON l.loan_id = p.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, annual_income FROM Customers WHERE annual_income > 50000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, Loans.loan_amount FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Loans WHERE interest_rate > 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT Customers.customer_name, PaymentHistory.payment_date, PaymentHistory.payment_amount FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id JOIN PaymentHistory ON Loans.loan_id = PaymentHistory.loan_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, credit_score + annual_income AS total_score FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, risk_category FROM Customers JOIN DefaultRisk ON Customers.customer_id = DefaultRisk.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT risk_category FROM DefaultRisk;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_id, SUM(payment_amount) AS total_payment FROM PaymentHistory GROUP BY customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(annual_income) AS avg_income FROM Customers GROUP BY customer_name HAVING avg_income > 60000;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(payment_amount) AS max_payment FROM PaymentHistory GROUP BY customer_name ORDER BY max_payment DESC;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(loan_id) AS num_loans FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id GROUP BY customer_name HAVING num_loans > 1;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, risk_score, CASE WHEN risk_score > 70 THEN 'High Risk' ELSE 'Low Risk' END AS risk_level FROM Customers JOIN DefaultRisk ON Customers.customer_id = DefaultRisk.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, SUM(loan_amount) AS total_loan_amount FROM Loans GROUP BY customer_name ORDER BY total_loan_amount DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS num_payments FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id JOIN PaymentHistory ON Loans.loan_id = PaymentHistory.loan_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, AVG(interest_rate) AS avg_interest_rate FROM Loans GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, loan_amount * (interest_rate / 100) AS total_interest FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, payment_date, payment_amount FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id JOIN PaymentHistory ON Loans.loan_id = PaymentHistory.loan_id WHERE payment_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, ROUND(loan_amount * (interest_rate / 100), 2) AS total_interest FROM Customers JOIN Loans ON Customers.customer_id = Loans.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Customers (\n    customer_id INT PRIMARY KEY,\n    customer_name VARCHAR(50),\n    credit_score INT,\n    annual_income DECIMAL\n);\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    customer_id INT,\n    loan_amount DECIMAL,\n    interest_rate DECIMAL,\n    loan_term INT\n);\n\nCREATE TABLE PaymentHistory (\n    payment_id INT PRIMARY KEY,\n    loan_id INT,\n    payment_date DATE,\n    payment_amount DECIMAL\n);\n\nCREATE TABLE DefaultRisk (\n    customer_id INT,\n    risk_score DECIMAL,\n    risk_category VARCHAR(50),\n    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\n);\n\n### STATEMENT\n\nSELECT customer_name, MAX(loan_amount) - MIN(loan_amount) AS loan_range FROM Loans GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Applicants;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_id, applicant_name FROM Applicants WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Loans WHERE interest_rate < 3.5;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_amount, loan_duration FROM Loans WHERE loan_amount > 100000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_utilization FROM Applicants INNER JOIN CreditHistory ON Applicants.applicant_id = CreditHistory.applicant_id;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, savings, investments FROM Applicants INNER JOIN FinancialData ON Applicants.applicant_id = FinancialData.applicant_id;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM FinancialData WHERE investments > 50000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, risk_score, risk_category FROM Applicants INNER JOIN DefaultRisk ON Applicants.applicant_id = DefaultRisk.applicant_id;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, interest_rate FROM Applicants INNER JOIN Loans ON Applicants.applicant_id = Loans.applicant_id;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Loans WHERE loan_duration < 12;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, payment_history FROM Applicants INNER JOIN CreditHistory ON Applicants.applicant_id = CreditHistory.applicant_id;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_id, risk_category FROM DefaultRisk WHERE risk_score > 75;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, income FROM Applicants WHERE income > 75000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Loans WHERE loan_amount BETWEEN 50000 AND 100000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_utilization, payment_history FROM Applicants INNER JOIN CreditHistory ON Applicants.applicant_id = CreditHistory.applicant_id WHERE credit_utilization < 30;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, savings FROM Applicants INNER JOIN FinancialData ON Applicants.applicant_id = FinancialData.applicant_id WHERE savings > 25000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM DefaultRisk WHERE risk_score < 50;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_id, loan_amount FROM Loans WHERE loan_duration > 24;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, income FROM Applicants WHERE income < 50000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, interest_rate, loan_duration FROM Applicants INNER JOIN Loans ON Applicants.applicant_id = Loans.applicant_id WHERE interest_rate > 4.5;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM Applicants WHERE credit_score > 700;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT loan_amount, loan_duration, interest_rate FROM Loans WHERE loan_amount > 10000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_utilization FROM Applicants INNER JOIN CreditHistory ON Applicants.applicant_id = CreditHistory.applicant_id WHERE credit_utilization > 50;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, investments FROM Applicants INNER JOIN FinancialData ON Applicants.applicant_id = FinancialData.applicant_id WHERE investments > 5000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, risk_score, risk_category FROM Applicants INNER JOIN DefaultRisk ON Applicants.applicant_id = DefaultRisk.applicant_id WHERE risk_score > 75;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, interest_rate FROM Loans INNER JOIN Applicants ON Loans.applicant_id = Applicants.applicant_id WHERE interest_rate < 5;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_applicants FROM Applicants;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(income) AS avg_income FROM Applicants;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(loan_amount) AS min_loan_amount FROM Loans;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(credit_score) AS max_credit_score FROM Applicants;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(savings) AS total_savings FROM FinancialData;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(credit_utilization) AS avg_credit_utilization FROM CreditHistory;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT risk_category FROM DefaultRisk;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, risk_score FROM Applicants INNER JOIN DefaultRisk ON Applicants.applicant_id = DefaultRisk.applicant_id WHERE risk_category = 'High';",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount FROM Loans WHERE loan_duration > 36 AND interest_rate > 7;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, income FROM Applicants WHERE credit_score BETWEEN 600 AND 700;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_score, income FROM Applicants WHERE income < 50000;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, interest_rate FROM Loans WHERE loan_amount < (SELECT AVG(loan_amount) FROM Loans);",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, credit_utilization FROM Applicants INNER JOIN CreditHistory ON Applicants.applicant_id = CreditHistory.applicant_id WHERE payment_history LIKE '%late%';",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT risk_category FROM DefaultRisk ORDER BY risk_category DESC;",
  "### TABLEDATA\n\nCREATE TABLE Applicants (\n    applicant_id INT PRIMARY KEY,\n    applicant_name VARCHAR(255) NOT NULL,\n    credit_score INT NOT NULL,\n    income DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE Loans (\n    loan_id INT PRIMARY KEY,\n    applicant_id INT NOT NULL,\n    loan_amount DECIMAL(10, 2) NOT NULL,\n    loan_duration INT NOT NULL,\n    interest_rate DECIMAL(5, 2) NOT NULL\n);\n\n\nCREATE TABLE CreditHistory (\n    applicant_id INT PRIMARY KEY,\n    credit_utilization DECIMAL(5, 2) NOT NULL,\n    payment_history VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE FinancialData (\n    applicant_id INT PRIMARY KEY,\n    savings DECIMAL(10, 2) NOT NULL,\n    investments DECIMAL(10, 2) NOT NULL\n);\n\n\nCREATE TABLE DefaultRisk (\n    applicant_id INT PRIMARY KEY,\n    risk_score DECIMAL(5, 2) NOT NULL,\n    risk_category VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT applicant_name, loan_amount, interest_rate FROM Loans WHERE loan_amount IN (SELECT loan_amount FROM Loans WHERE interest_rate < 3);"
]