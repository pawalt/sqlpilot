[
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE schedule_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE robot_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE maintenance_type = 'routine';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE scheduled_date > '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT schedule_id, maintenance_type FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, scheduled_date FROM maintenance_schedules WHERE maintenance_type = 'emergency';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE scheduled_date BETWEEN '2023-01-01' AND '2023-12-31';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT maintenance_type FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules ORDER BY schedule_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules ORDER BY scheduled_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(robot_id) FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(schedule_id) FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(scheduled_date) FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(robot_id) FROM maintenance_schedules WHERE completion_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE completion_status = TRUE LIMIT 1;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT maintenance_type) FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_type, COUNT(*) AS count FROM maintenance_schedules GROUP BY maintenance_type HAVING count > 1;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT schedule_id, maintenance_type FROM maintenance_schedules WHERE completion_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT maintenance_type FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE scheduled_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_schedules FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, COUNT(schedule_id) AS total_schedules FROM maintenance_schedules GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(schedule_id) AS average_schedule_id FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules ORDER BY scheduled_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE maintenance_type LIKE '%inspection%';",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, SUM(CASE WHEN completion_status = TRUE THEN 1 ELSE 0 END) AS completed_count, SUM(CASE WHEN completion_status = FALSE THEN 1 ELSE 0 END) AS incomplete_count FROM maintenance_schedules GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_type, COUNT(*) AS total_schedules FROM maintenance_schedules GROUP BY maintenance_type ORDER BY total_schedules DESC;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_type, AVG(schedule_id) AS average_schedule_id FROM maintenance_schedules GROUP BY maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT robot_id, (SELECT COUNT(*) FROM maintenance_schedules WHERE robot_id = maintenance_schedules.robot_id) AS total_schedules FROM maintenance_schedules;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE maintenance_type IN ('cleaning', 'repair');",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, MIN(scheduled_date) AS earliest_maintenance_date, MAX(scheduled_date) AS latest_maintenance_date FROM maintenance_schedules GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedules WHERE schedule_id IN (SELECT DISTINCT schedule_id FROM maintenance_schedules GROUP BY schedule_id HAVING COUNT(schedule_id) > 1);",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, COUNT(DISTINCT maintenance_type) AS unique_maintenance_types FROM maintenance_schedules GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_type, AVG(CAST(robot_id AS FLOAT)) AS avg_robot_id FROM maintenance_schedules GROUP BY maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_type, COUNT(*) AS total_schedules, SUM(CASE WHEN completion_status = TRUE THEN 1 ELSE 0 END) AS completed_count, SUM(CASE WHEN completion_status = FALSE THEN 1 ELSE 0 END) AS incomplete_count FROM maintenance_schedules GROUP BY maintenance_type HAVING total_schedules > 5;",
  "### TABLEDATA\n\nCREATE TABLE maintenance_schedules (\n    schedule_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255),\n    scheduled_date DATE,\n    completion_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT robot_id, M.avg_schedule_id FROM maintenance_schedules, (SELECT AVG(schedule_id) AS avg_schedule_id FROM maintenance_schedules) AS M WHERE maintenance_schedules.robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_date FROM RobotMaintenanceSchedule;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT maintenance_type, maintenance_notes FROM RobotMaintenanceSchedule;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT last_update, battery_level FROM RobotStatus;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule WHERE robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT maintenance_date, maintenance_type FROM RobotMaintenanceSchedule WHERE maintenance_type = 'regular';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule WHERE maintenance_type = 'urgent' AND maintenance_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus WHERE robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT status, last_update FROM RobotStatus WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus WHERE battery_level <= 20;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule ORDER BY maintenance_date;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus ORDER BY last_update DESC;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT AVG(battery_level) AS avg_battery_level FROM RobotStatus;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_robots FROM RobotStatus;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT maintenance_type, COUNT(*) AS maintenance_count FROM RobotMaintenanceSchedule GROUP BY maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, COUNT(*) AS maintenance_count FROM RobotMaintenanceSchedule GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule WHERE maintenance_type = 'Scheduled' AND maintenance_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_date FROM RobotMaintenanceSchedule WHERE maintenance_notes LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE RobotStatus.status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_type, last_update FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE RobotStatus.battery_level < 30;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotMaintenanceSchedule WHERE maintenance_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE battery_level > 50;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_date FROM RobotMaintenanceSchedule WHERE maintenance_type = 'Emergency' AND maintenance_notes IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE last_update < '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_type, battery_level FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE RobotStatus.status = 'Scheduled';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_notes FROM RobotMaintenanceSchedule WHERE maintenance_type = 'Maintenance';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_type, battery_level FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE maintenance_notes LIKE '%important%' AND status = 'Active';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE last_update >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE status NOT IN ('Inactive', 'Out of Order');",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_type, last_update FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE RobotStatus.battery_level BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_date FROM RobotMaintenanceSchedule WHERE maintenance_type = 'Regular Maintenance' AND maintenance_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT * FROM RobotStatus WHERE battery_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE last_update >= '2022-01-01' AND last_update < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_notes FROM RobotMaintenanceSchedule WHERE maintenance_type = 'Scheduled' AND maintenance_notes IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, status FROM RobotStatus WHERE status = 'Inactive' AND battery_level = 100;",
  "### TABLEDATA\n\nCREATE TABLE RobotMaintenanceSchedule (\n  robot_id SERIAL PRIMARY KEY,\n  maintenance_date DATE,\n  maintenance_type VARCHAR(50),\n  maintenance_notes TEXT\n);\n\n\nCREATE TABLE RobotStatus (\n  robot_id SERIAL PRIMARY KEY,\n  status VARCHAR(20),\n  last_update TIMESTAMP,\n  battery_level INT\n);\n\n### STATEMENT\n\nSELECT robot_id, maintenance_type, battery_level FROM RobotMaintenanceSchedule JOIN RobotStatus ON RobotMaintenanceSchedule.robot_id = RobotStatus.robot_id WHERE RobotMaintenanceSchedule.maintenance_date > '2022-06-01' AND RobotStatus.battery_level < 20;",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM robots",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name FROM robots",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT task_name FROM maintenance_tasks",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM robots",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, due_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON maintenance_tasks.task_id = robot_maintenance.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, due_date, completed_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON maintenance_tasks.task_id = robot_maintenance.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name FROM robots LEFT JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id LEFT JOIN maintenance_tasks ON maintenance_tasks.task_id = robot_maintenance.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name FROM robots RIGHT JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id RIGHT JOIN maintenance_tasks ON maintenance_tasks.task_id = robot_maintenance.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name FROM robots FULL JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id FULL JOIN maintenance_tasks ON maintenance_tasks.task_id = robot_maintenance.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM robots",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM maintenance_tasks",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule, COUNT(*) FROM robots GROUP BY robot_name, maintenance_schedule",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT task_name, COUNT(*) FROM maintenance_tasks GROUP BY task_name",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, COUNT(*) AS total_maintenance_tasks FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id GROUP BY robot_name",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks WHERE task_name LIKE '%clean%'",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT * FROM robots WHERE maintenance_schedule = 'weekly'",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, due_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id WHERE due_date < NOW()",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, completed_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id WHERE completed_date IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM robots WHERE robot_name LIKE 'R2%'",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robots.robot_name, maintenance_tasks.task_name FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, due_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id WHERE due_date < NOW()",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, completed_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id WHERE completed_date IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, due_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id WHERE robot_name = 'R3' AND due_date BETWEEN '2023-01-01' AND '2023-12-31'",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, COUNT(*) AS total_tasks FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id GROUP BY robot_name HAVING total_tasks > 5",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, AVG(DATEDIFF(completed_date, due_date)) AS avg_completion_time FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id WHERE completed_date IS NOT NULL GROUP BY robot_name",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, DATEDIFF(completed_date, due_date) AS completion_time FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id WHERE completed_date IS NOT NULL ORDER BY completion_time DESC",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, task_description FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id WHERE LENGTH(task_description) > 50",
  "### TABLEDATA\n\nCREATE TABLE robots (id INT PRIMARY KEY,\n robot_name VARCHAR(50),\n maintenance_schedule VARCHAR(100))\n\nCREATE TABLE maintenance_tasks (task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description VARCHAR(255))\n\nCREATE TABLE robot_maintenance (rm_id INT PRIMARY KEY,\n robot_id INT,\n task_id INT,\n due_date TIMESTAMP,\n completed_date TIMESTAMP)\n\n### STATEMENT\n\nSELECT robot_name, task_name, due_date FROM robots INNER JOIN robot_maintenance ON robots.id = robot_maintenance.robot_id INNER JOIN maintenance_tasks ON robot_maintenance.task_id = maintenance_tasks.task_id ORDER BY due_date ASC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Robots;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, last_maintenance_date FROM Robots;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Maintenance_Log;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT maintenance_type, maintenance_date FROM Maintenance_Log;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Technicians;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT technician_name, specialization FROM Technicians;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Maintenance_Types;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT maintenance_type, description FROM Maintenance_Types;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots WHERE last_maintenance_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots WHERE last_maintenance_date < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots ORDER BY last_maintenance_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots ORDER BY last_maintenance_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots WHERE robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule FROM Robots WHERE robot_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT technician_name, specialization FROM Technicians WHERE technician_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT technician_name, specialization FROM Technicians WHERE technician_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, last_maintenance_date FROM Robots INNER JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_type, maintenance_date, technician_name FROM Robots INNER JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_type, description FROM Maintenance_Log INNER JOIN Maintenance_Types ON Maintenance_Log.maintenance_type = Maintenance_Types.maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule, maintenance_type, description FROM Robots INNER JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id INNER JOIN Maintenance_Types ON Maintenance_Log.maintenance_type = Maintenance_Types.maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Robots;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name FROM Robots WHERE last_maintenance_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_schedule, last_maintenance_date FROM Robots ORDER BY last_maintenance_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT Robots.robot_name, Maintenance_Log.maintenance_date FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id WHERE Maintenance_Log.technician_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_schedule FROM Robots WHERE robot_name LIKE '%Alpha%';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Maintenance_Log WHERE maintenance_type = 'Scheduled Maintenance';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT Robots.robot_name, Technicians.technician_name FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id JOIN Technicians ON Maintenance_Log.technician_name = Technicians.technician_name;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_type, maintenance_date FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id WHERE maintenance_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Technicians WHERE specialization = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_date FROM Maintenance_Log JOIN Robots ON Maintenance_Log.robot_id = Robots.robot_id WHERE Maintenance_Log.maintenance_type = 'Repair';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_date FROM Maintenance_Log JOIN Robots ON Maintenance_Log.robot_id = Robots.robot_id WHERE Maintenance_Log.technician_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_date FROM Robots LEFT JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT technician_name FROM Maintenance_Log;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, COUNT(log_id) AS num_maintenance_logs FROM Maintenance_Log GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_name, maintenance_type, description FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id JOIN Maintenance_Types ON Maintenance_Log.maintenance_type = Maintenance_Types.maintenance_type;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT technician_name, COUNT(log_id) AS num_maintenance_logs FROM Maintenance_Log GROUP BY technician_name HAVING COUNT(log_id) > 5;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_type FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id WHERE maintenance_type IN ('Scheduled Maintenance', 'Repair');",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_date FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id WHERE maintenance_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT robot_id, robot_name, maintenance_type, maintenance_date FROM Robots JOIN Maintenance_Log ON Robots.robot_id = Maintenance_Log.robot_id WHERE maintenance_date > '2022-01-01' AND maintenance_date < '2023-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(255) NOT NULL,\n    maintenance_schedule VARCHAR(255) NOT NULL,\n    last_maintenance_date DATE\n)\n\nCREATE TABLE Maintenance_Log (\n    log_id INT PRIMARY KEY,\n    robot_id INT,\n    maintenance_type VARCHAR(255) NOT NULL,\n    maintenance_date DATE,\n    technician_name VARCHAR(255)\n)\n\nCREATE TABLE Technicians (\n    technician_id INT PRIMARY KEY,\n    technician_name VARCHAR(255) NOT NULL,\n    specialization VARCHAR(255)\n)\n\nCREATE TABLE Maintenance_Types (\n    type_id INT PRIMARY KEY,\n    maintenance_type VARCHAR(255) NOT NULL,\n    description TEXT\n)\n\n### STATEMENT\n\nSELECT technician_name, specialization FROM Technicians WHERE technician_id = (SELECT technician_id FROM Maintenance_Log WHERE log_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM robots;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, manufacturer FROM robots;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT schedule_id, robot_id, schedule_date FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT task_name, frequency FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM robot_maintenance;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT maintenance_id, schedule_id, task_id FROM robot_maintenance;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM maintenance_logs;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT log_id, maintenance_id, log_date FROM maintenance_logs;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_id, robot_name, manufacturer FROM robots WHERE robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT schedule_id, robot_id, schedule_date FROM maintenance_schedule WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks WHERE frequency > 5;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT maintenance_id, schedule_id, task_id FROM robot_maintenance WHERE duration_in_minutes >= 60;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT log_id, maintenance_id, log_date FROM maintenance_logs WHERE log_date BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, manufacturer FROM robots ORDER BY robot_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks ORDER BY frequency DESC;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_id, robot_name, manufacturer FROM robots LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT schedule_id, robot_id, schedule_date FROM maintenance_schedule LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT maintenance_id, schedule_id, task_id FROM robot_maintenance LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT * FROM robots;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, manufacturer FROM robots WHERE purchase_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, last_maintenance_date FROM robots WHERE manufacturer = 'ABC Robotics';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT COUNT(*) FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robots.robot_name, maintenance_schedule.status FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, task_name FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, task_name, schedule_date FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id ORDER BY schedule_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT DISTINCT manufacturer FROM robots;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, schedule_date, task_name FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id WHERE maintenance_schedule.status = 'Scheduled';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, task_name, duration_in_minutes FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id WHERE maintenance_schedule.status = 'Completed';",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, task_description FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id WHERE maintenance_tasks.frequency > 5;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT robot_id) FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, MAX(estimated_duration) AS max_duration FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id GROUP BY robot_name;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, AVG(estimated_duration) AS avg_duration FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id GROUP BY robot_name;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT COUNT(task_id), AVG(duration_in_minutes) AS avg_duration FROM robot_maintenance GROUP BY task_id HAVING COUNT(task_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, log_date, log_description FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id JOIN robot_maintenance ON maintenance_schedule.schedule_id = robot_maintenance.schedule_id JOIN maintenance_logs ON robot_maintenance.maintenance_id = maintenance_logs.maintenance_id ORDER BY log_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, COUNT(log_id) AS num_logs FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id JOIN robot_maintenance ON maintenance_schedule.schedule_id = robot_maintenance.schedule_id JOIN maintenance_logs ON robot_maintenance.maintenance_id = maintenance_logs.maintenance_id GROUP BY robot_name;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, SUM(duration_in_minutes) AS total_duration FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id JOIN robot_maintenance ON maintenance_schedule.schedule_id = robot_maintenance.schedule_id GROUP BY robot_name;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT robot_name, MAX(duration_in_minutes) AS max_duration FROM robots JOIN maintenance_schedule ON robots.robot_id = maintenance_schedule.robot_id JOIN maintenance_tasks ON maintenance_schedule.schedule_id = maintenance_tasks.task_id JOIN robot_maintenance ON maintenance_schedule.schedule_id = robot_maintenance.schedule_id GROUP BY robot_name HAVING MAX(duration_in_minutes) > 60;",
  "### TABLEDATA\n\nCREATE TABLE robots ( \n   robot_id INT PRIMARY KEY, \n   robot_name VARCHAR(50) NOT NULL, \n   manufacturer VARCHAR(50) NOT NULL, \n   purchase_date DATE, \n   last_maintenance_date DATE \n );\n\nCREATE TABLE maintenance_schedule ( \n   schedule_id INT PRIMARY KEY, \n   robot_id INT, \n   schedule_date DATE, \n   status VARCHAR(20) NOT NULL, \n   FOREIGN KEY(robot_id) REFERENCES robots(robot_id) \n );\n\nCREATE TABLE maintenance_tasks ( \n   task_id INT PRIMARY KEY, \n   task_name VARCHAR(50) NOT NULL, \n   task_description TEXT, \n   frequency INT, \n   estimated_duration INT \n );\n\nCREATE TABLE robot_maintenance ( \n   maintenance_id INT PRIMARY KEY, \n   schedule_id INT, \n   task_id INT, \n   performed_date DATE, \n   duration_in_minutes INT, \n   FOREIGN KEY(schedule_id) REFERENCES maintenance_schedule(schedule_id), \n   FOREIGN KEY(task_id) REFERENCES maintenance_tasks(task_id) \n );\n\nCREATE TABLE maintenance_logs ( \n   log_id INT PRIMARY KEY, \n   maintenance_id INT, \n   log_date DATE, \n   log_description TEXT, \n   FOREIGN KEY(maintenance_id) REFERENCES robot_maintenance(maintenance_id) \n );\n\n### STATEMENT\n\nSELECT DISTINCT robot_name, manufacturer FROM robots ORDER BY manufacturer, robot_name;"
]