[
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level FROM user_access WHERE access_level > 1;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE user_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT username FROM user_access WHERE user_id = 200;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE access_level BETWEEN 1 AND 3;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE access_level IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE username LIKE '%john%';",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE username = 'admin' AND password = 'admin123';",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access ORDER BY access_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT MAX(access_level) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT MIN(access_level) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT AVG(access_level) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT SUM(access_level) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT username) FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE user_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT username, access_level FROM user_access WHERE access_level > 3;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM user_access WHERE access_level < 2;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level FROM user_access WHERE access_level = 1;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT DISTINCT access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, password FROM user_access WHERE access_level BETWEEN 2 AND 4;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT * FROM user_access WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level FROM user_access WHERE username NOT LIKE '%12%';",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT AVG(access_level) AS average_access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, MAX(access_level) AS max_access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, MIN(access_level) AS min_access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT SUM(access_level) AS total_access_level FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_access FROM user_access WHERE access_level > 2;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, SUM(access_level) AS total_access FROM user_access GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, MAX(access_level) AS highest_access FROM user_access GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT access_level, COUNT(*) AS access_count FROM user_access GROUP BY access_level;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level, CASE WHEN access_level > 3 THEN 'High' ELSE 'Low' END AS access_type FROM user_access;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level FROM user_access ORDER BY access_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nSELECT user_id, username, access_level FROM user_access ORDER BY username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_id, role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users INNER JOIN roles ON users.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users LEFT JOIN roles ON users.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users RIGHT JOIN roles ON users.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users FULL JOIN roles ON users.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT users.username, roles.role_name FROM users, roles WHERE users.role_id = roles.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY username;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users ORDER BY user_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM users WHERE role_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT SUM(role_id) FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users u JOIN roles r ON u.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE role_id IN (SELECT role_id FROM roles WHERE role_name = 'Admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, r.role_name FROM users u JOIN roles r ON u.role_id = r.role_id WHERE u.role_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN roles r ON u.role_id = r.role_id ORDER BY u.username ASC;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.user_id, u.username, r.role_name FROM users u LEFT JOIN roles r ON u.role_id = r.role_id;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT role_name FROM roles;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) AS avg_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT role_name, COUNT(*) AS total_users FROM users u JOIN roles r ON u.role_id = r.role_id GROUP BY role_name;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE username LIKE 'J%';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT role_id) AS total_roles FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) AS min_user_id, MAX(user_id) AS max_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE role_id IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id BETWEEN 1 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT username, role_name FROM users u JOIN roles r ON u.role_id = r.role_id WHERE u.username = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_admins FROM users u JOIN roles r ON u.role_id = r.role_id WHERE r.role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT user_id, username, role_id FROM users WHERE role_id NOT IN (SELECT role_id FROM roles WHERE role_name = 'Admin');",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM users WHERE user_id = (SELECT MAX(user_id) FROM users);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nSELECT u.username, r.role_name FROM users u JOIN roles r ON u.role_id = r.role_id WHERE r.role_name = 'Admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT permission_id, permission_name FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_id FROM UserPermissions;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, p.permission_name FROM Users u JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, u.role, p.permission_name FROM Users u JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Permissions WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM UserPermissions WHERE user_id = 1 AND permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT role FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) FROM UserPermissions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT permission_id, COUNT(*) FROM UserPermissions GROUP BY permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_id, COUNT(*) FROM UserPermissions GROUP BY user_id, permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username, role FROM Users WHERE role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, permission_name FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, permission_name FROM Users LEFT JOIN UserPermissions ON Users.user_id = UserPermissions.user_id LEFT JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id ORDER BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT user_id) FROM UserPermissions;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, COUNT(permission_id) FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, permission_name FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id WHERE Users.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role, COUNT(permission_id) FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id GROUP BY user_id, role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(permission_id) FROM UserPermissions GROUP BY user_id HAVING COUNT(permission_id) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username, password FROM Users WHERE username LIKE '%a%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role FROM Users WHERE role IN ('admin', 'editor');",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(permission_id) FROM UserPermissions GROUP BY user_id HAVING COUNT(permission_id) >= 3;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, permission_name FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id WHERE permission_name = 'read';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(DISTINCT permission_id) AS num_permissions FROM UserPermissions GROUP BY user_id HAVING num_permissions > 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, MAX(permission_id), MIN(permission_id) FROM UserPermissions GROUP BY user_id HAVING COUNT(permission_id) > 2;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS num_permissions FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id GROUP BY username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_id, permission_name FROM UserPermissions JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, COUNT(permission_id) AS num_permissions FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id GROUP BY user_id HAVING num_permissions BETWEEN 2 AND 4;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_name FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id WHERE Users.user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username, role FROM Users WHERE role = 'editor' ORDER BY username DESC;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT username FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM RobotAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_name FROM RobotAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_id, robot_name FROM RobotAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT permission_name FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM UserPermissions;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_id FROM UserPermissions;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_name FROM UserPermissions;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UA.username, RA.robot_name FROM UserAccess UA INNER JOIN RobotAccess RA ON UA.user_id = RA.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UA.username, P.permission_name FROM UserAccess UA INNER JOIN UserPermissions UP ON UA.user_id = UP.user_id INNER JOIN Permissions P ON UP.permission_id = P.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UA.username, RA.robot_name, P.permission_name FROM UserAccess UA INNER JOIN RobotAccess RA ON UA.user_id = RA.user_id INNER JOIN UserPermissions UP ON UA.user_id = UP.user_id INNER JOIN Permissions P ON UP.permission_id = P.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id) FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT username FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM RobotAccess WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM RobotAccess WHERE robot_name LIKE 'R%';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(robot_id) FROM RobotAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) FROM UserAccess;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT MIN(permission_id) FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM UserAccess INNER JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess LEFT JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess RIGHT JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess FULL JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.user_id, COUNT(*) AS total_robots FROM UserAccess JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, count(RobotAccess.robot_id) AS total_robots FROM UserAccess LEFT JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, count(RobotAccess.robot_id) AS total_robots FROM UserAccess RIGHT JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, count(RobotAccess.robot_id) AS total_robots FROM UserAccess FULL JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT Permission_name FROM Permissions WHERE permission_id IN (SELECT permission_id FROM UserPermissions WHERE user_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id AND UserAccess.user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess CROSS JOIN RobotAccess WHERE UserAccess.user_id = RobotAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, Permission_name FROM UserAccess JOIN UserPermissions ON UserAccess.user_id = UserPermissions.user_id JOIN Permissions ON UserPermissions.permission_id = Permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, SUM(UP.permission_id) AS total_permissions FROM UserAccess LEFT JOIN UserPermissions UP ON UserAccess.user_id = UP.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, COUNT(UP.permission_id) AS total_permissions FROM UserAccess LEFT JOIN UserPermissions UP ON UserAccess.user_id = UP.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, COUNT(UP.permission_id) AS total_permissions FROM UserAccess RIGHT JOIN UserPermissions UP ON UserAccess.user_id = UP.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, COUNT(UP.permission_id) AS total_permissions FROM UserAccess FULL JOIN UserPermissions UP ON UserAccess.user_id = UP.user_id GROUP BY UserAccess.user_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, Permission_name FROM UserAccess JOIN UserPermissions UP ON UserAccess.user_id = UP.user_id JOIN Permissions ON UP.permission_id = Permissions.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id WHERE RobotAccess.robot_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nSELECT UserAccess.username, RobotAccess.robot_name FROM UserAccess JOIN RobotAccess ON UserAccess.user_id = RobotAccess.user_id ORDER BY RobotAccess.robot_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT username FROM Users WHERE user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Robots WHERE robot_type = 'Assistant';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_name, robot_type FROM Robots WHERE user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT permission_name FROM Permissions;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_id FROM UserPermissions WHERE user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_id, permission_id FROM RobotPermissions WHERE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM Users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_name, robot_type FROM Robots WHERE robot_type LIKE '%bot%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, username FROM Users WHERE user_id BETWEEN 2 AND 5;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_name, robot_type FROM Robots WHERE user_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT permission_id, description FROM Permissions WHERE description IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(user_id) AS total_users FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT AVG(user_id) AS avg_user_id FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT MAX(user_id) AS max_user_id FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT MIN(user_id) AS min_user_id FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_permissions FROM UserPermissions GROUP BY user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_id, COUNT(*) AS total_permissions FROM RobotPermissions GROUP BY robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT user_id, permission_name FROM Users JOIN UserPermissions ON Users.user_id = UserPermissions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT robot_id, permission_name FROM Robots JOIN RobotPermissions ON Robots.robot_id = RobotPermissions.robot_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Users WHERE username LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name FROM Users u JOIN Robots r ON u.user_id = r.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, p.permission_name FROM Users u JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT r.robot_name, p.permission_name FROM Robots r JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(rp.permission_id) AS permission_count FROM Users u JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT r.robot_name, COUNT(rp.permission_id) AS permission_count FROM Robots r JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id GROUP BY r.robot_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, COUNT(rp.permission_id) AS permission_count FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id GROUP BY u.username, r.robot_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id WHERE u.username = 'Alice' AND r.robot_name = 'Robo1';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id WHERE u.username = 'Bob' AND p.permission_name = 'READ';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id WHERE u.username = 'Alice' OR r.robot_name = 'Robo2';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id WHERE u.username = 'Alice' OR p.permission_name = 'WRITE';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id WHERE r.robot_name IN ('Robo1', 'Robo2');",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, p.permission_name FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id WHERE p.permission_name LIKE '%DELETE%';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username AS user, r.robot_name AS robot, p.permission_name AS permission FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id WHERE u.username = 'Alice';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT p.permission_id) AS unique_permissions FROM Users u JOIN UserPermissions up ON u.user_id = up.user_id JOIN Permissions p ON up.permission_id = p.permission_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT r.robot_id) AS unique_robots FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT r.robot_name, COUNT(DISTINCT rp.permission_id) AS unique_permissions FROM Robots r JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id GROUP BY r.robot_name;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(DISTINCT rp.permission_id) AS unique_permissions FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id GROUP BY u.username;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nSELECT u.username, r.robot_name, SUM(p.permission_id) AS permission_sum FROM Users u JOIN Robots r ON u.user_id = r.user_id JOIN RobotPermissions rp ON r.robot_id = rp.robot_id JOIN Permissions p ON rp.permission_id = p.permission_id GROUP BY u.username, r.robot_name;"
]