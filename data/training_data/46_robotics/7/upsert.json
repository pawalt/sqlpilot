[
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (1, 'john_doe', 'password123', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'john_doe', password = 'new_password', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (2, 'jane_smith', 'pass123', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'jane_smith', password = 'new_pass', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (3, 'alice_wong', 'securepass', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'alice_wong', password = 'secure_pass', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (4, 'bob_jackson', 'abc123', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'bob_jackson', password = 'new_abc', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (5, 'mary_brown', 'p@ssw0rd', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'mary_brown', password = 'new_p@ss', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (6, 'sam_smith', 'passw0rd', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'sam_smith', password = 'new_passw0rd', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (7, 'laura_white', 'password456', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'laura_white', password = 'new_password2', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (8, 'chris_evans', 'letmein', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'chris_evans', password = 'new_pass2', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (9, 'emily_jones', 'qwerty123', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'emily_jones', password = 'new_qwerty', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (10, 'alex_garcia', 'password789', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'alex_garcia', password = 'new_password3', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (11, 'sara_adams', 'pass456', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'sara_adams', password = 'new_pass456', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (12, 'mike_davis', 'abc456', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'mike_davis', password = 'new_abc2', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (13, 'linda_johnson', 'password@1', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'linda_johnson', password = 'new_password4', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (14, 'peter_smith', 'letmein2', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'peter_smith', password = 'new_letmein', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (15, 'jessica_wilson', 'securepass2', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'jessica_wilson', password = 'new_securepass', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (16, 'steven_adams', 'abc789', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'steven_adams', password = 'new_abc3', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (17, 'elizabeth_martin', 'password321', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'elizabeth_martin', password = 'new_password5', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (18, 'matt_thompson', 'letmein3', 3) ON CONFLICT (user_id) DO UPDATE SET username = 'matt_thompson', password = 'new_letmein2', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (19, 'amanda_clark', 'qwe123', 2) ON CONFLICT (user_id) DO UPDATE SET username = 'amanda_clark', password = 'new_qwe', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (20, 'kevin_baker', 'pass@321', 1) ON CONFLICT (user_id) DO UPDATE SET username = 'kevin_baker', password = 'new_pass2', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (1, 'john_doe', 'password123', 1) ON DUPLICATE KEY UPDATE username = 'john_doe', password = 'password123', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (2, 'jane_smith', 'qwerty', 2) ON DUPLICATE KEY UPDATE username = 'jane_smith', password = 'qwerty', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (3, 'mike_jones', 'abc123', 3) ON DUPLICATE KEY UPDATE username = 'mike_jones', password = 'abc123', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (4, 'sarah_white', 'admin123', 1) ON DUPLICATE KEY UPDATE username = 'sarah_white', password = 'admin123', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (5, 'peter_brown', 'pass456', 2) ON DUPLICATE KEY UPDATE username = 'peter_brown', password = 'pass456', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (6, 'lisa_green', 'green123', 3) ON DUPLICATE KEY UPDATE username = 'lisa_green', password = 'green123', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (7, 'kevin_black', 'black456', 1) ON DUPLICATE KEY UPDATE username = 'kevin_black', password = 'black456', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (8, 'emily_gray', 'em123', 2) ON DUPLICATE KEY UPDATE username = 'emily_gray', password = 'em123', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (9, 'alex_baker', 'cookie123', 3) ON DUPLICATE KEY UPDATE username = 'alex_baker', password = 'cookie123', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (10, 'sophia_chen', 'chensoph', 1) ON DUPLICATE KEY UPDATE username = 'sophia_chen', password = 'chensoph', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (11, 'matt_king', 'king123', 2) ON DUPLICATE KEY UPDATE username = 'matt_king', password = 'king123', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (12, 'linda_zhang', 'lindazh', 3) ON DUPLICATE KEY UPDATE username = 'linda_zhang', password = 'lindazh', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (13, 'brad_smith', 'braders', 1) ON DUPLICATE KEY UPDATE username = 'brad_smith', password = 'braders', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (14, 'jennifer_wu', 'wu233', 2) ON DUPLICATE KEY UPDATE username = 'jennifer_wu', password = 'wu233', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (15, 'mark_tan', 'tanmark', 3) ON DUPLICATE KEY UPDATE username = 'mark_tan', password = 'tanmark', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (16, 'sam_brown', 'brownsam', 1) ON DUPLICATE KEY UPDATE username = 'sam_brown', password = 'brownsam', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (17, 'laura_lewis', 'lewisl', 2) ON DUPLICATE KEY UPDATE username = 'laura_lewis', password = 'lewisl', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (18, 'andy_wang', 'wangandy', 3) ON DUPLICATE KEY UPDATE username = 'andy_wang', password = 'wangandy', access_level = 3",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (19, 'megan_taylor', 'taylormeg', 1) ON DUPLICATE KEY UPDATE username = 'megan_taylor', password = 'taylormeg', access_level = 1",
  "### TABLEDATA\n\nCREATE TABLE user_access (\n\tuser_id INT PRIMARY KEY,\n\tusername VARCHAR(50) NOT NULL,\n\tpassword VARCHAR(50) NOT NULL,\n\taccess_level INT\n)\n\n### STATEMENT\n\nINSERT INTO user_access (user_id, username, password, access_level) VALUES (20, 'jason_wu', 'wu456', 2) ON DUPLICATE KEY UPDATE username = 'jason_wu', password = 'wu456', access_level = 2",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (1, 'john_doe', 'password123', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (2, 'jane_smith', 'securepass', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (3, 'alice', 'p@ssw0rd', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (4, 'bob12', 'b0bp@ss', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (5, 'sammy', 'blu3sky', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (6, 'emily_r', '3mily123', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (7, 'andy24', 'andyp@ss', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (8, 'laura_', 'laur@123', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (9, 'mike55', 'mikepass', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (10, 'sara11', 'sara987', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (11, 'tom12', 't0mp@ss', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (12, 'jessy_', 'jessy4ever', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (13, 'max_m', 'max!pass', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (14, 'grace3', 'gr@cepass', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (15, 'luke5', 'luke1@3', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (16, 'oliver7', 'oliverpass', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (17, 'ella_', 'ellap@ss', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (18, 'peter12', 'p3t@r123', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (19, 'elsa11', 'elsa_pass', 2);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (20, 'ronald_', 'ronald123', 1);",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (1, 'john_doe', 'password123', 1) ON DUPLICATE KEY UPDATE username='john_doe', password='password123', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (2, 'jane_smith', 'example456', 2) ON DUPLICATE KEY UPDATE username='jane_smith', password='example456', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (3, 'robert_johnson', 'testpass', 1) ON DUPLICATE KEY UPDATE username='robert_johnson', password='testpass', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (4, 'emily_white', 'pass123', 3) ON DUPLICATE KEY UPDATE username='emily_white', password='pass123', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (5, 'michael_davis', 'secure123', 1) ON DUPLICATE KEY UPDATE username='michael_davis', password='secure123', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (6, 'sarah_miller', 'password321', 2) ON DUPLICATE KEY UPDATE username='sarah_miller', password='password321', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (7, 'jason_smith', 'pass12345', 3) ON DUPLICATE KEY UPDATE username='jason_smith', password='pass12345', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (8, 'lisa_jones', 'examplepass', 1) ON DUPLICATE KEY UPDATE username='lisa_jones', password='examplepass', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (9, 'eric_thompson', 'securepass', 2) ON DUPLICATE KEY UPDATE username='eric_thompson', password='securepass', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (10, 'angela_adams', 'testpass123', 3) ON DUPLICATE KEY UPDATE username='angela_adams', password='testpass123', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (11, 'peter_morgan', 'secret123', 1) ON DUPLICATE KEY UPDATE username='peter_morgan', password='secret123', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (12, 'olivia_baker', 'pass456', 2) ON DUPLICATE KEY UPDATE username='olivia_baker', password='pass456', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (13, 'david_wilson', 'examplepass123', 3) ON DUPLICATE KEY UPDATE username='david_wilson', password='examplepass123', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (14, 'emma_yang', 'secure321', 1) ON DUPLICATE KEY UPDATE username='emma_yang', password='secure321', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (15, 'jacob_brown', 'passwordpass', 2) ON DUPLICATE KEY UPDATE username='jacob_brown', password='passwordpass', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (16, 'grace_kim', 'passpass123', 3) ON DUPLICATE KEY UPDATE username='grace_kim', password='passpass123', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (17, 'matt_butler', 'example345', 1) ON DUPLICATE KEY UPDATE username='matt_butler', password='example345', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (18, 'sophia_clark', 'secure567', 2) ON DUPLICATE KEY UPDATE username='sophia_clark', password='secure567', role_id=2;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (19, 'ryan_green', 'pass567', 3) ON DUPLICATE KEY UPDATE username='ryan_green', password='pass567', role_id=3;",
  "### TABLEDATA\n\nCREATE TABLE users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role_id INT\n);\n\nCREATE TABLE roles (\n    role_id INT PRIMARY KEY,\n    role_name VARCHAR(50) NOT NULL\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, password, role_id) VALUES (20, 'lily_taylor', 'examplepass1', 1) ON DUPLICATE KEY UPDATE username='lily_taylor', password='examplepass1', role_id=1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (1, 'john_doe', 'password123', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (2, 'jane_smith', 'pass456', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (3, 'mike_jackson', 'testpass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (4, 'jenny_miller', 'securepass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (5, 'robert_wilson', 'pass1234', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (6, 'sara_davis', 'sara_pass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (7, 'adam_smith', 'adam_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (8, 'lisa_jones', 'lisa123', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (9, 'peter_brown', 'pete_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (10, 'emily_wilson', 'emily_pass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (11, 'brandon_wright', 'brandon123', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (12, 'melissa_white', 'melissa_pass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (13, 'kevin_jackson', 'kevin_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (14, 'natalie_brown', 'natalie_pass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (15, 'chris_evans', 'chris_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (16, 'jessica_gray', 'jessica123', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (17, 'matt_williams', 'matt_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (18, 'sophia_johnson', 'sophia_pass', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (19, 'david_thomas', 'david_pass', 'user') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (20, 'olivia_miller', 'olivia123', 'admin') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password, role = excluded.role;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (1, 'john_doe', 'password1', 'admin') ON DUPLICATE KEY UPDATE username='john_doe';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (2, 'jane_smith', 'password2', 'user') ON DUPLICATE KEY UPDATE role='user';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (3, 'alice_white', 'password3', 'admin') ON DUPLICATE KEY UPDATE role='admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (1, 'read') ON DUPLICATE KEY UPDATE permission_name='read';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (2, 'write') ON DUPLICATE KEY UPDATE permission_name='write';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (3, 'execute') ON DUPLICATE KEY UPDATE permission_name='execute';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 2) ON DUPLICATE KEY UPDATE permission_id=2;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (2, 3) ON DUPLICATE KEY UPDATE permission_id=3;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (3, 1) ON DUPLICATE KEY UPDATE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (4, 'bob_smith', 'password4', 'user') ON DUPLICATE KEY UPDATE role='user';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (5, 'charlie_brown', 'password5', 'user') ON DUPLICATE KEY UPDATE role='user';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (4, 'delete') ON DUPLICATE KEY UPDATE permission_name='delete';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (5, 'update') ON DUPLICATE KEY UPDATE permission_name='update';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE permission_id=4;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (4, 5) ON DUPLICATE KEY UPDATE permission_id=5;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (5, 1) ON DUPLICATE KEY UPDATE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (6, 'david_green', 'password6', 'admin') ON DUPLICATE KEY UPDATE role='admin';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password, role) VALUES (7, 'emily_black', 'password7', 'user') ON DUPLICATE KEY UPDATE role='user';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (6, 'create') ON DUPLICATE KEY UPDATE permission_name='create';",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL,\n    role VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT,\n    permission_id INT,\n    PRIMARY KEY (user_id, permission_id),\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (7, 'list') ON DUPLICATE KEY UPDATE permission_name='list';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (1, 'user1', 'password1') ON DUPLICATE KEY UPDATE username = 'user1_updated', password = 'password1_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (1, 'robot1', 1) ON DUPLICATE KEY UPDATE robot_name = 'robot1_updated', user_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (1, 'permission1') ON DUPLICATE KEY UPDATE permission_name = 'permission1_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE permission_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (2, 'user2', 'password2') ON DUPLICATE KEY UPDATE username = 'user2_updated', password = 'password2_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (2, 'robot2', 2) ON DUPLICATE KEY UPDATE robot_name = 'robot2_updated', user_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (2, 'permission2') ON DUPLICATE KEY UPDATE permission_name = 'permission2_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE permission_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (3, 'user3', 'password3') ON DUPLICATE KEY UPDATE username = 'user3_updated', password = 'password3_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (3, 'robot3', 3) ON DUPLICATE KEY UPDATE robot_name = 'robot3_updated', user_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (3, 'permission3') ON DUPLICATE KEY UPDATE permission_name = 'permission3_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE permission_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (4, 'user4', 'password4') ON DUPLICATE KEY UPDATE username = 'user4_updated', password = 'password4_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (4, 'robot4', 4) ON DUPLICATE KEY UPDATE robot_name = 'robot4_updated', user_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (4, 'permission4') ON DUPLICATE KEY UPDATE permission_name = 'permission4_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE permission_id = 4;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (5, 'user5', 'password5') ON DUPLICATE KEY UPDATE username = 'user5_updated', password = 'password5_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (5, 'robot5', 5) ON DUPLICATE KEY UPDATE robot_name = 'robot5_updated', user_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (5, 'permission5') ON DUPLICATE KEY UPDATE permission_name = 'permission5_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (5, 5) ON DUPLICATE KEY UPDATE permission_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (1, 'john_doe', 'password123') ON DUPLICATE KEY UPDATE username='john_doe_upserted', password='new_password123';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (1, 'robot1', 1) ON DUPLICATE KEY UPDATE robot_name='robot1_upserted';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (1, 'read_permission') ON DUPLICATE KEY UPDATE permission_name='read_permission_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 1) ON DUPLICATE KEY UPDATE permission_id=1;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (2, 'jane_smith', 'qwerty') ON DUPLICATE KEY UPDATE username='jane_smith_updated', password='new_qwerty';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (2, 'robot2', 3) ON DUPLICATE KEY UPDATE robot_name='robot2_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (2, 'write_permission') ON DUPLICATE KEY UPDATE permission_name='write_permission_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (2, 2) ON DUPLICATE KEY UPDATE permission_id=2;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (3, 'alice_wonderland', 'alice_password') ON DUPLICATE KEY UPDATE username='alice_wonderland_updated', password='new_alice_password';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (3, 'robot3', 2) ON DUPLICATE KEY UPDATE robot_name='robot3_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (3, 'execute_permission') ON DUPLICATE KEY UPDATE permission_name='execute_permission_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (3, 3) ON DUPLICATE KEY UPDATE permission_id=3;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (4, 'bob_smith', 'bob_password') ON DUPLICATE KEY UPDATE username='bob_smith_updated', password='new_bob_password';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (4, 'robot4', 4) ON DUPLICATE KEY UPDATE robot_name='robot4_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (4, 'delete_permission') ON DUPLICATE KEY UPDATE permission_name='delete_permission_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (4, 4) ON DUPLICATE KEY UPDATE permission_id=4;",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserAccess (user_id, username, password) VALUES (5, 'david_brown', 'davidpassword') ON DUPLICATE KEY UPDATE username='david_brown_updated', password='new_davidpassword';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotAccess (robot_id, robot_name, user_id) VALUES (5, 'robot5', 5) ON DUPLICATE KEY UPDATE robot_name='robot5_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name) VALUES (5, 'admin_permission') ON DUPLICATE KEY UPDATE permission_name='admin_permission_updated';",
  "### TABLEDATA\n\nCREATE TABLE UserAccess (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE RobotAccess (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    user_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id)\n);\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE UserPermissions (\n    user_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES UserAccess(user_id),\n    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (5, 5) ON DUPLICATE KEY UPDATE permission_id=5;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password) VALUES (1, 'alice', 'password123') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Users (user_id, username, password) VALUES (2, 'bob', 'pass123') ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, password = EXCLUDED.password;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Robots (robot_id, robot_name, robot_type, user_id) VALUES (1, 'Robot1', 'Assistant', 1) ON CONFLICT (robot_id) DO UPDATE SET robot_name = EXCLUDED.robot_name, robot_type = EXCLUDED.robot_type, user_id = EXCLUDED.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Robots (robot_id, robot_name, robot_type, user_id) VALUES (2, 'Robot2', 'Helper', 2) ON CONFLICT (robot_id) DO UPDATE SET robot_name = EXCLUDED.robot_name, robot_type = EXCLUDED.robot_type, user_id = EXCLUDED.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, description) VALUES (1, 'Read', 'Allows read access') ON CONFLICT (permission_id) DO UPDATE SET permission_name = EXCLUDED.permission_name, description = EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO Permissions (permission_id, permission_name, description) VALUES (2, 'Write', 'Allows write access') ON CONFLICT (permission_id) DO UPDATE SET permission_name = EXCLUDED.permission_name, description = EXCLUDED.description;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 1) ON CONFLICT (user_id, permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO UserPermissions (user_id, permission_id) VALUES (2, 2) ON CONFLICT (user_id, permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotPermissions (robot_id, permission_id) VALUES (1, 1) ON CONFLICT (robot_id, permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nINSERT INTO RobotPermissions (robot_id, permission_id) VALUES (2, 2) ON CONFLICT (robot_id, permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nUPSERT INTO Users (user_id, username, password) VALUES (1, 'Alice', 'pass123') ON CONFLICT (user_id) DO UPDATE SET username = excluded.username, password = excluded.password;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nUPSERT INTO Robots (robot_id, robot_name, robot_type, user_id) VALUES (1, 'Robot1', 'Type1', 1) ON CONFLICT (robot_id) DO UPDATE SET robot_name = excluded.robot_name, robot_type = excluded.robot_type, user_id = excluded.user_id;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nUPSERT INTO Permissions (permission_id, permission_name, description) VALUES (1, 'Read', 'Can read data') ON CONFLICT (permission_id) DO UPDATE SET permission_name = excluded.permission_name, description = excluded.description;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nUPSERT INTO UserPermissions (user_id, permission_id) VALUES (1, 1) ON CONFLICT (user_id, permission_id) DO NOTHING;",
  "### TABLEDATA\n\nCREATE TABLE Users (\n    user_id INT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\n\nCREATE TABLE Robots (\n    robot_id INT PRIMARY KEY,\n    robot_name VARCHAR(50) NOT NULL,\n    robot_type VARCHAR(50) NOT NULL,\n    user_id INT REFERENCES Users(user_id)\n);\n\n\nCREATE TABLE Permissions (\n    permission_id INT PRIMARY KEY,\n    permission_name VARCHAR(50) NOT NULL,\n    description TEXT\n);\n\n\nCREATE TABLE UserPermissions (\n    user_id INT REFERENCES Users(user_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (user_id, permission_id)\n);\n\n\nCREATE TABLE RobotPermissions (\n    robot_id INT REFERENCES Robots(robot_id),\n    permission_id INT REFERENCES Permissions(permission_id),\n    PRIMARY KEY (robot_id, permission_id)\n);\n\n### STATEMENT\n\nUPSERT INTO RobotPermissions (robot_id, permission_id) VALUES (1, 1) ON CONFLICT (robot_id, permission_id) DO NOTHING;"
]