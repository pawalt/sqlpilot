[
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE price < 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM inventory WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM inventory WHERE quantity > 0 AND price < 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name FROM inventory WHERE price BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name FROM inventory WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, quantity, price FROM inventory WHERE product_name = 'Phone';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(price) FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT MAX(price) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT MIN(price) FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price, quantity, price * quantity AS total_value FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price, quantity * price AS total_price FROM inventory WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price, price * quantity AS total_price FROM inventory ORDER BY total_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price FROM inventory ORDER BY product_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory WHERE price > 100 ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity > 100 AND price < 50.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM inventory WHERE price BETWEEN 20.00 AND 50.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory WHERE quantity <= 50 OR price > 100.00;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price FROM inventory WHERE product_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price * quantity AS total_price FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT COUNT(product_id) AS total_products FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity FROM inventory ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity * price) AS total_value FROM inventory GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price FROM inventory WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price FROM inventory WHERE price = (SELECT MAX(price) FROM inventory);",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name, price FROM inventory ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM inventory WHERE quantity > (SELECT AVG(quantity) FROM inventory);",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, price, price * quantity AS total_price FROM inventory WHERE price * quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price, price * quantity AS total_value FROM inventory WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, price, price * quantity AS total_value FROM inventory WHERE quantity <= 20;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, quantity, price FROM inventory LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, price FROM inventory WHERE quantity < 50 AND price > 30.00;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_quantity FROM products WHERE product_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT SUM(product_price) AS total_price FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_quantity * product_price AS total_value FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products ORDER BY product_price DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products ORDER BY product_quantity ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_updates;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products LEFT JOIN inventory_updates ON products.product_id = inventory_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products RIGHT JOIN inventory_updates ON products.product_id = inventory_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products INNER JOIN inventory_updates ON products.product_id = inventory_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products LEFT JOIN inventory_updates ON products.product_id = inventory_updates.product_id WHERE update_quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products RIGHT JOIN inventory_updates ON products.product_id = inventory_updates.product_id WHERE product_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products INNER JOIN inventory_updates ON products.product_id = inventory_updates.product_id WHERE product_price < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, update_quantity, update_time FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id ORDER BY update_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_quantity < (SELECT AVG(product_quantity) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS update_count FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id GROUP BY product_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(update_quantity) AS max_update_quantity FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id GROUP BY product_name ORDER BY max_update_quantity DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_quantity FROM products WHERE product_price < 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price, update_time FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, inventory_updates.update_quantity FROM products, inventory_updates WHERE products.product_id = inventory_updates.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(product_price) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT SUM(product_quantity) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(update_quantity) FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY product_price DESC",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_name LIKE '%chair%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_quantity <= 10 AND product_price > 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_updates FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id GROUP BY product_name HAVING total_updates > 2",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(product_quantity) FROM products GROUP BY product_name",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT product_id) FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_price FROM products WHERE product_price BETWEEN 50 AND 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(update_quantity) FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id WHERE update_time BETWEEN '2021-01-01' AND '2021-12-31'",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, product_quantity FROM products UNION SELECT product_id, 'OUT OF STOCK' AS product_name, 0 AS product_quantity FROM products WHERE product_quantity = 0",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(update_quantity) AS avg_quantity FROM products JOIN inventory_updates ON products.product_id = inventory_updates.product_id GROUP BY product_name HAVING avg_quantity > 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n product_id INT PRIMARY KEY,\n product_name VARCHAR(255),\n product_price DECIMAL(10, 2),\n product_quantity INT\n);\n\n\nCREATE TABLE inventory_updates (\n update_id INT PRIMARY KEY,\n product_id INT,\n update_time TIMESTAMP,\n update_quantity INT,\n FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, product_quantity FROM products WHERE product_quantity IN (SELECT MIN(product_quantity) FROM products)",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, name, price, quantity FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT stock, last_updated FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT inventory_id, product_id, stock, last_updated FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM 'Order';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, quantity, order_date FROM 'Order';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, order_date, status FROM 'Order';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, i.stock FROM Product p INNER JOIN Inventory i ON p.product_id = i.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, o.quantity, o.order_date FROM Product p INNER JOIN 'Order' o ON p.product_id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock, o.quantity, o.order_date FROM Product p INNER JOIN Inventory i ON p.product_id = i.product_id INNER JOIN 'Order' o ON p.product_id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, SUM(i.stock) AS total_stock FROM Product p INNER JOIN Inventory i ON p.product_id = i.product_id GROUP BY p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(o.order_id) AS total_orders FROM Product p LEFT JOIN 'Order' o ON p.product_id = o.product_id GROUP BY p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock, o.quantity, o.order_date FROM Product p INNER JOIN Inventory i ON p.product_id = i.product_id LEFT JOIN 'Order' o ON p.product_id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, o.quantity, o.order_date, o.status FROM Product p INNER JOIN 'Order' o ON p.product_id = o.product_id WHERE o.status = 'Shipped';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Product WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE stock < 10;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM 'Order' WHERE status = 'Pending';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Product WHERE name LIKE '%phone%';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE last_updated < '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Product;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Product WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT o.order_id, p.name, o.quantity, o.order_date FROM Order o JOIN Product p ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, i.stock, o.quantity FROM Product p JOIN Inventory i ON p.product_id = i.product_id JOIN Order o ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name AS product_name, i.stock AS available_stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id WHERE i.stock > 0;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, SUM(o.quantity) AS total_quantity FROM Product p JOIN Order o ON p.product_id = o.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(o.quantity) AS avg_quantity FROM Product p JOIN Order o ON p.product_id = o.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, MAX(i.stock) AS max_stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, DATE_FORMAT(o.order_date, '%Y-%m-%d') AS formatted_date FROM Product p JOIN Order o ON p.product_id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, COUNT(o.order_id) AS total_orders FROM Product p JOIN Order o ON p.product_id = o.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, MAX(o.quantity) AS max_quantity FROM Product p JOIN Order o ON p.product_id = o.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, MIN(i.stock) AS min_stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, AVG(p.price) AS avg_price FROM Product p;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock, o.quantity, COUNT(*) AS total_orders FROM Product p JOIN Inventory i ON p.product_id = i.product_id JOIN Order o ON o.product_id = p.product_id GROUP BY p.name, i.stock, o.quantity HAVING total_orders > 5;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id WHERE i.stock < (SELECT AVG(stock) FROM Inventory);",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, p.price, o.quantity FROM Product p LEFT JOIN Order o ON p.product_id = o.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, i.stock, o.quantity FROM Product p LEFT JOIN Inventory i ON p.product_id = i.product_id LEFT JOIN Order o ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, o.quantity, DATE_FORMAT(o.order_date, '%Y-%m-%d') AS formatted_date FROM Product p JOIN Order o ON p.product_id = o.product_id WHERE DATE(o.order_date) = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE Product (\n    product_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    quantity INT\n);\n\nCREATE TABLE Inventory (\n    inventory_id INT PRIMARY KEY,\n    product_id INT,\n    stock INT,\n    last_updated TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\nCREATE TABLE Order (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    quantity INT,\n    order_date TIMESTAMP,\n    status VARCHAR(50),\n    FOREIGN KEY (product_id) REFERENCES Product(product_id)\n);\n\n### STATEMENT\n\nSELECT p.name, SUM(i.stock) AS total_stock FROM Product p JOIN Inventory i ON p.product_id = i.product_id GROUP BY p.name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT id, product_name FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT id, product_name, quantity, price FROM inventory WHERE price < 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM orders;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM orders WHERE quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT order_id, product_id, order_date FROM orders WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM customers;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers WHERE phone_number LIKE '555%';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone_number FROM customers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM sales;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT sale_id, order_id, product_id FROM sales WHERE order_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT sale_id, order_id, sale_date FROM sales WHERE sale_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM inventory JOIN orders ON inventory.id = orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM inventory LEFT JOIN orders ON inventory.id = orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM customers JOIN sales ON customers.customer_id = sales.order_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM customers LEFT JOIN sales ON customers.customer_id = sales.order_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT id, product_name, quantity, price FROM inventory ORDER BY price DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, email FROM customers ORDER BY customer_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM orders ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT sale_id, order_id, product_id FROM sales ORDER BY order_id ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE product_name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT product_name, price FROM inventory WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM orders JOIN inventory ON orders.product_id = inventory.id WHERE quantity > 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_id, customer_name FROM customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory WHERE quantity BETWEEN 5 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT orders.order_id, inventory.product_name, orders.quantity FROM orders JOIN inventory ON orders.product_id = inventory.id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_id, customer_name, phone_number FROM customers WHERE LENGTH(phone_number) > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT * FROM orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT product_name, price * quantity AS total_price FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT DISTINCT sales.order_id, sales.sale_date FROM sales JOIN orders ON sales.order_id = orders.order_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM sales);",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT COUNT(*) AS order_count FROM orders WHERE order_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_name, email FROM customers WHERE customer_id = (SELECT customer_id FROM sales WHERE order_id = 1);",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT AVG(price) AS average_price FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_name, COUNT(*) AS total_orders FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_name, MAX(sale_date) AS last_sale_date FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT DISTINCT customer_name FROM customers JOIN sales ON customers.customer_id = sales.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT customer_name, AVG(price) AS avg_price FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (id INT PRIMARY KEY, product_name STRING, quantity INT, price DECIMAL);\n\nCREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date TIMESTAMP);\n\nCREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name STRING, email STRING, phone_number STRING);\n\nCREATE TABLE sales (sale_id INT PRIMARY KEY, order_id INT, product_id INT, sale_date TIMESTAMP);\n\n### STATEMENT\n\nSELECT product_name, quantity, price FROM inventory WHERE price = (SELECT MAX(price) FROM inventory);",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, quantity FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity, status FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, name, email FROM Customers;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, name, price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT transaction_id, order_id, amount FROM Transactions;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Products WHERE price > 50;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE status='pending';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, name FROM Customers WHERE email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, quantity FROM Orders WHERE status='completed';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE amount >= 100;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Products ORDER BY price ASC;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_id IN (1, 3, 5);",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT customer_id, name FROM Customers WHERE customer_id BETWEEN 100 AND 200;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Transactions WHERE order_id IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT name, price FROM Products LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT * FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT product_id, quantity FROM Inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.quantity, Products.name FROM Orders JOIN Products ON Orders.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name, Orders.product_id, Products.price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.quantity, Products.name FROM Orders JOIN Products ON Orders.product_id = Products.product_id WHERE Orders.status = 'shipped';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name, Customers.email, Transactions.amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Transactions ON Orders.order_id = Transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name, SUM(Transactions.amount) AS total_spent FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name, Orders.status, COUNT(Orders.order_id) AS total_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id, Orders.status;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, Orders.order_id AS order_number, Products.name AS product_name, Products.price AS product_price FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, Orders.order_id AS order_number, SUM(Products.price * Orders.quantity) AS total_order_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id GROUP BY Customers.customer_id, Orders.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Products.name AS product_name, COUNT(Orders.order_id) AS total_orders, SUM(Orders.quantity) AS total_quantity_sold FROM Products JOIN Orders ON Products.product_id = Orders.product_id GROUP BY Products.product_id, Products.name;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, Orders.order_id AS order_number, Products.name AS product_name, Orders.quantity AS order_quantity, Transactions.amount AS transaction_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, COUNT(DISTINCT Orders.order_id) AS total_orders, SUM(Orders.quantity) AS total_quantity_ordered, SUM(Transactions.amount) AS total_spent FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Products.name AS product_name, SUM(Orders.quantity) AS total_quantity_ordered, SUM(Transactions.amount) AS total_revenue FROM Products JOIN Orders ON Products.product_id = Orders.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, Orders.order_id AS order_number, SUM(Products.price * Orders.quantity) AS total_order_amount, SUM(Transactions.amount) AS total_paid_amount, SUM(Products.price * Orders.quantity) - SUM(Transactions.amount) AS balance FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name, COUNT(Orders.order_id) AS total_orders, SUM(Orders.quantity * Products.price) AS total_order_amount, SUM(Transactions.amount) AS total_paid_amount, SUM(Orders.quantity * Products.price) - SUM(Transactions.amount) AS balance FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Customers.customer_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Products.name AS product_name, SUM(Orders.quantity) AS total_quantity_ordered, SUM(Orders.quantity * Products.price) AS total_revenue, SUM(Transactions.amount) AS total_paid_amount, SUM(Orders.quantity * Products.price) - SUM(Transactions.amount) AS profit FROM Products JOIN Orders ON Products.product_id = Orders.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id GROUP BY Products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, Orders.order_id AS order_number, Orders.status, Products.name AS product_name, Products.price AS product_price, Transactions.amount AS payment_amount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Products ON Orders.product_id = Products.product_id JOIN Transactions ON Orders.order_id = Transactions.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Products.name AS product_name, SUM(Orders.quantity) AS total_quantity_ordered, AVG(Products.price) AS average_price FROM Products JOIN Orders ON Products.product_id = Orders.product_id GROUP BY Products.product_id, Products.name;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n  product_id INT PRIMARY KEY,\n  quantity INT\n);\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  product_id INT,\n  quantity INT,\n  status VARCHAR(50)\n);\n\nCREATE TABLE Customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE Products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE Transactions (\n  transaction_id INT PRIMARY KEY,\n  order_id INT,\n  amount DECIMAL(10,2)\n);\n\n### STATEMENT\n\nSELECT Customers.name AS customer_name, COUNT(Orders.order_id) AS total_orders, AVG(Orders.quantity) AS average_order_quantity FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id;"
]