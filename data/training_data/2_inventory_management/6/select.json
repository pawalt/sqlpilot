[
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE stock_level > 50;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name FROM notifications WHERE notification_threshold < 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, stock_level FROM notifications WHERE stock_level <= 20;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE notification_threshold BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name FROM notifications WHERE stock_level < notification_threshold;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, notification_threshold FROM notifications WHERE stock_level = 0;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications ORDER BY stock_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, notification_threshold FROM notifications ORDER BY product_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, stock_level FROM notifications ORDER BY id DESC;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name LIKE 'P%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, stock_level FROM notifications WHERE product_name LIKE '%e%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name = 'Apple iPhone' AND stock_level > 0;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name FROM notifications WHERE product_name = 'Samsung Galaxy' AND notification_threshold < 50;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name IN ('Apple MacBook', 'Dell XPS', 'HP Envy');",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM notifications WHERE notification_threshold > 30 AND stock_level < 100;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name FROM notifications WHERE stock_level = notification_threshold;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE stock_level < notification_threshold",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name FROM notifications WHERE stock_level > 10",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, notification_threshold FROM notifications WHERE id = 5",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) FROM notifications",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(stock_level) FROM notifications",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT MIN(stock_level) FROM notifications WHERE product_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM notifications WHERE notification_threshold >= 20",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM notifications",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, stock_level FROM notifications ORDER BY stock_level DESC",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE stock_level < 10 OR notification_threshold > 50",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name LIKE '%apple%'",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, notification_threshold FROM notifications WHERE stock_level BETWEEN 20 AND 50",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, stock_level FROM notifications WHERE notification_threshold = stock_level",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name IN ('Apple', 'Banana', 'Orange')",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE stock_level + notification_threshold > 50",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, notification_threshold FROM notifications WHERE stock_level % 2 = 0",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT id, product_name, notification_threshold FROM notifications WHERE NOT stock_level = notification_threshold",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE stock_level * 2 = notification_threshold",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT product_name, notification_threshold FROM notifications WHERE stock_level + 10 > notification_threshold",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  id SERIAL PRIMARY KEY,\n  product_name VARCHAR(255) NOT NULL,\n  stock_level INT NOT NULL,\n  notification_threshold INT NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_name NOT LIKE '%Samsung%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, stock_level FROM products WHERE stock_level > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name FROM products WHERE product_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT notification_id, product_id FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT notification_id, message FROM notifications WHERE product_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, n.message FROM products p INNER JOIN notifications n ON p.product_id = n.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, n.message FROM products p LEFT JOIN notifications n ON p.product_id = n.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, n.message FROM products p RIGHT JOIN notifications n ON p.product_id = n.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, n.message FROM products p JOIN notifications n ON p.product_id = n.product_id WHERE p.stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, n.message FROM products p JOIN notifications n ON p.product_id = n.product_id ORDER BY p.product_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) AS avg_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MAX(stock_level) AS max_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MIN(stock_level) AS min_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT SUM(stock_level) AS total_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_notifications FROM notifications GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(*) AS total_notifications FROM notifications GROUP BY product_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, SUM(stock_level) AS total_stock FROM products GROUP BY product_id HAVING SUM(stock_level) > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE stock_level > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT products.product_name, notifications.message FROM products JOIN notifications ON products.product_id = notifications.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE stock_level < 50 ORDER BY product_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT MAX(stock_level) AS max_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(notification_id) AS notification_count FROM notifications GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, CASE WHEN stock_level > 50 THEN 'In Stock' ELSE 'Out of Stock' END AS stock_status FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, message, ROW_NUMBER() OVER (ORDER BY product_id) AS row_num FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT SUM(stock_level) AS total_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) AS avg_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, MAX(stock_level) AS max_stock FROM products GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT * FROM products JOIN notifications ON products.product_id = notifications.product_id WHERE products.stock_level > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, MIN(stock_level) AS min_stock FROM products WHERE stock_level > 0 GROUP BY product_id HAVING MIN(stock_level) < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, notification_id FROM products LEFT JOIN notifications ON products.product_id = notifications.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(stock_level) AS avg_stock FROM products GROUP BY product_name HAVING AVG(stock_level) > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, message, LEAD(product_id) OVER (ORDER BY product_id) AS next_product_id FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_id, message, LAG(product_id) OVER (ORDER BY product_id) AS prev_product_id FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level, NTILE(4) OVER (ORDER BY stock_level) AS quartile FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level, RANK() OVER (ORDER BY stock_level DESC) AS rank FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    product_id INT,\n    message VARCHAR(255),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n### STATEMENT\n\nSELECT notification_id, products.product_name, notifications.message FROM notifications LEFT JOIN products ON notifications.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, product_id FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT message FROM notifications WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, name, stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE stock_level > 100;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, product_id, new_stock_level FROM stock_changes;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM stock_changes WHERE new_stock_level < old_stock_level;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, timestamp FROM stock_changes WHERE product_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.message, products.name, stock_changes.new_stock_level FROM notifications INNER JOIN products ON notifications.product_id = products.id INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.message, stock_changes.timestamp, products.stock_level FROM notifications INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id INNER JOIN products ON notifications.product_id = products.id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id AS notification_id, products.id AS product_id, stock_changes.id AS change_id FROM notifications, products, stock_changes WHERE notifications.product_id = products.id AND notifications.product_id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.message, products.name, stock_changes.new_stock_level FROM notifications LEFT JOIN products ON notifications.product_id = products.id LEFT JOIN stock_changes ON notifications.product_id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id AS notification_id, products.name AS product_name, stock_changes.old_stock_level AS old_level FROM notifications, products, stock_changes WHERE notifications.product_id = products.id AND products.id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id AS notification_id, stock_changes.new_stock_level, stock_changes.old_stock_level FROM notifications INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id WHERE notifications.id > 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, stock_changes.timestamp FROM notifications INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id WHERE notifications.id = 5;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.name, SUM(stock_changes.new_stock_level - stock_changes.old_stock_level) AS stock_change FROM products INNER JOIN stock_changes ON products.id = stock_changes.product_id GROUP BY products.id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT notifications.message) AS total_messages FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(stock_changes.new_stock_level - stock_changes.old_stock_level) AS avg_stock_change FROM stock_changes;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(stock_changes.new_stock_level) AS max_stock_level FROM stock_changes;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(stock_changes.old_stock_level) AS min_stock_level FROM stock_changes;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, message FROM notifications WHERE id > 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications INNER JOIN products ON notifications.product_id = products.id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications LEFT JOIN products ON notifications.product_id = products.id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications RIGHT JOIN products ON notifications.product_id = products.id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, products.name, stock_changes.new_stock_level FROM notifications INNER JOIN products ON notifications.product_id = products.id INNER JOIN stock_changes ON products.id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name, stock_changes.new_stock_level FROM notifications LEFT JOIN products ON notifications.product_id = products.id LEFT JOIN stock_changes ON products.id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name, stock_changes.new_stock_level FROM notifications RIGHT JOIN products ON notifications.product_id = products.id RIGHT JOIN stock_changes ON products.id = stock_changes.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message FROM notifications LEFT JOIN products ON notifications.product_id = products.id WHERE products.stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message FROM notifications INNER JOIN products ON notifications.product_id = products.id WHERE products.stock_level > 50;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message FROM notifications RIGHT JOIN products ON notifications.product_id = products.id WHERE products.stock_level < 20;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, stock_changes.timestamp FROM notifications INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id WHERE stock_changes.new_stock_level < stock_changes.old_stock_level;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, stock_changes.timestamp FROM notifications INNER JOIN stock_changes ON notifications.product_id = stock_changes.product_id WHERE stock_changes.timestamp >'2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name, stock_changes.timestamp FROM notifications INNER JOIN products ON notifications.product_id = products.id INNER JOIN stock_changes ON products.id = stock_changes.product_id WHERE stock_changes.old_stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name, stock_changes.timestamp FROM notifications LEFT JOIN products ON notifications.product_id = products.id LEFT JOIN stock_changes ON products.id = stock_changes.product_id WHERE stock_changes.new_stock_level > stock_changes.old_stock_level;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name, stock_changes.timestamp FROM notifications RIGHT JOIN products ON notifications.product_id = products.id RIGHT JOIN stock_changes ON products.id = stock_changes.product_id WHERE stock_changes.new_stock_level = 0;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications INNER JOIN products ON notifications.product_id = products.id WHERE products.name LIKE '%phone%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications INNER JOIN products ON notifications.product_id = products.id WHERE products.name NOT LIKE '%phone%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications INNER JOIN products ON notifications.product_id = products.id ORDER BY products.name ASC;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n    id INT PRIMARY KEY,\n    product_id INT,\n    message TEXT\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name TEXT,\n    stock_level INT\n);\n\nCREATE TABLE stock_changes (\n    id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    old_stock_level INT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.id, notifications.message, products.name FROM notifications INNER JOIN products ON notifications.product_id = products.id ORDER BY products.stock_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products WHERE stock_level > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products ORDER BY product_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notification_text FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM low_stock;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, quantity_threshold FROM low_stock WHERE quantity_threshold < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, quantity_threshold FROM low_stock ORDER BY quantity_threshold ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, new_stock_level, updated_at FROM stock_updates;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, new_stock_level FROM stock_updates WHERE updated_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, new_stock_level, updated_at FROM stock_updates ORDER BY updated_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products INNER JOIN stock_updates ON products.product_id = stock_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products LEFT JOIN stock_updates ON products.product_id = stock_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products RIGHT JOIN stock_updates ON products.product_id = stock_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products INNER JOIN stock_updates ON products.product_id = stock_updates.product_id WHERE stock_updates.new_stock_level > products.stock_level;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_id, products.product_name, stock_updates.new_stock_level FROM products INNER JOIN stock_updates ON products.product_id = stock_updates.product_id WHERE stock_updates.new_stock_level < products.stock_level;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products INNER JOIN stock_updates ON products.product_id = stock_updates.product_id WHERE stock_updates.updated_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_name, stock_updates.new_stock_level FROM products INNER JOIN stock_updates ON products.product_id = stock_updates.product_id WHERE stock_updates.updated_at >= '2022-01-01' ORDER BY stock_updates.updated_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE notification_text LIKE '%urgent%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE stock_level < 5 ORDER BY product_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE stock_level > 20 AND stock_level < 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, product_name FROM products JOIN low_stock ON products.product_id = low_stock.product_id WHERE low_stock.quantity_threshold < products.stock_level;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, new_stock_level, updated_at FROM products JOIN stock_updates ON products.product_id = stock_updates.product_id WHERE stock_updates.updated_at BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT notifications.notification_id, notifications.notification_text, products.product_name FROM notifications JOIN products ON notifications.notification_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE '%apple%' OR product_name LIKE '%banana%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) AS average_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_products FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE stock_level = (SELECT MAX(stock_level) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM products LEFT JOIN stock_updates ON products.product_id = stock_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(new_stock_level) AS total_stock_updated FROM stock_updates;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, product_name, stock_level FROM products WHERE EXISTS (SELECT * FROM low_stock WHERE low_stock.product_id = products.product_id);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(new_stock_level) AS max_stock_level FROM products JOIN stock_updates ON products.product_id = stock_updates.product_id GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level, updated_at FROM products JOIN stock_updates ON products.product_id = stock_updates.product_id ORDER BY updated_at DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE product_id IN (SELECT product_id FROM low_stock WHERE quantity_threshold < 10);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT products.product_id, notifications.notification_text, stock_updates.new_stock_level FROM products LEFT JOIN notifications ON products.product_id = notifications.notification_id JOIN stock_updates ON products.product_id = stock_updates.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE stock_level >= (SELECT AVG(stock_level) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    stock_level INT\n);\n\nCREATE TABLE notifications (\n    notification_id INT PRIMARY KEY,\n    notification_text VARCHAR(255)\n);\n\nCREATE TABLE low_stock (\n    low_stock_id INT PRIMARY KEY,\n    product_id INT,\n    quantity_threshold INT\n);\n\nCREATE TABLE stock_updates (\n    update_id INT PRIMARY KEY,\n    product_id INT,\n    new_stock_level INT,\n    updated_at TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE product_id NOT IN (SELECT product_id FROM stock_updates);",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT notification_id, product_id, message FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT username, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT alert_id, product_id, message FROM low_stock_alerts;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM notifications_log;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT log_id, notification_id, user_id FROM notifications_log;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT notifications.notification_id, notifications.product_id, products.product_name FROM notifications JOIN products ON notifications.product_id = products.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT notifications.notification_id, notifications.message, users.username FROM notifications JOIN notifications_log ON notifications.notification_id = notifications_log.notification_id JOIN users ON notifications_log.user_id = users.user_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products ORDER BY stock_level DESC;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE username LIKE 'j%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT product_name, stock_level FROM products WHERE product_name ILIKE '%phone%';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT MAX(stock_level) FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE product_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT * FROM notifications WHERE timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT message FROM notifications WHERE product_id IN (SELECT product_id FROM products WHERE stock_level < 10);",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message, p.product_name FROM notifications n INNER JOIN products p ON n.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.*, p.product_name FROM notifications n LEFT JOIN products p ON n.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.*, u.username FROM notifications n INNER JOIN users u ON n.notification_id = u.user_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.*, l.* FROM notifications n INNER JOIN notifications_log l ON n.notification_id = l.notification_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message, u.username, l.timestamp FROM notifications n INNER JOIN users u ON n.user_id = u.user_id INNER JOIN notifications_log l ON n.notification_id = l.notification_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message, a.message FROM notifications n LEFT JOIN low_stock_alerts a ON n.product_id = a.product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_notifications FROM notifications;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT AVG(stock_level) AS avg_stock_level FROM products;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_users, MAX(user_id) AS max_user_id FROM users;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_id FROM low_stock_alerts;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT product_id, COUNT(*) AS total_alerts FROM low_stock_alerts GROUP BY product_id;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT p.product_name, COUNT(*) AS total_notifications FROM notifications n INNER JOIN products p ON n.product_id = p.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message, u.email FROM notifications n INNER JOIN users u ON n.user_id = u.user_id WHERE u.email LIKE '%example.com';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message FROM notifications n WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT p.product_name, COUNT(n.notification_id) AS total_notifications FROM notifications n INNER JOIN products p ON n.product_id = p.product_id WHERE n.timestamp > '2022-01-01' GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT u.username, COUNT(*) AS total_notifications FROM notifications n INNER JOIN users u ON n.user_id = u.user_id WHERE n.timestamp < '2022-01-01' GROUP BY u.username HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT n.message, n.timestamp FROM notifications n WHERE EXISTS (SELECT 1 FROM low_stock_alerts a WHERE n.product_id = a.product_id);",
  "### TABLEDATA\n\nCREATE TABLE notifications (\n  notification_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE products (\n  product_id SERIAL PRIMARY KEY,\n  product_name TEXT,\n  stock_level INT\n);\n\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY,\n  username TEXT,\n  email TEXT\n);\n\nCREATE TABLE low_stock_alerts (\n  alert_id SERIAL PRIMARY KEY,\n  product_id INT,\n  message TEXT,\n  timestamp TIMESTAMPTZ\n);\n\nCREATE TABLE notifications_log (\n  log_id SERIAL PRIMARY KEY,\n  notification_id INT,\n  user_id INT,\n  timestamp TIMESTAMPTZ\n);\n\n### STATEMENT\n\nSELECT p.product_name, CASE WHEN p.stock_level < 5 THEN 'Low Stock' ELSE 'Sufficient Stock' END AS stock_status FROM products p;"
]